
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000426  00800060  00004aac  00004b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800486  00800486  00004f66  2**0
                  ALLOC
  3 .stab         000049d4  00000000  00000000  00004f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000309a  00000000  00000000  0000993c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000c9d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000cb96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000cdaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001088a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00011b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00011d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001207f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012a99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ce 21 	call	0x439c	; 0x439c <main>
      8a:	0c 94 54 25 	jmp	0x4aa8	; 0x4aa8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 22 	jmp	0x452e	; 0x452e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 22 	jmp	0x452e	; 0x452e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 83 22 	jmp	0x4506	; 0x4506 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e8       	ldi	r22, 0x85	; 133
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 84 22 	jmp	0x4508	; 0x4508 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 a0 22 	jmp	0x4540	; 0x4540 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 a7 22 	jmp	0x454e	; 0x454e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 83 22 	jmp	0x4506	; 0x4506 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e3 57       	subi	r30, 0x73	; 115
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_xInit>:
/* ***************************************************************************** */
static void (*ADC_vCallBack)(uint16);

/* ***************************************************************************** */
Error_Status ADC_xInit(const ADC_Typedef *ADCx)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <ADC_xInit+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9b 83       	std	Y+3, r25	; 0x03
     ef8:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status Local_xErrorState	=	E_NOK;
     efa:	19 82       	std	Y+1, r1	; 0x01

	/* Configure reference voltage */
	Local_xErrorState	=	ADC_xRefVoltage(ADCx->ADC_xVoltRef);
     efc:	ea 81       	ldd	r30, Y+2	; 0x02
     efe:	fb 81       	ldd	r31, Y+3	; 0x03
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	0e 94 ba 07 	call	0xf74	; 0xf74 <ADC_xRefVoltage>
     f06:	89 83       	std	Y+1, r24	; 0x01
	/* Configure adjusting result state */
	Local_xErrorState	=	ADC_xAdjustResult(ADCx->ADC_xAdjustState);
     f08:	ea 81       	ldd	r30, Y+2	; 0x02
     f0a:	fb 81       	ldd	r31, Y+3	; 0x03
     f0c:	83 81       	ldd	r24, Z+3	; 0x03
     f0e:	0e 94 0d 08 	call	0x101a	; 0x101a <ADC_xAdjustResult>
     f12:	89 83       	std	Y+1, r24	; 0x01
	if(ADCx->ADC_xAdjustState == ADC_RIGHT_ADJUST)
     f14:	ea 81       	ldd	r30, Y+2	; 0x02
     f16:	fb 81       	ldd	r31, Y+3	; 0x03
     f18:	83 81       	ldd	r24, Z+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	21 f4       	brne	.+8      	; 0xf26 <ADC_xInit+0x3c>
	{
		ADC_xCurrentAdjustState = ADC_RIGHT_ADJUST;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 86 04 	sts	0x0486, r24
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <ADC_xInit+0x40>
	}
	else
	{
		ADC_xCurrentAdjustState = ADC_LEFT_ADJUST;
     f26:	10 92 86 04 	sts	0x0486, r1
	}
	/* Set ADC interrupt state */
	Local_xErrorState	=	ADC_xSetIntState(ADCx->ADC_xInterruptState);
     f2a:	ea 81       	ldd	r30, Y+2	; 0x02
     f2c:	fb 81       	ldd	r31, Y+3	; 0x03
     f2e:	84 81       	ldd	r24, Z+4	; 0x04
     f30:	0e 94 96 08 	call	0x112c	; 0x112c <ADC_xSetIntState>
     f34:	89 83       	std	Y+1, r24	; 0x01
	/* Set auto trigger state */
	Local_xErrorState	=	ADC_xSetAutoTrigger(ADCx->ADC_xTriggerState);
     f36:	ea 81       	ldd	r30, Y+2	; 0x02
     f38:	fb 81       	ldd	r31, Y+3	; 0x03
     f3a:	85 81       	ldd	r24, Z+5	; 0x05
     f3c:	0e 94 cf 08 	call	0x119e	; 0x119e <ADC_xSetAutoTrigger>
     f40:	89 83       	std	Y+1, r24	; 0x01
	/* Set PreScaler */
	Local_xErrorState	=	ADC_xSetPrescaler(ADCx->ADC_xPrescaler);
     f42:	ea 81       	ldd	r30, Y+2	; 0x02
     f44:	fb 81       	ldd	r31, Y+3	; 0x03
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	0e 94 01 09 	call	0x1202	; 0x1202 <ADC_xSetPrescaler>
     f4c:	89 83       	std	Y+1, r24	; 0x01
	/* Set ADC auto trigger source */
	Local_xErrorState	=	ADC_xSetTriggerSrc(ADCx->ADC_xTriggerSource);
     f4e:	ea 81       	ldd	r30, Y+2	; 0x02
     f50:	fb 81       	ldd	r31, Y+3	; 0x03
     f52:	86 81       	ldd	r24, Z+6	; 0x06
     f54:	0e 94 23 09 	call	0x1246	; 0x1246 <ADC_xSetTriggerSrc>
     f58:	89 83       	std	Y+1, r24	; 0x01
	/* Set initial ADC state */
	Local_xErrorState	=	ADC_xSetState(ADCx->ADC_xState);
     f5a:	ea 81       	ldd	r30, Y+2	; 0x02
     f5c:	fb 81       	ldd	r31, Y+3	; 0x03
     f5e:	87 81       	ldd	r24, Z+7	; 0x07
     f60:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ADC_xSetState>
     f64:	89 83       	std	Y+1, r24	; 0x01

	return Local_xErrorState;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
}
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <ADC_xRefVoltage>:

/* ***************************************************************************** */

static Error_Status ADC_xRefVoltage(ADC_VoltageRef_t Copy_xVoltRef)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <ADC_xRefVoltage+0x6>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <ADC_xRefVoltage+0x8>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xVoltRef)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	3c 83       	std	Y+4, r19	; 0x04
     f8a:	2b 83       	std	Y+3, r18	; 0x03
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	c1 f0       	breq	.+48     	; 0xfc6 <ADC_xRefVoltage+0x52>
     f96:	2b 81       	ldd	r18, Y+3	; 0x03
     f98:	3c 81       	ldd	r19, Y+4	; 0x04
     f9a:	22 30       	cpi	r18, 0x02	; 2
     f9c:	31 05       	cpc	r19, r1
     f9e:	11 f1       	breq	.+68     	; 0xfe4 <ADC_xRefVoltage+0x70>
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	69 f5       	brne	.+90     	; 0x1002 <ADC_xRefVoltage+0x8e>
	{
	case ADC_VREF_TURNED_OFF:
		CLEAR_BIT(ADMUX,REFS1);
     fa8:	a7 e2       	ldi	r26, 0x27	; 39
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e7 e2       	ldi	r30, 0x27	; 39
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 77       	andi	r24, 0x7F	; 127
     fb4:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,REFS0);
     fb6:	a7 e2       	ldi	r26, 0x27	; 39
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e7 e2       	ldi	r30, 0x27	; 39
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7b       	andi	r24, 0xBF	; 191
     fc2:	8c 93       	st	X, r24
     fc4:	20 c0       	rjmp	.+64     	; 0x1006 <ADC_xRefVoltage+0x92>
		break;
	case ADC_AVCC_EX_CAP:
		CLEAR_BIT(ADMUX,REFS1);
     fc6:	a7 e2       	ldi	r26, 0x27	; 39
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e7 e2       	ldi	r30, 0x27	; 39
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 77       	andi	r24, 0x7F	; 127
     fd2:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);
     fd4:	a7 e2       	ldi	r26, 0x27	; 39
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e7 e2       	ldi	r30, 0x27	; 39
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	80 64       	ori	r24, 0x40	; 64
     fe0:	8c 93       	st	X, r24
     fe2:	11 c0       	rjmp	.+34     	; 0x1006 <ADC_xRefVoltage+0x92>
		break;
	case ADC_INTERNAL_VOLTAGE_2_56:
		SET_BIT(ADMUX,REFS1);
     fe4:	a7 e2       	ldi	r26, 0x27	; 39
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e7 e2       	ldi	r30, 0x27	; 39
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	80 68       	ori	r24, 0x80	; 128
     ff0:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);
     ff2:	a7 e2       	ldi	r26, 0x27	; 39
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e7 e2       	ldi	r30, 0x27	; 39
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	8c 93       	st	X, r24
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <ADC_xRefVoltage+0x92>
		break;
	default:
		return E_NOK;
    1002:	1a 82       	std	Y+2, r1	; 0x02
    1004:	02 c0       	rjmp	.+4      	; 0x100a <ADC_xRefVoltage+0x96>
		break;
	}
	return E_OK;
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <ADC_xAdjustResult>:

/* ***************************************************************************** */

static Error_Status ADC_xAdjustResult(ADC_Adjust_t Copy_xAdjustState)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <ADC_xAdjustResult+0x6>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <ADC_xAdjustResult+0x8>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xAdjustState)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3c 83       	std	Y+4, r19	; 0x04
    1030:	2b 83       	std	Y+3, r18	; 0x03
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	31 f0       	breq	.+12     	; 0x1046 <ADC_xAdjustResult+0x2c>
    103a:	2b 81       	ldd	r18, Y+3	; 0x03
    103c:	3c 81       	ldd	r19, Y+4	; 0x04
    103e:	21 30       	cpi	r18, 0x01	; 1
    1040:	31 05       	cpc	r19, r1
    1042:	49 f0       	breq	.+18     	; 0x1056 <ADC_xAdjustResult+0x3c>
    1044:	10 c0       	rjmp	.+32     	; 0x1066 <ADC_xAdjustResult+0x4c>
	{
	case ADC_LEFT_ADJUST:
		SET_BIT(ADMUX,ADLAR);
    1046:	a7 e2       	ldi	r26, 0x27	; 39
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e7 e2       	ldi	r30, 0x27	; 39
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	80 62       	ori	r24, 0x20	; 32
    1052:	8c 93       	st	X, r24
    1054:	0a c0       	rjmp	.+20     	; 0x106a <ADC_xAdjustResult+0x50>
		break;
	case ADC_RIGHT_ADJUST:
		CLEAR_BIT(ADMUX,ADLAR);
    1056:	a7 e2       	ldi	r26, 0x27	; 39
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e7 e2       	ldi	r30, 0x27	; 39
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8f 7d       	andi	r24, 0xDF	; 223
    1062:	8c 93       	st	X, r24
    1064:	02 c0       	rjmp	.+4      	; 0x106a <ADC_xAdjustResult+0x50>
		break;
	default:
		return E_NOK;
    1066:	1a 82       	std	Y+2, r1	; 0x02
    1068:	02 c0       	rjmp	.+4      	; 0x106e <ADC_xAdjustResult+0x54>
		break;
	}
	return E_OK;
    106a:	31 e0       	ldi	r19, 0x01	; 1
    106c:	3a 83       	std	Y+2, r19	; 0x02
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <ADC_xSelectChannel>:

/* ***************************************************************************** */

Error_Status ADC_xSelectChannel(ADC_Ch_t Copy_xChannel)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <ADC_xSelectChannel+0x6>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	89 83       	std	Y+1, r24	; 0x01
	/* Check validity of the channel */
	if(E_NOK == ADC_IS_VALID_CH(Copy_xChannel))
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	80 32       	cpi	r24, 0x20	; 32
    108e:	10 f0       	brcs	.+4      	; 0x1094 <ADC_xSelectChannel+0x16>
	{
		return E_NOK;
    1090:	1a 82       	std	Y+2, r1	; 0x02
    1092:	14 c0       	rjmp	.+40     	; 0x10bc <ADC_xSelectChannel+0x3e>
	}

	/* Clear selection bits */
	Copy_xChannel &=0x07;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	87 70       	andi	r24, 0x07	; 7
    1098:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0;
    109a:	a7 e2       	ldi	r26, 0x27	; 39
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e7 e2       	ldi	r30, 0x27	; 39
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 7e       	andi	r24, 0xE0	; 224
    10a6:	8c 93       	st	X, r24
	/* Set channel bits */
	ADMUX |= (uint8)Copy_xChannel;
    10a8:	a7 e2       	ldi	r26, 0x27	; 39
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e7 e2       	ldi	r30, 0x27	; 39
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	90 81       	ld	r25, Z
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	89 2b       	or	r24, r25
    10b6:	8c 93       	st	X, r24
	return E_OK;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <ADC_xSetState>:

/* ***************************************************************************** */

Error_Status ADC_xSetState(ADC_State_t Copy_xState)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <ADC_xSetState+0x6>
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <ADC_xSetState+0x8>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xState)
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3c 83       	std	Y+4, r19	; 0x04
    10de:	2b 83       	std	Y+3, r18	; 0x03
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	31 f0       	breq	.+12     	; 0x10f4 <ADC_xSetState+0x2c>
    10e8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ea:	3c 81       	ldd	r19, Y+4	; 0x04
    10ec:	21 30       	cpi	r18, 0x01	; 1
    10ee:	31 05       	cpc	r19, r1
    10f0:	49 f0       	breq	.+18     	; 0x1104 <ADC_xSetState+0x3c>
    10f2:	10 c0       	rjmp	.+32     	; 0x1114 <ADC_xSetState+0x4c>
	{
	case ADC_DISABLE:
		CLEAR_BIT(ADCSRA,ADEN);
    10f4:	a6 e2       	ldi	r26, 0x26	; 38
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e6 e2       	ldi	r30, 0x26	; 38
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8f 77       	andi	r24, 0x7F	; 127
    1100:	8c 93       	st	X, r24
    1102:	0a c0       	rjmp	.+20     	; 0x1118 <ADC_xSetState+0x50>
		break;
	case ADC_ENABLE:
		SET_BIT(ADCSRA,ADEN);
    1104:	a6 e2       	ldi	r26, 0x26	; 38
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e6 e2       	ldi	r30, 0x26	; 38
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 68       	ori	r24, 0x80	; 128
    1110:	8c 93       	st	X, r24
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <ADC_xSetState+0x50>
		break;
	default:
		return E_NOK;
    1114:	1a 82       	std	Y+2, r1	; 0x02
    1116:	02 c0       	rjmp	.+4      	; 0x111c <ADC_xSetState+0x54>
		break;
	}
	return E_OK;
    1118:	31 e0       	ldi	r19, 0x01	; 1
    111a:	3a 83       	std	Y+2, r19	; 0x02
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <ADC_xSetIntState>:

/* ***************************************************************************** */

Error_Status ADC_xSetIntState(ADC_Int_t Copy_xState)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <ADC_xSetIntState+0x6>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <ADC_xSetIntState+0x8>
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_xState) {
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3c 83       	std	Y+4, r19	; 0x04
    1142:	2b 83       	std	Y+3, r18	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	31 f0       	breq	.+12     	; 0x1158 <ADC_xSetIntState+0x2c>
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	21 30       	cpi	r18, 0x01	; 1
    1152:	31 05       	cpc	r19, r1
    1154:	49 f0       	breq	.+18     	; 0x1168 <ADC_xSetIntState+0x3c>
    1156:	10 c0       	rjmp	.+32     	; 0x1178 <ADC_xSetIntState+0x4c>
	case ADC_DISABLE_INTERRUPT:
		CLEAR_BIT(ADCSRA,ADIE);
    1158:	a6 e2       	ldi	r26, 0x26	; 38
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e6 e2       	ldi	r30, 0x26	; 38
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	87 7f       	andi	r24, 0xF7	; 247
    1164:	8c 93       	st	X, r24
    1166:	0a c0       	rjmp	.+20     	; 0x117c <ADC_xSetIntState+0x50>
		break;
	case ADC_ENABLE_INTERRUPT:
		SET_BIT(ADCSRA,ADIE);
    1168:	a6 e2       	ldi	r26, 0x26	; 38
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e6 e2       	ldi	r30, 0x26	; 38
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 60       	ori	r24, 0x08	; 8
    1174:	8c 93       	st	X, r24
    1176:	02 c0       	rjmp	.+4      	; 0x117c <ADC_xSetIntState+0x50>
		break;
	default:
		return E_NOK;
    1178:	1a 82       	std	Y+2, r1	; 0x02
    117a:	09 c0       	rjmp	.+18     	; 0x118e <ADC_xSetIntState+0x62>
		break;
	}
	ADC_START_CONVERSION();
    117c:	a6 e2       	ldi	r26, 0x26	; 38
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e6 e2       	ldi	r30, 0x26	; 38
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	80 64       	ori	r24, 0x40	; 64
    1188:	8c 93       	st	X, r24
	return E_OK;
    118a:	31 e0       	ldi	r19, 0x01	; 1
    118c:	3a 83       	std	Y+2, r19	; 0x02
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <ADC_xSetAutoTrigger>:

/* ***************************************************************************** */

static Error_Status ADC_xSetAutoTrigger(ADC_AutoTrigger_t Copy_xTrigger)
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <ADC_xSetAutoTrigger+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <ADC_xSetAutoTrigger+0x8>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_xTrigger) {
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3c 83       	std	Y+4, r19	; 0x04
    11b4:	2b 83       	std	Y+3, r18	; 0x03
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	31 f0       	breq	.+12     	; 0x11ca <ADC_xSetAutoTrigger+0x2c>
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	3c 81       	ldd	r19, Y+4	; 0x04
    11c2:	21 30       	cpi	r18, 0x01	; 1
    11c4:	31 05       	cpc	r19, r1
    11c6:	49 f0       	breq	.+18     	; 0x11da <ADC_xSetAutoTrigger+0x3c>
    11c8:	10 c0       	rjmp	.+32     	; 0x11ea <ADC_xSetAutoTrigger+0x4c>
	case ADC_DISABLE_AUTO_TRIGGER:
		CLEAR_BIT(ADCSRA,ADATE);
    11ca:	a6 e2       	ldi	r26, 0x26	; 38
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e6 e2       	ldi	r30, 0x26	; 38
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	8f 7d       	andi	r24, 0xDF	; 223
    11d6:	8c 93       	st	X, r24
    11d8:	0a c0       	rjmp	.+20     	; 0x11ee <ADC_xSetAutoTrigger+0x50>
		break;
	case ADC_ENABLE_AUTO_TRIGGER:
		SET_BIT(ADCSRA,ADATE);
    11da:	a6 e2       	ldi	r26, 0x26	; 38
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e6 e2       	ldi	r30, 0x26	; 38
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 62       	ori	r24, 0x20	; 32
    11e6:	8c 93       	st	X, r24
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <ADC_xSetAutoTrigger+0x50>
		break;
	default:
		return E_NOK;
    11ea:	1a 82       	std	Y+2, r1	; 0x02
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <ADC_xSetAutoTrigger+0x54>
		break;
	}
	return E_OK;
    11ee:	31 e0       	ldi	r19, 0x01	; 1
    11f0:	3a 83       	std	Y+2, r19	; 0x02
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <ADC_xSetPrescaler>:

/* ***************************************************************************** */

static Error_Status ADC_xSetPrescaler(ADC_Prescaler_t Copy_xPrescaler)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <ADC_xSetPrescaler+0x6>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	89 83       	std	Y+1, r24	; 0x01
	if(E_NOK == ADC_IS_VALID_PRESCALER(Copy_xPrescaler))
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	88 30       	cpi	r24, 0x08	; 8
    1212:	10 f0       	brcs	.+4      	; 0x1218 <ADC_xSetPrescaler+0x16>
	{
		return E_NOK;
    1214:	1a 82       	std	Y+2, r1	; 0x02
    1216:	11 c0       	rjmp	.+34     	; 0x123a <ADC_xSetPrescaler+0x38>
	}
	/* Clear PreScaler bits */
	ADCSRA &= 0xF8;
    1218:	a6 e2       	ldi	r26, 0x26	; 38
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e6 e2       	ldi	r30, 0x26	; 38
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	88 7f       	andi	r24, 0xF8	; 248
    1224:	8c 93       	st	X, r24
	/* Set PreScaler */
	ADCSRA |= (uint8)Copy_xPrescaler;
    1226:	a6 e2       	ldi	r26, 0x26	; 38
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e6 e2       	ldi	r30, 0x26	; 38
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	90 81       	ld	r25, Z
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	89 2b       	or	r24, r25
    1234:	8c 93       	st	X, r24

	return E_OK;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	8a 83       	std	Y+2, r24	; 0x02
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <ADC_xSetTriggerSrc>:

/* ***************************************************************************** */

static Error_Status ADC_xSetTriggerSrc(ADC_TriggerSrc_t Copy_xSrc)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <ADC_xSetTriggerSrc+0x6>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	89 83       	std	Y+1, r24	; 0x01
	if(E_NOK == ADC_IS_VALID_TRGSRC(Copy_xSrc))
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	88 30       	cpi	r24, 0x08	; 8
    1256:	10 f0       	brcs	.+4      	; 0x125c <ADC_xSetTriggerSrc+0x16>
	{
		return E_NOK;
    1258:	1a 82       	std	Y+2, r1	; 0x02
    125a:	1c c0       	rjmp	.+56     	; 0x1294 <ADC_xSetTriggerSrc+0x4e>
	}
	/* Clear special function IO bits */
	SFIOR &= 0x0F;
    125c:	a0 e5       	ldi	r26, 0x50	; 80
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e0 e5       	ldi	r30, 0x50	; 80
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8f 70       	andi	r24, 0x0F	; 15
    1268:	8c 93       	st	X, r24
	/* Set special function IO bits */
	SFIOR |= (4<<(uint8)Copy_xSrc);
    126a:	a0 e5       	ldi	r26, 0x50	; 80
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e0 e5       	ldi	r30, 0x50	; 80
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <ADC_xSetTriggerSrc+0x42>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <ADC_xSetTriggerSrc+0x3e>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24

	return E_OK;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <ADC_xReadUpperRegSynch>:

/* ***************************************************************************** */
Error_Status ADC_xReadUpperRegSynch(ADC_Ch_t Copy_xADC_Chx,uint8 *u8RecvData)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <ADC_xReadUpperRegSynch+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <ADC_xReadUpperRegSynch+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	7c 83       	std	Y+4, r23	; 0x04
    12b0:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status Local_xErrorStatus	=	E_NOK;
    12b2:	19 82       	std	Y+1, r1	; 0x01
	/* Select ADC channel */
	Local_xErrorStatus	=	ADC_xSelectChannel(Copy_xADC_Chx);
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	0e 94 3f 08 	call	0x107e	; 0x107e <ADC_xSelectChannel>
    12ba:	89 83       	std	Y+1, r24	; 0x01
	/* Enable ADC */
	ADC_xSetState(ADC_ENABLE);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ADC_xSetState>
	/* Start ADC conversion */
	ADC_START_CONVERSION();
    12c2:	a6 e2       	ldi	r26, 0x26	; 38
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e6 e2       	ldi	r30, 0x26	; 38
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 64       	ori	r24, 0x40	; 64
    12ce:	8c 93       	st	X, r24
	/* Check ADC flag */
	ADC_CHECK_FLAG();
    12d0:	e6 e2       	ldi	r30, 0x26	; 38
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	82 95       	swap	r24
    12d8:	8f 70       	andi	r24, 0x0F	; 15
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	90 70       	andi	r25, 0x00	; 0
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	a9 f3       	breq	.-22     	; 0x12d0 <ADC_xReadUpperRegSynch+0x30>
	/* Clear ADC flag */
	ADC_CLEAR_FALG();
    12e6:	a6 e2       	ldi	r26, 0x26	; 38
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e6 e2       	ldi	r30, 0x26	; 38
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 61       	ori	r24, 0x10	; 16
    12f2:	8c 93       	st	X, r24
	/* Assign ADC data */
	*u8RecvData = ADCH;
    12f4:	e5 e2       	ldi	r30, 0x25	; 37
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	eb 81       	ldd	r30, Y+3	; 0x03
    12fc:	fc 81       	ldd	r31, Y+4	; 0x04
    12fe:	80 83       	st	Z, r24
	/* Disable ADC */
	ADC_xSetState(ADC_DISABLE);
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ADC_xSetState>

	return Local_xErrorStatus;
    1306:	89 81       	ldd	r24, Y+1	; 0x01

}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <ADC_xReadSynch>:
/* ***************************************************************************** */
Error_Status ADC_xReadSynch(ADC_Ch_t Copy_xADC_Chx,uint16 *u16RecvData)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	29 97       	sbiw	r28, 0x09	; 9
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	8e 83       	std	Y+6, r24	; 0x06
    132c:	78 87       	std	Y+8, r23	; 0x08
    132e:	6f 83       	std	Y+7, r22	; 0x07
	uint32 Local_u32TimeOutCounter	=	0;
    1330:	1a 82       	std	Y+2, r1	; 0x02
    1332:	1b 82       	std	Y+3, r1	; 0x03
    1334:	1c 82       	std	Y+4, r1	; 0x04
    1336:	1d 82       	std	Y+5, r1	; 0x05
	Error_Status Local_xErrorStatus	=	E_NOK;
    1338:	19 82       	std	Y+1, r1	; 0x01
	/* Select ADC channel */
	Local_xErrorStatus	=	ADC_xSelectChannel(Copy_xADC_Chx);
    133a:	8e 81       	ldd	r24, Y+6	; 0x06
    133c:	0e 94 3f 08 	call	0x107e	; 0x107e <ADC_xSelectChannel>
    1340:	89 83       	std	Y+1, r24	; 0x01
	/* Enable ADC */
	//ADC_xSetState(ADC_ENABLE);
	/* Start ADC conversion */
	ADC_START_CONVERSION();
    1342:	a6 e2       	ldi	r26, 0x26	; 38
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e6 e2       	ldi	r30, 0x26	; 38
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 64       	ori	r24, 0x40	; 64
    134e:	8c 93       	st	X, r24
    1350:	1d c0       	rjmp	.+58     	; 0x138c <ADC_xReadSynch+0x76>

	/* Check ADC flag */
	while(GET_BIT(ADCSRA,ADSC) == E_NOK)
	{
		Local_u32TimeOutCounter++;
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	ac 81       	ldd	r26, Y+4	; 0x04
    1358:	bd 81       	ldd	r27, Y+5	; 0x05
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	a1 1d       	adc	r26, r1
    135e:	b1 1d       	adc	r27, r1
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	9b 83       	std	Y+3, r25	; 0x03
    1364:	ac 83       	std	Y+4, r26	; 0x04
    1366:	bd 83       	std	Y+5, r27	; 0x05
		if(ADC_TIME_OUT	==	Local_u32TimeOutCounter)
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	9b 81       	ldd	r25, Y+3	; 0x03
    136c:	ac 81       	ldd	r26, Y+4	; 0x04
    136e:	bd 81       	ldd	r27, Y+5	; 0x05
    1370:	80 31       	cpi	r24, 0x10	; 16
    1372:	27 e2       	ldi	r18, 0x27	; 39
    1374:	92 07       	cpc	r25, r18
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	a2 07       	cpc	r26, r18
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	b2 07       	cpc	r27, r18
    137e:	31 f4       	brne	.+12     	; 0x138c <ADC_xReadSynch+0x76>
		{
			*u16RecvData	=	0;
    1380:	ef 81       	ldd	r30, Y+7	; 0x07
    1382:	f8 85       	ldd	r31, Y+8	; 0x08
    1384:	11 82       	std	Z+1, r1	; 0x01
    1386:	10 82       	st	Z, r1
			return E_NOK;
    1388:	19 86       	std	Y+9, r1	; 0x09
    138a:	43 c0       	rjmp	.+134    	; 0x1412 <ADC_xReadSynch+0xfc>
	//ADC_xSetState(ADC_ENABLE);
	/* Start ADC conversion */
	ADC_START_CONVERSION();

	/* Check ADC flag */
	while(GET_BIT(ADCSRA,ADSC) == E_NOK)
    138c:	e6 e2       	ldi	r30, 0x26	; 38
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	82 95       	swap	r24
    1394:	86 95       	lsr	r24
    1396:	86 95       	lsr	r24
    1398:	83 70       	andi	r24, 0x03	; 3
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	81 70       	andi	r24, 0x01	; 1
    13a0:	90 70       	andi	r25, 0x00	; 0
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	b1 f2       	breq	.-84     	; 0x1352 <ADC_xReadSynch+0x3c>
			*u16RecvData	=	0;
			return E_NOK;
		}
	}
	/* Clear ADC flag */
	ADC_CLEAR_FALG();
    13a6:	a6 e2       	ldi	r26, 0x26	; 38
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e6 e2       	ldi	r30, 0x26	; 38
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	80 61       	ori	r24, 0x10	; 16
    13b2:	8c 93       	st	X, r24
	/* Assign ADC data */
	if(ADC_GET_CURRENT_ADJUST_STATE() == ADC_RIGHT_ADJUST)
    13b4:	80 91 86 04 	lds	r24, 0x0486
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	49 f4       	brne	.+18     	; 0x13ce <ADC_xReadSynch+0xb8>
	{
		*u16RecvData =	ADCBUF_REG;
    13bc:	e4 e2       	ldi	r30, 0x24	; 36
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	ef 81       	ldd	r30, Y+7	; 0x07
    13c6:	f8 85       	ldd	r31, Y+8	; 0x08
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
    13cc:	20 c0       	rjmp	.+64     	; 0x140e <ADC_xReadSynch+0xf8>
	}

	else if(ADC_GET_CURRENT_ADJUST_STATE() == ADC_LEFT_ADJUST)
    13ce:	80 91 86 04 	lds	r24, 0x0486
    13d2:	88 23       	and	r24, r24
    13d4:	d9 f4       	brne	.+54     	; 0x140c <ADC_xReadSynch+0xf6>
	{
		*u16RecvData =	(ADCL >> 6);
    13d6:	e4 e2       	ldi	r30, 0x24	; 36
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	82 95       	swap	r24
    13de:	86 95       	lsr	r24
    13e0:	86 95       	lsr	r24
    13e2:	83 70       	andi	r24, 0x03	; 3
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	ef 81       	ldd	r30, Y+7	; 0x07
    13ea:	f8 85       	ldd	r31, Y+8	; 0x08
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
		*u16RecvData =	(ADCH << 2);
    13f0:	e5 e2       	ldi	r30, 0x25	; 37
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	ef 81       	ldd	r30, Y+7	; 0x07
    1404:	f8 85       	ldd	r31, Y+8	; 0x08
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	01 c0       	rjmp	.+2      	; 0x140e <ADC_xReadSynch+0xf8>
	}
	else
	{
		Local_xErrorStatus	=	E_NOK;
    140c:	19 82       	std	Y+1, r1	; 0x01
	}

	/* Disable ADC */
	//ADC_xSetState(ADC_DISABLE);

	return Local_xErrorStatus;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	89 87       	std	Y+9, r24	; 0x09
    1412:	89 85       	ldd	r24, Y+9	; 0x09
}
    1414:	29 96       	adiw	r28, 0x09	; 9
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <ADC_xReadASynch>:

/* ***************************************************************************** */

Error_Status ADC_xReadASynch(ADC_Ch_t Copy_xADC_Chx,void (*pvCallBack)(uint16))
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <ADC_xReadASynch+0x6>
    142c:	00 d0       	rcall	.+0      	; 0x142e <ADC_xReadASynch+0x8>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	8a 83       	std	Y+2, r24	; 0x02
    1434:	7c 83       	std	Y+4, r23	; 0x04
    1436:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status Local_xErrorStaus	=	E_NOK;
    1438:	19 82       	std	Y+1, r1	; 0x01
	/* Assign callback function */
	ADC_vCallBack		=	pvCallBack;
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	90 93 88 04 	sts	0x0488, r25
    1442:	80 93 87 04 	sts	0x0487, r24
	/* Select ADC channel */
	Local_xErrorStaus	=	ADC_xSelectChannel(Copy_xADC_Chx);
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	0e 94 3f 08 	call	0x107e	; 0x107e <ADC_xSelectChannel>
    144c:	89 83       	std	Y+1, r24	; 0x01
	/* Enable ADC interrupt */
	Local_xErrorStaus	=	ADC_xSetIntState(ADC_ENABLE_INTERRUPT);
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	0e 94 96 08 	call	0x112c	; 0x112c <ADC_xSetIntState>
    1454:	89 83       	std	Y+1, r24	; 0x01
	/* Enable ADC */
	Local_xErrorStaus	=	ADC_xSetState(ADC_ENABLE);
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ADC_xSetState>
    145c:	89 83       	std	Y+1, r24	; 0x01
	/* Start ADC conversion */
	ADC_START_CONVERSION();
    145e:	a6 e2       	ldi	r26, 0x26	; 38
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e6 e2       	ldi	r30, 0x26	; 38
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	80 64       	ori	r24, 0x40	; 64
    146a:	8c 93       	st	X, r24

	return Local_xErrorStaus;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <__vector16>:

/* ***************************************************************************** */
void ADC_IRQ(void)
{
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <__vector16+0x28>
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	if(ADC_GET_CURRENT_ADJUST_STATE() == ADC_RIGHT_ADJUST)
    14a8:	80 91 86 04 	lds	r24, 0x0486
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	51 f4       	brne	.+20     	; 0x14c4 <__vector16+0x48>
	{
		ADC_vCallBack(ADCBUF_REG);
    14b0:	e0 91 87 04 	lds	r30, 0x0487
    14b4:	f0 91 88 04 	lds	r31, 0x0488
    14b8:	a4 e2       	ldi	r26, 0x24	; 36
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	8d 91       	ld	r24, X+
    14be:	9c 91       	ld	r25, X
    14c0:	09 95       	icall
    14c2:	23 c0       	rjmp	.+70     	; 0x150a <__vector16+0x8e>
	}
	else if(ADC_GET_CURRENT_ADJUST_STATE() == ADC_LEFT_ADJUST)
    14c4:	80 91 86 04 	lds	r24, 0x0486
    14c8:	88 23       	and	r24, r24
    14ca:	f9 f4       	brne	.+62     	; 0x150a <__vector16+0x8e>
	{
		uint16 Local_u16RecvData	=	0;
    14cc:	1a 82       	std	Y+2, r1	; 0x02
    14ce:	19 82       	std	Y+1, r1	; 0x01

		Local_u16RecvData =	(ADCL >> 6);
    14d0:	e4 e2       	ldi	r30, 0x24	; 36
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	82 95       	swap	r24
    14d8:	86 95       	lsr	r24
    14da:	86 95       	lsr	r24
    14dc:	83 70       	andi	r24, 0x03	; 3
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
		Local_u16RecvData =	(ADCH << 2);
    14e6:	e5 e2       	ldi	r30, 0x25	; 37
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01

		ADC_vCallBack(Local_u16RecvData);
    14fc:	e0 91 87 04 	lds	r30, 0x0487
    1500:	f0 91 88 04 	lds	r31, 0x0488
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	09 95       	icall
	}

	/* Start ADC conversion */
	ADC_START_CONVERSION();
    150a:	a6 e2       	ldi	r26, 0x26	; 38
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e6 e2       	ldi	r30, 0x26	; 38
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 64       	ori	r24, 0x40	; 64
    1516:	8c 93       	st	X, r24

	/* Clear ADC flag */
	ADC_CLEAR_FALG();
    1518:	a6 e2       	ldi	r26, 0x26	; 38
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e6 e2       	ldi	r30, 0x26	; 38
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 61       	ori	r24, 0x10	; 16
    1524:	8c 93       	st	X, r24
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	ff 91       	pop	r31
    1530:	ef 91       	pop	r30
    1532:	bf 91       	pop	r27
    1534:	af 91       	pop	r26
    1536:	9f 91       	pop	r25
    1538:	8f 91       	pop	r24
    153a:	7f 91       	pop	r23
    153c:	6f 91       	pop	r22
    153e:	5f 91       	pop	r21
    1540:	4f 91       	pop	r20
    1542:	3f 91       	pop	r19
    1544:	2f 91       	pop	r18
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	0f 90       	pop	r0
    154c:	1f 90       	pop	r1
    154e:	18 95       	reti

00001550 <Alarm_xInit>:

#include "Alarm_interface.h"
#include "Alarm_config.h"

Error_Status Alarm_xInit(Alarm_t Alarm, Alarm_State_t state)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <Alarm_xInit+0x6>
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	6a 83       	std	Y+2, r22	; 0x02
	/* Configure Alarm pins as output */
	switch (Alarm)
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	41 f4       	brne	.+16     	; 0x157a <Alarm_xInit+0x2a>
	{
	case ALARM_1:
		GPIO_vInitPortPin(ALARM_1_PORT_DR, ALARM_1_PIN, GPIO_OUT);
    156a:	81 e4       	ldi	r24, 0x41	; 65
    156c:	66 e0       	ldi	r22, 0x06	; 6
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_vInitPortPin>
	default:
		/* No Thing */
		return E_NOK;
		break;
	}
	return E_OK;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	8b 83       	std	Y+3, r24	; 0x03
    1578:	01 c0       	rjmp	.+2      	; 0x157c <Alarm_xInit+0x2c>
		GPIO_vInitPortPin(ALARM_1_PORT_DR, ALARM_1_PIN, GPIO_OUT);
		break;

	default:
		/* No Thing */
		return E_NOK;
    157a:	1b 82       	std	Y+3, r1	; 0x03
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
	return E_OK;
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <Alarm_vToggle>:

void Alarm_vToggle(Alarm_t Alarm)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	0f 92       	push	r0
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	89 83       	std	Y+1, r24	; 0x01
	/* Toggle Alarm */
	if (Alarm_xGetState(Alarm) == ALARM_ON)
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <Alarm_xGetState>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	29 f4       	brne	.+10     	; 0x15aa <Alarm_vToggle+0x20>
	{
		Alarm_xSetState(Alarm, ALARM_OFF);
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Alarm_xSetState>
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <Alarm_vToggle+0x28>
	} else
	{
		Alarm_xSetState(Alarm, ALARM_ON);
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Alarm_xSetState>
	}
}
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <Alarm_xSetState>:

Error_Status Alarm_xSetState(Alarm_t Alarm, Alarm_State_t state)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <Alarm_xSetState+0x6>
    15c0:	0f 92       	push	r0
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	6a 83       	std	Y+2, r22	; 0x02
	/* Set led state */
	switch (Alarm)
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	41 f4       	brne	.+16     	; 0x15e4 <Alarm_xSetState+0x2a>
	{
	case ALARM_1:
		GPIO_vWritePortPin(ALARM_1_PORT_CR, ALARM_1_PIN, state);
    15d4:	81 e4       	ldi	r24, 0x41	; 65
    15d6:	66 e0       	ldi	r22, 0x06	; 6
    15d8:	4a 81       	ldd	r20, Y+2	; 0x02
    15da:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_vWritePortPin>
	default:
		/* No Thing */
		return E_NOK;
		break;
	}
	return E_OK;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	8b 83       	std	Y+3, r24	; 0x03
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <Alarm_xSetState+0x2c>
	case ALARM_1:
		GPIO_vWritePortPin(ALARM_1_PORT_CR, ALARM_1_PIN, state);
		break;
	default:
		/* No Thing */
		return E_NOK;
    15e4:	1b 82       	std	Y+3, r1	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
	return E_OK;
}
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <Alarm_xGetState>:

Alarm_State_t Alarm_xGetState(Alarm_t Alarm)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <Alarm_xGetState+0x6>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
	Alarm_State_t ret = ALARM_OFF;
    1600:	19 82       	std	Y+1, r1	; 0x01

	/* Set Alarm state */
	switch (Alarm)
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	29 f4       	brne	.+10     	; 0x1616 <Alarm_xGetState+0x22>
	{
	case ALARM_1:
		ret = GPIO_xReadPortPin(ALARM_1_PORT_CR, ALARM_1_PIN);
    160c:	81 e4       	ldi	r24, 0x41	; 65
    160e:	66 e0       	ldi	r22, 0x06	; 6
    1610:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_xReadPortPin>
    1614:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		/* No Thing */
		break;
	}
	return ret;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <Display_vPrint>:

#include "Display_interface.h"

#define DISPLAY_MSG_MAX									80
void Display_vPrint(uint8 *Copy_u8String, ...)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	c6 55       	subi	r28, 0x56	; 86
    162c:	d0 40       	sbci	r29, 0x00	; 0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
	uint8 ActDataMsg[DISPLAY_MSG_MAX]	=	{0};
    1638:	80 e5       	ldi	r24, 0x50	; 80
    163a:	fe 01       	movw	r30, r28
    163c:	35 96       	adiw	r30, 0x05	; 5
    163e:	df 01       	movw	r26, r30
    1640:	98 2f       	mov	r25, r24
    1642:	1d 92       	st	X+, r1
    1644:	9a 95       	dec	r25
    1646:	e9 f7       	brne	.-6      	; 0x1642 <Display_vPrint+0x20>
	uint16 Length = 0;
    1648:	1c 82       	std	Y+4, r1	; 0x04
    164a:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u16Index = 0;
    164c:	1a 82       	std	Y+2, r1	; 0x02
    164e:	19 82       	std	Y+1, r1	; 0x01
	va_list args;
	va_start(args,Copy_u8String);
    1650:	ce 01       	movw	r24, r28
    1652:	83 5a       	subi	r24, 0xA3	; 163
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	fe 01       	movw	r30, r28
    1658:	eb 5a       	subi	r30, 0xAB	; 171
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
	vsprintf(ActDataMsg,Copy_u8String,args);
    1660:	fe 01       	movw	r30, r28
    1662:	eb 5a       	subi	r30, 0xAB	; 171
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	40 81       	ld	r20, Z
    1668:	51 81       	ldd	r21, Z+1	; 0x01
    166a:	ce 01       	movw	r24, r28
    166c:	05 96       	adiw	r24, 0x05	; 5
    166e:	6d 96       	adiw	r28, 0x1d	; 29
    1670:	2e ad       	ldd	r18, Y+62	; 0x3e
    1672:	3f ad       	ldd	r19, Y+63	; 0x3f
    1674:	6d 97       	sbiw	r28, 0x1d	; 29
    1676:	b9 01       	movw	r22, r18
    1678:	0e 94 bb 22 	call	0x4576	; 0x4576 <vsprintf>

	Length = strlen(ActDataMsg);
    167c:	ce 01       	movw	r24, r28
    167e:	05 96       	adiw	r24, 0x05	; 5
    1680:	0e 94 b2 22 	call	0x4564	; 0x4564 <strlen>
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	8b 83       	std	Y+3, r24	; 0x03

	for(Local_u16Index = 0; Local_u16Index < Length;Local_u16Index++)
    1688:	1a 82       	std	Y+2, r1	; 0x02
    168a:	19 82       	std	Y+1, r1	; 0x01
    168c:	11 c0       	rjmp	.+34     	; 0x16b0 <Display_vPrint+0x8e>
	{
		USART_xSendByte(USART1,ActDataMsg[Local_u16Index]);
    168e:	29 81       	ldd	r18, Y+1	; 0x01
    1690:	3a 81       	ldd	r19, Y+2	; 0x02
    1692:	ce 01       	movw	r24, r28
    1694:	05 96       	adiw	r24, 0x05	; 5
    1696:	fc 01       	movw	r30, r24
    1698:	e2 0f       	add	r30, r18
    169a:	f3 1f       	adc	r31, r19
    169c:	90 81       	ld	r25, Z
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	69 2f       	mov	r22, r25
    16a2:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <USART_xSendByte>
	va_start(args,Copy_u8String);
	vsprintf(ActDataMsg,Copy_u8String,args);

	Length = strlen(ActDataMsg);

	for(Local_u16Index = 0; Local_u16Index < Length;Local_u16Index++)
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	29 81       	ldd	r18, Y+1	; 0x01
    16b2:	3a 81       	ldd	r19, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	28 17       	cp	r18, r24
    16ba:	39 07       	cpc	r19, r25
    16bc:	40 f3       	brcs	.-48     	; 0x168e <Display_vPrint+0x6c>
	{
		USART_xSendByte(USART1,ActDataMsg[Local_u16Index]);
	}

	va_end(args);
}
    16be:	ca 5a       	subi	r28, 0xAA	; 170
    16c0:	df 4f       	sbci	r29, 0xFF	; 255
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <Display_vRecieveString>:


void Display_vRecieveString(uint8 *Copy_u8String)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <Display_vRecieveString+0x6>
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
	USART_xRecieveString(USART1,Copy_u8String);
    16e0:	29 81       	ldd	r18, Y+1	; 0x01
    16e2:	3a 81       	ldd	r19, Y+2	; 0x02
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	b9 01       	movw	r22, r18
    16e8:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <USART_xRecieveString>
}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <Display_vRecvChar>:

void Display_vRecvChar(uint8 *Copy_u8Char)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <Display_vRecvChar+0x6>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
	USART_xRecieveByte(USART1,Copy_u8Char);
    1704:	29 81       	ldd	r18, Y+1	; 0x01
    1706:	3a 81       	ldd	r19, Y+2	; 0x02
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	b9 01       	movw	r22, r18
    170c:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <USART_xRecieveByte>
}
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <ErrorM_vReport>:
#include "ErrorM_interface.h"

/* ***************************************************************************** */

void ErrorM_vReport( uint16 u16ModuleId,uint8 u8InstanceId,uint8 u8ApiId,uint8 u8ErrorId)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <ErrorM_vReport+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <ErrorM_vReport+0x8>
    1722:	0f 92       	push	r0
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	9a 83       	std	Y+2, r25	; 0x02
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	6b 83       	std	Y+3, r22	; 0x03
    172e:	4c 83       	std	Y+4, r20	; 0x04
    1730:	2d 83       	std	Y+5, r18	; 0x05
		/* Halt the program */
		/* Print Error message */
	}

#endif
}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <GPIO_vInit>:
#include "GPIO_interface.h"

/* ***************************************************************************** */

void GPIO_vInit(GPIO_ConfigType *xpGIPO_Config)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <GPIO_vInit+0x6>
    1748:	00 d0       	rcall	.+0      	; 0x174a <GPIO_vInit+0x8>
    174a:	0f 92       	push	r0
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	9b 83       	std	Y+3, r25	; 0x03
    1752:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8PinsIndex	=	0;
    1754:	19 82       	std	Y+1, r1	; 0x01

	for(Local_u8PinsIndex = 0;NULL != xpGIPO_Config; Local_u8PinsIndex++)
    1756:	19 82       	std	Y+1, r1	; 0x01
    1758:	8a c1       	rjmp	.+788    	; 0x1a6e <GPIO_vInit+0x32c>

		/*
		 * Check which port is needed and set the pin if the mode is GPIO_OUT
		 * and clear the pin if the mode is GPIO_IN
		 *                                                                     */
		switch(xpGIPO_Config->Pins[Local_u8PinsIndex].xPort)
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4a 81       	ldd	r20, Y+2	; 0x02
    1762:	5b 81       	ldd	r21, Y+3	; 0x03
    1764:	c9 01       	movw	r24, r18
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	82 0f       	add	r24, r18
    176c:	93 1f       	adc	r25, r19
    176e:	fa 01       	movw	r30, r20
    1770:	e8 0f       	add	r30, r24
    1772:	f9 1f       	adc	r31, r25
    1774:	80 81       	ld	r24, Z
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	3d 83       	std	Y+5, r19	; 0x05
    177c:	2c 83       	std	Y+4, r18	; 0x04
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	82 34       	cpi	r24, 0x42	; 66
    1784:	91 05       	cpc	r25, r1
    1786:	09 f4       	brne	.+2      	; 0x178a <GPIO_vInit+0x48>
    1788:	6e c0       	rjmp	.+220    	; 0x1866 <GPIO_vInit+0x124>
    178a:	2c 81       	ldd	r18, Y+4	; 0x04
    178c:	3d 81       	ldd	r19, Y+5	; 0x05
    178e:	23 34       	cpi	r18, 0x43	; 67
    1790:	31 05       	cpc	r19, r1
    1792:	34 f4       	brge	.+12     	; 0x17a0 <GPIO_vInit+0x5e>
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	81 34       	cpi	r24, 0x41	; 65
    179a:	91 05       	cpc	r25, r1
    179c:	71 f0       	breq	.+28     	; 0x17ba <GPIO_vInit+0x78>
    179e:	64 c1       	rjmp	.+712    	; 0x1a68 <GPIO_vInit+0x326>
    17a0:	2c 81       	ldd	r18, Y+4	; 0x04
    17a2:	3d 81       	ldd	r19, Y+5	; 0x05
    17a4:	23 34       	cpi	r18, 0x43	; 67
    17a6:	31 05       	cpc	r19, r1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <GPIO_vInit+0x6a>
    17aa:	b3 c0       	rjmp	.+358    	; 0x1912 <GPIO_vInit+0x1d0>
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	84 34       	cpi	r24, 0x44	; 68
    17b2:	91 05       	cpc	r25, r1
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <GPIO_vInit+0x76>
    17b6:	03 c1       	rjmp	.+518    	; 0x19be <GPIO_vInit+0x27c>
    17b8:	57 c1       	rjmp	.+686    	; 0x1a68 <GPIO_vInit+0x326>
		{
		case GPIOA:
			if (GPIO_OUT == (xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Mode)) {
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a 81       	ldd	r20, Y+2	; 0x02
    17c2:	5b 81       	ldd	r21, Y+3	; 0x03
    17c4:	c9 01       	movw	r24, r18
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	82 0f       	add	r24, r18
    17cc:	93 1f       	adc	r25, r19
    17ce:	84 0f       	add	r24, r20
    17d0:	95 1f       	adc	r25, r21
    17d2:	fc 01       	movw	r30, r24
    17d4:	32 96       	adiw	r30, 0x02	; 2
    17d6:	80 81       	ld	r24, Z
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	11 f5       	brne	.+68     	; 0x1820 <GPIO_vInit+0xde>
				SET_BIT(DDRA,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    17dc:	aa e3       	ldi	r26, 0x3A	; 58
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ea e3       	ldi	r30, 0x3A	; 58
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	68 2f       	mov	r22, r24
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	4a 81       	ldd	r20, Y+2	; 0x02
    17f0:	5b 81       	ldd	r21, Y+3	; 0x03
    17f2:	c9 01       	movw	r24, r18
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	82 0f       	add	r24, r18
    17fa:	93 1f       	adc	r25, r19
    17fc:	84 0f       	add	r24, r20
    17fe:	95 1f       	adc	r25, r21
    1800:	fc 01       	movw	r30, r24
    1802:	31 96       	adiw	r30, 0x01	; 1
    1804:	80 81       	ld	r24, Z
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <GPIO_vInit+0xd4>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <GPIO_vInit+0xd0>
    181a:	86 2b       	or	r24, r22
    181c:	8c 93       	st	X, r24
    181e:	24 c1       	rjmp	.+584    	; 0x1a68 <GPIO_vInit+0x326>
			}
			else {
				CLEAR_BIT(DDRA,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    1820:	aa e3       	ldi	r26, 0x3A	; 58
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	ea e3       	ldi	r30, 0x3A	; 58
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	68 2f       	mov	r22, r24
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a 81       	ldd	r20, Y+2	; 0x02
    1834:	5b 81       	ldd	r21, Y+3	; 0x03
    1836:	c9 01       	movw	r24, r18
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	82 0f       	add	r24, r18
    183e:	93 1f       	adc	r25, r19
    1840:	84 0f       	add	r24, r20
    1842:	95 1f       	adc	r25, r21
    1844:	fc 01       	movw	r30, r24
    1846:	31 96       	adiw	r30, 0x01	; 1
    1848:	80 81       	ld	r24, Z
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 2e       	mov	r0, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <GPIO_vInit+0x118>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <GPIO_vInit+0x114>
    185e:	80 95       	com	r24
    1860:	86 23       	and	r24, r22
    1862:	8c 93       	st	X, r24
    1864:	01 c1       	rjmp	.+514    	; 0x1a68 <GPIO_vInit+0x326>
			}
			break;
		case GPIOB:
			if (GPIO_OUT == (xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Mode)) {
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a 81       	ldd	r20, Y+2	; 0x02
    186e:	5b 81       	ldd	r21, Y+3	; 0x03
    1870:	c9 01       	movw	r24, r18
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	82 0f       	add	r24, r18
    1878:	93 1f       	adc	r25, r19
    187a:	84 0f       	add	r24, r20
    187c:	95 1f       	adc	r25, r21
    187e:	fc 01       	movw	r30, r24
    1880:	32 96       	adiw	r30, 0x02	; 2
    1882:	80 81       	ld	r24, Z
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	11 f5       	brne	.+68     	; 0x18cc <GPIO_vInit+0x18a>
				SET_BIT(DDRB,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    1888:	a7 e3       	ldi	r26, 0x37	; 55
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e7 e3       	ldi	r30, 0x37	; 55
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	68 2f       	mov	r22, r24
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a 81       	ldd	r20, Y+2	; 0x02
    189c:	5b 81       	ldd	r21, Y+3	; 0x03
    189e:	c9 01       	movw	r24, r18
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	82 0f       	add	r24, r18
    18a6:	93 1f       	adc	r25, r19
    18a8:	84 0f       	add	r24, r20
    18aa:	95 1f       	adc	r25, r21
    18ac:	fc 01       	movw	r30, r24
    18ae:	31 96       	adiw	r30, 0x01	; 1
    18b0:	80 81       	ld	r24, Z
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <GPIO_vInit+0x180>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <GPIO_vInit+0x17c>
    18c6:	86 2b       	or	r24, r22
    18c8:	8c 93       	st	X, r24
    18ca:	ce c0       	rjmp	.+412    	; 0x1a68 <GPIO_vInit+0x326>
			}
			else {
				CLEAR_BIT(DDRB,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    18cc:	a7 e3       	ldi	r26, 0x37	; 55
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e7 e3       	ldi	r30, 0x37	; 55
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	68 2f       	mov	r22, r24
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a 81       	ldd	r20, Y+2	; 0x02
    18e0:	5b 81       	ldd	r21, Y+3	; 0x03
    18e2:	c9 01       	movw	r24, r18
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	82 0f       	add	r24, r18
    18ea:	93 1f       	adc	r25, r19
    18ec:	84 0f       	add	r24, r20
    18ee:	95 1f       	adc	r25, r21
    18f0:	fc 01       	movw	r30, r24
    18f2:	31 96       	adiw	r30, 0x01	; 1
    18f4:	80 81       	ld	r24, Z
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <GPIO_vInit+0x1c4>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <GPIO_vInit+0x1c0>
    190a:	80 95       	com	r24
    190c:	86 23       	and	r24, r22
    190e:	8c 93       	st	X, r24
    1910:	ab c0       	rjmp	.+342    	; 0x1a68 <GPIO_vInit+0x326>
			}
			break;
		case GPIOC:
			if (GPIO_OUT == (xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Mode)) {
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a 81       	ldd	r20, Y+2	; 0x02
    191a:	5b 81       	ldd	r21, Y+3	; 0x03
    191c:	c9 01       	movw	r24, r18
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	82 0f       	add	r24, r18
    1924:	93 1f       	adc	r25, r19
    1926:	84 0f       	add	r24, r20
    1928:	95 1f       	adc	r25, r21
    192a:	fc 01       	movw	r30, r24
    192c:	32 96       	adiw	r30, 0x02	; 2
    192e:	80 81       	ld	r24, Z
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	11 f5       	brne	.+68     	; 0x1978 <GPIO_vInit+0x236>
				SET_BIT(DDRC,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    1934:	a4 e3       	ldi	r26, 0x34	; 52
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e4 e3       	ldi	r30, 0x34	; 52
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	68 2f       	mov	r22, r24
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	4a 81       	ldd	r20, Y+2	; 0x02
    1948:	5b 81       	ldd	r21, Y+3	; 0x03
    194a:	c9 01       	movw	r24, r18
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	82 0f       	add	r24, r18
    1952:	93 1f       	adc	r25, r19
    1954:	84 0f       	add	r24, r20
    1956:	95 1f       	adc	r25, r21
    1958:	fc 01       	movw	r30, r24
    195a:	31 96       	adiw	r30, 0x01	; 1
    195c:	80 81       	ld	r24, Z
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <GPIO_vInit+0x22c>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <GPIO_vInit+0x228>
    1972:	86 2b       	or	r24, r22
    1974:	8c 93       	st	X, r24
    1976:	78 c0       	rjmp	.+240    	; 0x1a68 <GPIO_vInit+0x326>
			}
			else {
				CLEAR_BIT(DDRC,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    1978:	a4 e3       	ldi	r26, 0x34	; 52
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e4 e3       	ldi	r30, 0x34	; 52
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	68 2f       	mov	r22, r24
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a 81       	ldd	r20, Y+2	; 0x02
    198c:	5b 81       	ldd	r21, Y+3	; 0x03
    198e:	c9 01       	movw	r24, r18
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	82 0f       	add	r24, r18
    1996:	93 1f       	adc	r25, r19
    1998:	84 0f       	add	r24, r20
    199a:	95 1f       	adc	r25, r21
    199c:	fc 01       	movw	r30, r24
    199e:	31 96       	adiw	r30, 0x01	; 1
    19a0:	80 81       	ld	r24, Z
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <GPIO_vInit+0x270>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <GPIO_vInit+0x26c>
    19b6:	80 95       	com	r24
    19b8:	86 23       	and	r24, r22
    19ba:	8c 93       	st	X, r24
    19bc:	55 c0       	rjmp	.+170    	; 0x1a68 <GPIO_vInit+0x326>
			}
			break;
		case GPIOD:
			if (GPIO_OUT == (xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Mode)) {
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	4a 81       	ldd	r20, Y+2	; 0x02
    19c6:	5b 81       	ldd	r21, Y+3	; 0x03
    19c8:	c9 01       	movw	r24, r18
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	82 0f       	add	r24, r18
    19d0:	93 1f       	adc	r25, r19
    19d2:	84 0f       	add	r24, r20
    19d4:	95 1f       	adc	r25, r21
    19d6:	fc 01       	movw	r30, r24
    19d8:	32 96       	adiw	r30, 0x02	; 2
    19da:	80 81       	ld	r24, Z
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	11 f5       	brne	.+68     	; 0x1a24 <GPIO_vInit+0x2e2>
				SET_BIT(DDRD,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    19e0:	a1 e3       	ldi	r26, 0x31	; 49
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e1 e3       	ldi	r30, 0x31	; 49
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	68 2f       	mov	r22, r24
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a 81       	ldd	r20, Y+2	; 0x02
    19f4:	5b 81       	ldd	r21, Y+3	; 0x03
    19f6:	c9 01       	movw	r24, r18
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	82 0f       	add	r24, r18
    19fe:	93 1f       	adc	r25, r19
    1a00:	84 0f       	add	r24, r20
    1a02:	95 1f       	adc	r25, r21
    1a04:	fc 01       	movw	r30, r24
    1a06:	31 96       	adiw	r30, 0x01	; 1
    1a08:	80 81       	ld	r24, Z
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <GPIO_vInit+0x2d8>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <GPIO_vInit+0x2d4>
    1a1e:	86 2b       	or	r24, r22
    1a20:	8c 93       	st	X, r24
    1a22:	22 c0       	rjmp	.+68     	; 0x1a68 <GPIO_vInit+0x326>
			}
			else {
				CLEAR_BIT(DDRD,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    1a24:	a1 e3       	ldi	r26, 0x31	; 49
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e1 e3       	ldi	r30, 0x31	; 49
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	68 2f       	mov	r22, r24
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a 81       	ldd	r20, Y+2	; 0x02
    1a38:	5b 81       	ldd	r21, Y+3	; 0x03
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	82 0f       	add	r24, r18
    1a42:	93 1f       	adc	r25, r19
    1a44:	84 0f       	add	r24, r20
    1a46:	95 1f       	adc	r25, r21
    1a48:	fc 01       	movw	r30, r24
    1a4a:	31 96       	adiw	r30, 0x01	; 1
    1a4c:	80 81       	ld	r24, Z
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <GPIO_vInit+0x31c>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <GPIO_vInit+0x318>
    1a62:	80 95       	com	r24
    1a64:	86 23       	and	r24, r22
    1a66:	8c 93       	st	X, r24

void GPIO_vInit(GPIO_ConfigType *xpGIPO_Config)
{
	uint8 Local_u8PinsIndex	=	0;

	for(Local_u8PinsIndex = 0;NULL != xpGIPO_Config; Local_u8PinsIndex++)
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	9b 81       	ldd	r25, Y+3	; 0x03
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <GPIO_vInit+0x336>
    1a76:	71 ce       	rjmp	.-798    	; 0x175a <GPIO_vInit+0x18>
		default:
			break;

		}
	}
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <GPIO_vInitPortPin>:

/* ***************************************************************************** */

void GPIO_vInitPortPin(GPIO_Port_t Copy_xGPIOx,GPIO_Pin_t Copy_xPinx ,GPIO_PinMode_t Copy_xMode)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <GPIO_vInitPortPin+0x6>
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <GPIO_vInitPortPin+0x8>
    1a90:	0f 92       	push	r0
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	6a 83       	std	Y+2, r22	; 0x02
    1a9a:	4b 83       	std	Y+3, r20	; 0x03
#endif
	/*
	 * Check which port is needed and set the pin if the mode is GPIO_OUT
	 * and clear the pin if the mode is GPIO_IN
	 *                                                                     */
	switch(Copy_xGPIOx) {
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	3d 83       	std	Y+5, r19	; 0x05
    1aa4:	2c 83       	std	Y+4, r18	; 0x04
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aaa:	82 34       	cpi	r24, 0x42	; 66
    1aac:	91 05       	cpc	r25, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <GPIO_vInitPortPin+0x2a>
    1ab0:	44 c0       	rjmp	.+136    	; 0x1b3a <GPIO_vInitPortPin+0xb2>
    1ab2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab6:	23 34       	cpi	r18, 0x43	; 67
    1ab8:	31 05       	cpc	r19, r1
    1aba:	34 f4       	brge	.+12     	; 0x1ac8 <GPIO_vInitPortPin+0x40>
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac0:	81 34       	cpi	r24, 0x41	; 65
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	71 f0       	breq	.+28     	; 0x1ae2 <GPIO_vInitPortPin+0x5a>
    1ac6:	bc c0       	rjmp	.+376    	; 0x1c40 <GPIO_vInitPortPin+0x1b8>
    1ac8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aca:	3d 81       	ldd	r19, Y+5	; 0x05
    1acc:	23 34       	cpi	r18, 0x43	; 67
    1ace:	31 05       	cpc	r19, r1
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <GPIO_vInitPortPin+0x4c>
    1ad2:	5f c0       	rjmp	.+190    	; 0x1b92 <GPIO_vInitPortPin+0x10a>
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	84 34       	cpi	r24, 0x44	; 68
    1ada:	91 05       	cpc	r25, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <GPIO_vInitPortPin+0x58>
    1ade:	85 c0       	rjmp	.+266    	; 0x1bea <GPIO_vInitPortPin+0x162>
    1ae0:	af c0       	rjmp	.+350    	; 0x1c40 <GPIO_vInitPortPin+0x1b8>
	case GPIOA:
		if (Copy_xMode == GPIO_OUT) {
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	a1 f4       	brne	.+40     	; 0x1b10 <GPIO_vInitPortPin+0x88>
			SET_BIT(DDRA,Copy_xPinx);
    1ae8:	aa e3       	ldi	r26, 0x3A	; 58
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e3       	ldi	r30, 0x3A	; 58
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <GPIO_vInitPortPin+0x7e>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <GPIO_vInitPortPin+0x7a>
    1b0a:	84 2b       	or	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	98 c0       	rjmp	.+304    	; 0x1c40 <GPIO_vInitPortPin+0x1b8>
		}
		else {
			CLEAR_BIT(DDRA,Copy_xPinx);
    1b10:	aa e3       	ldi	r26, 0x3A	; 58
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	ea e3       	ldi	r30, 0x3A	; 58
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <GPIO_vInitPortPin+0xa6>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <GPIO_vInitPortPin+0xa2>
    1b32:	80 95       	com	r24
    1b34:	84 23       	and	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	83 c0       	rjmp	.+262    	; 0x1c40 <GPIO_vInitPortPin+0x1b8>
		}
		break;
	case GPIOB:
		if (Copy_xMode == GPIO_OUT) {
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	a1 f4       	brne	.+40     	; 0x1b68 <GPIO_vInitPortPin+0xe0>
			SET_BIT(DDRB,Copy_xPinx);
    1b40:	a7 e3       	ldi	r26, 0x37	; 55
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e7 e3       	ldi	r30, 0x37	; 55
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <GPIO_vInitPortPin+0xd6>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <GPIO_vInitPortPin+0xd2>
    1b62:	84 2b       	or	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	6c c0       	rjmp	.+216    	; 0x1c40 <GPIO_vInitPortPin+0x1b8>
		}
		else {
			CLEAR_BIT(DDRB,Copy_xPinx);
    1b68:	a7 e3       	ldi	r26, 0x37	; 55
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e7 e3       	ldi	r30, 0x37	; 55
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <GPIO_vInitPortPin+0xfe>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <GPIO_vInitPortPin+0xfa>
    1b8a:	80 95       	com	r24
    1b8c:	84 23       	and	r24, r20
    1b8e:	8c 93       	st	X, r24
    1b90:	57 c0       	rjmp	.+174    	; 0x1c40 <GPIO_vInitPortPin+0x1b8>
		}
		break;
	case GPIOC:
		if (Copy_xMode == GPIO_OUT) {
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	a1 f4       	brne	.+40     	; 0x1bc0 <GPIO_vInitPortPin+0x138>
			SET_BIT(DDRC,Copy_xPinx);
    1b98:	a4 e3       	ldi	r26, 0x34	; 52
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e4 e3       	ldi	r30, 0x34	; 52
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	48 2f       	mov	r20, r24
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	02 2e       	mov	r0, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <GPIO_vInitPortPin+0x12e>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	0a 94       	dec	r0
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <GPIO_vInitPortPin+0x12a>
    1bba:	84 2b       	or	r24, r20
    1bbc:	8c 93       	st	X, r24
    1bbe:	40 c0       	rjmp	.+128    	; 0x1c40 <GPIO_vInitPortPin+0x1b8>
		}
		else {
			CLEAR_BIT(DDRC,Copy_xPinx);
    1bc0:	a4 e3       	ldi	r26, 0x34	; 52
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e4 e3       	ldi	r30, 0x34	; 52
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <GPIO_vInitPortPin+0x156>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <GPIO_vInitPortPin+0x152>
    1be2:	80 95       	com	r24
    1be4:	84 23       	and	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	2b c0       	rjmp	.+86     	; 0x1c40 <GPIO_vInitPortPin+0x1b8>
		}
		break;
	case GPIOD:
		if (Copy_xMode == GPIO_OUT) {
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	a1 f4       	brne	.+40     	; 0x1c18 <GPIO_vInitPortPin+0x190>
			SET_BIT(DDRD,Copy_xPinx);
    1bf0:	a1 e3       	ldi	r26, 0x31	; 49
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e1 e3       	ldi	r30, 0x31	; 49
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <GPIO_vInitPortPin+0x186>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <GPIO_vInitPortPin+0x182>
    1c12:	84 2b       	or	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <GPIO_vInitPortPin+0x1b8>
		}
		else {
			CLEAR_BIT(DDRD,Copy_xPinx);
    1c18:	a1 e3       	ldi	r26, 0x31	; 49
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e1 e3       	ldi	r30, 0x31	; 49
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <GPIO_vInitPortPin+0x1ae>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <GPIO_vInitPortPin+0x1aa>
    1c3a:	80 95       	com	r24
    1c3c:	84 23       	and	r24, r20
    1c3e:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <GPIO_vWritePortPin>:

/* ***************************************************************************** */

void GPIO_vWritePortPin(GPIO_Port_t Copy_xGPIOx ,GPIO_Pin_t Copy_xPinx ,GPIO_PinState_t Copy_xVal)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GPIO_vWritePortPin+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <GPIO_vWritePortPin+0x8>
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	6a 83       	std	Y+2, r22	; 0x02
    1c62:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 * Check which port is needed and set the pin if the mode is GPIO_HIGH
	 * and clear the pin if the mode is GPIO_LOW
	 *                                                                     */
	switch(Copy_xGPIOx) {
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3d 83       	std	Y+5, r19	; 0x05
    1c6c:	2c 83       	std	Y+4, r18	; 0x04
    1c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c70:	9d 81       	ldd	r25, Y+5	; 0x05
    1c72:	82 34       	cpi	r24, 0x42	; 66
    1c74:	91 05       	cpc	r25, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <GPIO_vWritePortPin+0x2a>
    1c78:	44 c0       	rjmp	.+136    	; 0x1d02 <GPIO_vWritePortPin+0xb2>
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	23 34       	cpi	r18, 0x43	; 67
    1c80:	31 05       	cpc	r19, r1
    1c82:	34 f4       	brge	.+12     	; 0x1c90 <GPIO_vWritePortPin+0x40>
    1c84:	8c 81       	ldd	r24, Y+4	; 0x04
    1c86:	9d 81       	ldd	r25, Y+5	; 0x05
    1c88:	81 34       	cpi	r24, 0x41	; 65
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	71 f0       	breq	.+28     	; 0x1caa <GPIO_vWritePortPin+0x5a>
    1c8e:	bc c0       	rjmp	.+376    	; 0x1e08 <GPIO_vWritePortPin+0x1b8>
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	23 34       	cpi	r18, 0x43	; 67
    1c96:	31 05       	cpc	r19, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <GPIO_vWritePortPin+0x4c>
    1c9a:	5f c0       	rjmp	.+190    	; 0x1d5a <GPIO_vWritePortPin+0x10a>
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	84 34       	cpi	r24, 0x44	; 68
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <GPIO_vWritePortPin+0x58>
    1ca6:	85 c0       	rjmp	.+266    	; 0x1db2 <GPIO_vWritePortPin+0x162>
    1ca8:	af c0       	rjmp	.+350    	; 0x1e08 <GPIO_vWritePortPin+0x1b8>
	case GPIOA:
		if (Copy_xVal == GPIO_HIGH) {
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	a1 f4       	brne	.+40     	; 0x1cd8 <GPIO_vWritePortPin+0x88>
			SET_BIT(PORTA,Copy_xPinx);
    1cb0:	ab e3       	ldi	r26, 0x3B	; 59
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	eb e3       	ldi	r30, 0x3B	; 59
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <GPIO_vWritePortPin+0x7e>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <GPIO_vWritePortPin+0x7a>
    1cd2:	84 2b       	or	r24, r20
    1cd4:	8c 93       	st	X, r24
    1cd6:	98 c0       	rjmp	.+304    	; 0x1e08 <GPIO_vWritePortPin+0x1b8>
		}
		else {
			CLEAR_BIT(PORTA,Copy_xPinx);
    1cd8:	ab e3       	ldi	r26, 0x3B	; 59
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	eb e3       	ldi	r30, 0x3B	; 59
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <GPIO_vWritePortPin+0xa6>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <GPIO_vWritePortPin+0xa2>
    1cfa:	80 95       	com	r24
    1cfc:	84 23       	and	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	83 c0       	rjmp	.+262    	; 0x1e08 <GPIO_vWritePortPin+0x1b8>
		}
		break;
	case GPIOB:
		if (Copy_xVal == GPIO_HIGH) {
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	a1 f4       	brne	.+40     	; 0x1d30 <GPIO_vWritePortPin+0xe0>
			SET_BIT(PORTB,Copy_xPinx);
    1d08:	a8 e3       	ldi	r26, 0x38	; 56
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e8 e3       	ldi	r30, 0x38	; 56
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <GPIO_vWritePortPin+0xd6>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <GPIO_vWritePortPin+0xd2>
    1d2a:	84 2b       	or	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	6c c0       	rjmp	.+216    	; 0x1e08 <GPIO_vWritePortPin+0x1b8>
		}
		else {
			CLEAR_BIT(PORTB,Copy_xPinx);
    1d30:	a8 e3       	ldi	r26, 0x38	; 56
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e8 e3       	ldi	r30, 0x38	; 56
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <GPIO_vWritePortPin+0xfe>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <GPIO_vWritePortPin+0xfa>
    1d52:	80 95       	com	r24
    1d54:	84 23       	and	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	57 c0       	rjmp	.+174    	; 0x1e08 <GPIO_vWritePortPin+0x1b8>
		}
		break;
	case GPIOC:
		if (Copy_xVal == GPIO_HIGH) {
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	a1 f4       	brne	.+40     	; 0x1d88 <GPIO_vWritePortPin+0x138>
			SET_BIT(PORTC,Copy_xPinx);
    1d60:	a5 e3       	ldi	r26, 0x35	; 53
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e5 e3       	ldi	r30, 0x35	; 53
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 2e       	mov	r0, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <GPIO_vWritePortPin+0x12e>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <GPIO_vWritePortPin+0x12a>
    1d82:	84 2b       	or	r24, r20
    1d84:	8c 93       	st	X, r24
    1d86:	40 c0       	rjmp	.+128    	; 0x1e08 <GPIO_vWritePortPin+0x1b8>
		}
		else {
			CLEAR_BIT(PORTC,Copy_xPinx);
    1d88:	a5 e3       	ldi	r26, 0x35	; 53
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e5 e3       	ldi	r30, 0x35	; 53
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <GPIO_vWritePortPin+0x156>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <GPIO_vWritePortPin+0x152>
    1daa:	80 95       	com	r24
    1dac:	84 23       	and	r24, r20
    1dae:	8c 93       	st	X, r24
    1db0:	2b c0       	rjmp	.+86     	; 0x1e08 <GPIO_vWritePortPin+0x1b8>
		}
		break;
	case GPIOD:
		if (Copy_xVal == GPIO_HIGH) {
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	a1 f4       	brne	.+40     	; 0x1de0 <GPIO_vWritePortPin+0x190>
			SET_BIT(PORTD,Copy_xPinx);
    1db8:	a2 e3       	ldi	r26, 0x32	; 50
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 e3       	ldi	r30, 0x32	; 50
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <GPIO_vWritePortPin+0x186>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <GPIO_vWritePortPin+0x182>
    1dda:	84 2b       	or	r24, r20
    1ddc:	8c 93       	st	X, r24
    1dde:	14 c0       	rjmp	.+40     	; 0x1e08 <GPIO_vWritePortPin+0x1b8>
		}
		else {
			CLEAR_BIT(PORTD,Copy_xPinx);
    1de0:	a2 e3       	ldi	r26, 0x32	; 50
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e2 e3       	ldi	r30, 0x32	; 50
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <GPIO_vWritePortPin+0x1ae>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <GPIO_vWritePortPin+0x1aa>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
	default:
		break;
	}


}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <GPIO_xReadPortPin>:

/* ***************************************************************************** */

GPIO_PinState_t GPIO_xReadPortPin(GPIO_Port_t Copy_xGPIOx ,GPIO_Pin_t Copy_xPinx)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_xReadPortPin+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <GPIO_xReadPortPin+0x8>
    1e20:	0f 92       	push	r0
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	8a 83       	std	Y+2, r24	; 0x02
    1e28:	6b 83       	std	Y+3, r22	; 0x03
	}
#endif


	/* Get the state of the pin based on specific port and pin */
	GPIO_PinState_t Local_GPIO_xState = 0;
    1e2a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_xGPIOx) {
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	3d 83       	std	Y+5, r19	; 0x05
    1e34:	2c 83       	std	Y+4, r18	; 0x04
    1e36:	4c 81       	ldd	r20, Y+4	; 0x04
    1e38:	5d 81       	ldd	r21, Y+5	; 0x05
    1e3a:	42 34       	cpi	r20, 0x42	; 66
    1e3c:	51 05       	cpc	r21, r1
    1e3e:	41 f1       	breq	.+80     	; 0x1e90 <GPIO_xReadPortPin+0x78>
    1e40:	8c 81       	ldd	r24, Y+4	; 0x04
    1e42:	9d 81       	ldd	r25, Y+5	; 0x05
    1e44:	83 34       	cpi	r24, 0x43	; 67
    1e46:	91 05       	cpc	r25, r1
    1e48:	34 f4       	brge	.+12     	; 0x1e56 <GPIO_xReadPortPin+0x3e>
    1e4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e4e:	21 34       	cpi	r18, 0x41	; 65
    1e50:	31 05       	cpc	r19, r1
    1e52:	61 f0       	breq	.+24     	; 0x1e6c <GPIO_xReadPortPin+0x54>
    1e54:	52 c0       	rjmp	.+164    	; 0x1efa <GPIO_xReadPortPin+0xe2>
    1e56:	4c 81       	ldd	r20, Y+4	; 0x04
    1e58:	5d 81       	ldd	r21, Y+5	; 0x05
    1e5a:	43 34       	cpi	r20, 0x43	; 67
    1e5c:	51 05       	cpc	r21, r1
    1e5e:	51 f1       	breq	.+84     	; 0x1eb4 <GPIO_xReadPortPin+0x9c>
    1e60:	8c 81       	ldd	r24, Y+4	; 0x04
    1e62:	9d 81       	ldd	r25, Y+5	; 0x05
    1e64:	84 34       	cpi	r24, 0x44	; 68
    1e66:	91 05       	cpc	r25, r1
    1e68:	b9 f1       	breq	.+110    	; 0x1ed8 <GPIO_xReadPortPin+0xc0>
    1e6a:	47 c0       	rjmp	.+142    	; 0x1efa <GPIO_xReadPortPin+0xe2>
	case GPIOA:
		Local_GPIO_xState = GET_BIT(PINA,Copy_xPinx);
    1e6c:	e9 e3       	ldi	r30, 0x39	; 57
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a9 01       	movw	r20, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <GPIO_xReadPortPin+0x6c>
    1e80:	55 95       	asr	r21
    1e82:	47 95       	ror	r20
    1e84:	8a 95       	dec	r24
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <GPIO_xReadPortPin+0x68>
    1e88:	ca 01       	movw	r24, r20
    1e8a:	81 70       	andi	r24, 0x01	; 1
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	35 c0       	rjmp	.+106    	; 0x1efa <GPIO_xReadPortPin+0xe2>
		break;
	case GPIOB:
		Local_GPIO_xState = GET_BIT(PINB,Copy_xPinx);
    1e90:	e6 e3       	ldi	r30, 0x36	; 54
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a9 01       	movw	r20, r18
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <GPIO_xReadPortPin+0x90>
    1ea4:	55 95       	asr	r21
    1ea6:	47 95       	ror	r20
    1ea8:	8a 95       	dec	r24
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <GPIO_xReadPortPin+0x8c>
    1eac:	ca 01       	movw	r24, r20
    1eae:	81 70       	andi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	23 c0       	rjmp	.+70     	; 0x1efa <GPIO_xReadPortPin+0xe2>
		break;
	case GPIOC:
		Local_GPIO_xState = GET_BIT(PINC, Copy_xPinx);
    1eb4:	e3 e3       	ldi	r30, 0x33	; 51
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a9 01       	movw	r20, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <GPIO_xReadPortPin+0xb4>
    1ec8:	55 95       	asr	r21
    1eca:	47 95       	ror	r20
    1ecc:	8a 95       	dec	r24
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <GPIO_xReadPortPin+0xb0>
    1ed0:	ca 01       	movw	r24, r20
    1ed2:	81 70       	andi	r24, 0x01	; 1
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	11 c0       	rjmp	.+34     	; 0x1efa <GPIO_xReadPortPin+0xe2>
		break;
	case GPIOD:
		Local_GPIO_xState = GET_BIT(PIND,Copy_xPinx);
    1ed8:	e0 e3       	ldi	r30, 0x30	; 48
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	88 2f       	mov	r24, r24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a9 01       	movw	r20, r18
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <GPIO_xReadPortPin+0xd8>
    1eec:	55 95       	asr	r21
    1eee:	47 95       	ror	r20
    1ef0:	8a 95       	dec	r24
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <GPIO_xReadPortPin+0xd4>
    1ef4:	ca 01       	movw	r24, r20
    1ef6:	81 70       	andi	r24, 0x01	; 1
    1ef8:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	/* Return the state */
	return Local_GPIO_xState;
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <GPIO_xFlipPortPin>:

/* ***************************************************************************** */

GPIO_PinState_t GPIO_xFlipPortPin(GPIO_Port_t Copy_xGPIOx ,GPIO_Pin_t Copy_xPinx)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <GPIO_xFlipPortPin+0x6>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <GPIO_xFlipPortPin+0x8>
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	8a 83       	std	Y+2, r24	; 0x02
    1f1c:	6b 83       	std	Y+3, r22	; 0x03
		ErrorM_vReport(GPIO_MODULE_ID,GPIO_INSTANCE_ID,GPIO_FLIP_CHANNEL_SID,GPIO_E_PARAM_INVALID_CHANNEL_ID);
	}
#endif

	/* Toggle the pin if it is high turn it to low and vice versa */
	GPIO_PinState_t Local_xState = GPIO_xReadPortPin(Copy_xGPIOx,Copy_xPinx);
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	6b 81       	ldd	r22, Y+3	; 0x03
    1f22:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_xReadPortPin>
    1f26:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_xState)
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	3d 83       	std	Y+5, r19	; 0x05
    1f30:	2c 83       	std	Y+4, r18	; 0x04
    1f32:	8c 81       	ldd	r24, Y+4	; 0x04
    1f34:	9d 81       	ldd	r25, Y+5	; 0x05
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	59 f0       	breq	.+22     	; 0x1f50 <GPIO_xFlipPortPin+0x44>
    1f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3e:	21 30       	cpi	r18, 0x01	; 1
    1f40:	31 05       	cpc	r19, r1
    1f42:	59 f4       	brne	.+22     	; 0x1f5a <GPIO_xFlipPortPin+0x4e>
	{
	case GPIO_HIGH:
		GPIO_vWritePortPin(Copy_xGPIOx,Copy_xPinx,GPIO_LOW);
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	6b 81       	ldd	r22, Y+3	; 0x03
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_vWritePortPin>
    1f4e:	05 c0       	rjmp	.+10     	; 0x1f5a <GPIO_xFlipPortPin+0x4e>
		break;
	case GPIO_LOW:
		GPIO_vWritePortPin(Copy_xGPIOx,Copy_xPinx,GPIO_HIGH);
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	6b 81       	ldd	r22, Y+3	; 0x03
    1f54:	41 e0       	ldi	r20, 0x01	; 1
    1f56:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_vWritePortPin>
		break;
	default:
		break;
	}
	/* Return the current state */
	Local_xState = ~ Local_xState;
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	80 95       	com	r24
    1f5e:	89 83       	std	Y+1, r24	; 0x01

	return Local_xState;
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <GPIO_vInitPort>:

/* ***************************************************************************** */

void GPIO_vInitPort(GPIO_Port_t Copy_xGPIOx ,GPIO_PortMode_t Copy_xMode)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <GPIO_vInitPort+0x6>
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <GPIO_vInitPort+0x8>
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	6a 83       	std	Y+2, r22	; 0x02
	{
		ErrorM_vReport(GPIO_MODULE_ID,GPIO_INSTANCE_ID,GPIO_INIT_PORT_SID,GPIO_E_PARAM_STATE);
	}
#endif
	/* Assign the mode to the port */
	switch(Copy_xGPIOx) {
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	3c 83       	std	Y+4, r19	; 0x04
    1f8a:	2b 83       	std	Y+3, r18	; 0x03
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	82 34       	cpi	r24, 0x42	; 66
    1f92:	91 05       	cpc	r25, r1
    1f94:	d9 f0       	breq	.+54     	; 0x1fcc <GPIO_vInitPort+0x5a>
    1f96:	2b 81       	ldd	r18, Y+3	; 0x03
    1f98:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9a:	23 34       	cpi	r18, 0x43	; 67
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	34 f4       	brge	.+12     	; 0x1fac <GPIO_vInitPort+0x3a>
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	81 34       	cpi	r24, 0x41	; 65
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	61 f0       	breq	.+24     	; 0x1fc2 <GPIO_vInitPort+0x50>
    1faa:	1e c0       	rjmp	.+60     	; 0x1fe8 <GPIO_vInitPort+0x76>
    1fac:	2b 81       	ldd	r18, Y+3	; 0x03
    1fae:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb0:	23 34       	cpi	r18, 0x43	; 67
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	81 f0       	breq	.+32     	; 0x1fd6 <GPIO_vInitPort+0x64>
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	84 34       	cpi	r24, 0x44	; 68
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	81 f0       	breq	.+32     	; 0x1fe0 <GPIO_vInitPort+0x6e>
    1fc0:	13 c0       	rjmp	.+38     	; 0x1fe8 <GPIO_vInitPort+0x76>
	case GPIOA:
		DDRA = Copy_xMode;
    1fc2:	ea e3       	ldi	r30, 0x3A	; 58
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	80 83       	st	Z, r24
    1fca:	0e c0       	rjmp	.+28     	; 0x1fe8 <GPIO_vInitPort+0x76>
		break;
	case GPIOB:
		DDRB = Copy_xMode;
    1fcc:	e7 e3       	ldi	r30, 0x37	; 55
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	80 83       	st	Z, r24
    1fd4:	09 c0       	rjmp	.+18     	; 0x1fe8 <GPIO_vInitPort+0x76>
		break;
	case GPIOC:
		DDRC = Copy_xMode;
    1fd6:	e4 e3       	ldi	r30, 0x34	; 52
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	80 83       	st	Z, r24
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <GPIO_vInitPort+0x76>
		break;
	case GPIOD:
		DDRD = Copy_xMode;
    1fe0:	e1 e3       	ldi	r30, 0x31	; 49
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <GPIO_vWritePort>:

/* ***************************************************************************** */

void GPIO_vWritePort(GPIO_Port_t Copy_xGPIOx ,GPIO_PortState_t Copy_xVal)
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <GPIO_vWritePort+0x6>
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <GPIO_vWritePort+0x8>
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	6a 83       	std	Y+2, r22	; 0x02
		ErrorM_vReport(GPIO_MODULE_ID,GPIO_INSTANCE_ID,GPIO_WRITE_PORT_SID,GPIO_E_PARAM_STATE);
	}
#endif

	/* Assign the value to the port */
	switch(Copy_xGPIOx) {
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	3c 83       	std	Y+4, r19	; 0x04
    200e:	2b 83       	std	Y+3, r18	; 0x03
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	82 34       	cpi	r24, 0x42	; 66
    2016:	91 05       	cpc	r25, r1
    2018:	d9 f0       	breq	.+54     	; 0x2050 <GPIO_vWritePort+0x5a>
    201a:	2b 81       	ldd	r18, Y+3	; 0x03
    201c:	3c 81       	ldd	r19, Y+4	; 0x04
    201e:	23 34       	cpi	r18, 0x43	; 67
    2020:	31 05       	cpc	r19, r1
    2022:	34 f4       	brge	.+12     	; 0x2030 <GPIO_vWritePort+0x3a>
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	9c 81       	ldd	r25, Y+4	; 0x04
    2028:	81 34       	cpi	r24, 0x41	; 65
    202a:	91 05       	cpc	r25, r1
    202c:	61 f0       	breq	.+24     	; 0x2046 <GPIO_vWritePort+0x50>
    202e:	1e c0       	rjmp	.+60     	; 0x206c <GPIO_vWritePort+0x76>
    2030:	2b 81       	ldd	r18, Y+3	; 0x03
    2032:	3c 81       	ldd	r19, Y+4	; 0x04
    2034:	23 34       	cpi	r18, 0x43	; 67
    2036:	31 05       	cpc	r19, r1
    2038:	81 f0       	breq	.+32     	; 0x205a <GPIO_vWritePort+0x64>
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	84 34       	cpi	r24, 0x44	; 68
    2040:	91 05       	cpc	r25, r1
    2042:	81 f0       	breq	.+32     	; 0x2064 <GPIO_vWritePort+0x6e>
    2044:	13 c0       	rjmp	.+38     	; 0x206c <GPIO_vWritePort+0x76>
	case GPIOA:
		DDRA = Copy_xVal;
    2046:	ea e3       	ldi	r30, 0x3A	; 58
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	80 83       	st	Z, r24
    204e:	0e c0       	rjmp	.+28     	; 0x206c <GPIO_vWritePort+0x76>
		break;
	case GPIOB:
		DDRB = Copy_xVal;
    2050:	e7 e3       	ldi	r30, 0x37	; 55
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	80 83       	st	Z, r24
    2058:	09 c0       	rjmp	.+18     	; 0x206c <GPIO_vWritePort+0x76>
		break;
	case GPIOC:
		DDRC = Copy_xVal;
    205a:	e4 e3       	ldi	r30, 0x34	; 52
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	80 83       	st	Z, r24
    2062:	04 c0       	rjmp	.+8      	; 0x206c <GPIO_vWritePort+0x76>
		break;
	case GPIOD:
		DDRD = Copy_xVal;
    2064:	e1 e3       	ldi	r30, 0x31	; 49
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	80 83       	st	Z, r24
		break;
	default:
		break;
	}

}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <Home_vInit>:
#include "Home_interface.h"
#include "Home_config.h"

/* ***************************************************************************** */
void Home_vInit(void)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
	LED_xInit(HOME_LIGHT_LED,HOME_LIGHT_OFF);
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	0e 94 ad 13 	call	0x275a	; 0x275a <LED_xInit>
	LED_xInit(HOME_LIGHT_LDR_SENSOR_LED,HOME_LIGHT_OFF);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	0e 94 ad 13 	call	0x275a	; 0x275a <LED_xInit>
}
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <Home_xEnter>:

/* ***************************************************************************** */

Flag_Status Home_xEnter(void)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	c7 56       	subi	r28, 0x67	; 103
    20a2:	d0 40       	sbci	r29, 0x00	; 0
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8LoginTries 		=	0;
    20ae:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Name[NAME_LENGTH]			=	{[0 ... 49]='\0'};
    20b0:	82 e3       	ldi	r24, 0x32	; 50
    20b2:	fe 01       	movw	r30, r28
    20b4:	34 96       	adiw	r30, 0x04	; 4
    20b6:	df 01       	movw	r26, r30
    20b8:	98 2f       	mov	r25, r24
    20ba:	1d 92       	st	X+, r1
    20bc:	9a 95       	dec	r25
    20be:	e9 f7       	brne	.-6      	; 0x20ba <Home_xEnter+0x22>
	uint8 Pass[PASS_LENGTH]			=	{0};
    20c0:	82 e3       	ldi	r24, 0x32	; 50
    20c2:	fe 01       	movw	r30, r28
    20c4:	f6 96       	adiw	r30, 0x36	; 54
    20c6:	df 01       	movw	r26, r30
    20c8:	98 2f       	mov	r25, r24
    20ca:	1d 92       	st	X+, r1
    20cc:	9a 95       	dec	r25
    20ce:	e9 f7       	brne	.-6      	; 0x20ca <Home_xEnter+0x32>
	Flag_Status Local_EntryFlag		=	E_NOK;
    20d0:	1a 82       	std	Y+2, r1	; 0x02
	Flag_Status Local_xRightPwFlag	=	E_NOK;
    20d2:	19 82       	std	Y+1, r1	; 0x01

	Display_vPrint("Enter user name \r\n");
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <Home_xEnter+0x3e>
    20d6:	ed b7       	in	r30, 0x3d	; 61
    20d8:	fe b7       	in	r31, 0x3e	; 62
    20da:	31 96       	adiw	r30, 0x01	; 1
    20dc:	80 e6       	ldi	r24, 0x60	; 96
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
    20e4:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
	for(Local_u8LoginTries = 0;Local_u8LoginTries < HOME_LOGIN_TRIES;Local_u8LoginTries++)
    20ec:	1b 82       	std	Y+3, r1	; 0x03
    20ee:	2c c0       	rjmp	.+88     	; 0x2148 <Home_xEnter+0xb0>
	{
		Display_vRecieveString(Name);
    20f0:	ce 01       	movw	r24, r28
    20f2:	04 96       	adiw	r24, 0x04	; 4
    20f4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Display_vRecieveString>
		if(Login_CheckUserName(Name) == E_OK)
    20f8:	ce 01       	movw	r24, r28
    20fa:	04 96       	adiw	r24, 0x04	; 4
    20fc:	0e 94 66 14 	call	0x28cc	; 0x28cc <Login_CheckUserName>
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	39 f4       	brne	.+14     	; 0x2112 <Home_xEnter+0x7a>
		{
			Local_EntryFlag	=	E_OK;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	8a 83       	std	Y+2, r24	; 0x02
			Alarm_xSetState(ALARM_1,ALARM_OFF);
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Alarm_xSetState>
    2110:	1e c0       	rjmp	.+60     	; 0x214e <Home_xEnter+0xb6>
			break;
		}
		else
		{
			Display_vPrint("Wrong user name\r\n");
    2112:	00 d0       	rcall	.+0      	; 0x2114 <Home_xEnter+0x7c>
    2114:	ed b7       	in	r30, 0x3d	; 61
    2116:	fe b7       	in	r31, 0x3e	; 62
    2118:	31 96       	adiw	r30, 0x01	; 1
    211a:	83 e7       	ldi	r24, 0x73	; 115
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	80 83       	st	Z, r24
    2122:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
			Display_vPrint("Try again\r\n");
    212a:	00 d0       	rcall	.+0      	; 0x212c <Home_xEnter+0x94>
    212c:	ed b7       	in	r30, 0x3d	; 61
    212e:	fe b7       	in	r31, 0x3e	; 62
    2130:	31 96       	adiw	r30, 0x01	; 1
    2132:	85 e8       	ldi	r24, 0x85	; 133
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
	uint8 Pass[PASS_LENGTH]			=	{0};
	Flag_Status Local_EntryFlag		=	E_NOK;
	Flag_Status Local_xRightPwFlag	=	E_NOK;

	Display_vPrint("Enter user name \r\n");
	for(Local_u8LoginTries = 0;Local_u8LoginTries < HOME_LOGIN_TRIES;Local_u8LoginTries++)
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	8f 5f       	subi	r24, 0xFF	; 255
    2146:	8b 83       	std	Y+3, r24	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	83 30       	cpi	r24, 0x03	; 3
    214c:	88 f2       	brcs	.-94     	; 0x20f0 <Home_xEnter+0x58>
			Display_vPrint("Wrong user name\r\n");
			Display_vPrint("Try again\r\n");
		}
	}

	if(Local_EntryFlag == E_OK)
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	d1 f5       	brne	.+116    	; 0x21c8 <Home_xEnter+0x130>
	{
		Display_vPrint("Enter user password\r\n");
    2154:	00 d0       	rcall	.+0      	; 0x2156 <Home_xEnter+0xbe>
    2156:	ed b7       	in	r30, 0x3d	; 61
    2158:	fe b7       	in	r31, 0x3e	; 62
    215a:	31 96       	adiw	r30, 0x01	; 1
    215c:	81 e9       	ldi	r24, 0x91	; 145
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	80 83       	st	Z, r24
    2164:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0

		for(Local_u8LoginTries = 0;Local_u8LoginTries < HOME_LOGIN_TRIES;Local_u8LoginTries++)
    216c:	1b 82       	std	Y+3, r1	; 0x03
    216e:	28 c0       	rjmp	.+80     	; 0x21c0 <Home_xEnter+0x128>
		{
			Display_vRecieveString(Pass);
    2170:	ce 01       	movw	r24, r28
    2172:	c6 96       	adiw	r24, 0x36	; 54
    2174:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Display_vRecieveString>
			if(Login_CheckPass(Pass) == E_OK)
    2178:	ce 01       	movw	r24, r28
    217a:	c6 96       	adiw	r24, 0x36	; 54
    217c:	0e 94 9f 14 	call	0x293e	; 0x293e <Login_CheckPass>
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	19 f4       	brne	.+6      	; 0x218a <Home_xEnter+0xf2>
			{
				Local_xRightPwFlag	=	E_OK;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	23 c0       	rjmp	.+70     	; 0x21d0 <Home_xEnter+0x138>
				break;
			}
			else
			{
				Display_vPrint("Wrong password\r\n");
    218a:	00 d0       	rcall	.+0      	; 0x218c <Home_xEnter+0xf4>
    218c:	ed b7       	in	r30, 0x3d	; 61
    218e:	fe b7       	in	r31, 0x3e	; 62
    2190:	31 96       	adiw	r30, 0x01	; 1
    2192:	87 ea       	ldi	r24, 0xA7	; 167
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	80 83       	st	Z, r24
    219a:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
				Display_vPrint("Try again\r\n");
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <Home_xEnter+0x10c>
    21a4:	ed b7       	in	r30, 0x3d	; 61
    21a6:	fe b7       	in	r31, 0x3e	; 62
    21a8:	31 96       	adiw	r30, 0x01	; 1
    21aa:	85 e8       	ldi	r24, 0x85	; 133
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
    21b2:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0

	if(Local_EntryFlag == E_OK)
	{
		Display_vPrint("Enter user password\r\n");

		for(Local_u8LoginTries = 0;Local_u8LoginTries < HOME_LOGIN_TRIES;Local_u8LoginTries++)
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	8b 83       	std	Y+3, r24	; 0x03
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	83 30       	cpi	r24, 0x03	; 3
    21c4:	a8 f2       	brcs	.-86     	; 0x2170 <Home_xEnter+0xd8>
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <Home_xEnter+0x138>
			}
		}
	}
	else
	{
		Alarm_xSetState(ALARM_1,ALARM_ON);
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	61 e0       	ldi	r22, 0x01	; 1
    21cc:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Alarm_xSetState>
	}
	if(Local_xRightPwFlag == E_NOK)
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	88 23       	and	r24, r24
    21d4:	21 f4       	brne	.+8      	; 0x21de <Home_xEnter+0x146>
	{
		Alarm_xSetState(ALARM_1,ALARM_ON);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Alarm_xSetState>
	}

	return Local_xRightPwFlag;
    21de:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e0:	c9 59       	subi	r28, 0x99	; 153
    21e2:	df 4f       	sbci	r29, 0xFF	; 255
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <Home_vPrintTemp>:

/* ***************************************************************************** */

void Home_vPrintTemp(void)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	2e 97       	sbiw	r28, 0x0e	; 14
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
	float32 Local_f32CurrentTemp	=	0;
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	a0 e0       	ldi	r26, 0x00	; 0
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	ab 83       	std	Y+3, r26	; 0x03
    2216:	bc 83       	std	Y+4, r27	; 0x04
	uint8 u8TempBuf[TEMP_BUF_SIZE]	=	{0};
    2218:	8a e0       	ldi	r24, 0x0A	; 10
    221a:	fe 01       	movw	r30, r28
    221c:	35 96       	adiw	r30, 0x05	; 5
    221e:	df 01       	movw	r26, r30
    2220:	98 2f       	mov	r25, r24
    2222:	1d 92       	st	X+, r1
    2224:	9a 95       	dec	r25
    2226:	e9 f7       	brne	.-6      	; 0x2222 <Home_vPrintTemp+0x2e>
	/* Update temperature reading */
	TempS_vUpdate();
    2228:	0e 94 82 1a 	call	0x3504	; 0x3504 <TempS_vUpdate>

	/* Read the current temperature */
	Local_f32CurrentTemp	=	TempS_f32GetTemp();
    222c:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <TempS_f32GetTemp>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	ab 83       	std	Y+3, r26	; 0x03
    223a:	bc 83       	std	Y+4, r27	; 0x04
	Util_String_vFloatToStr(Local_f32CurrentTemp,u8TempBuf,TEMP_MAX_FLOAT_NUM);
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	ab 81       	ldd	r26, Y+3	; 0x03
    2242:	bc 81       	ldd	r27, Y+4	; 0x04
    2244:	9e 01       	movw	r18, r28
    2246:	2b 5f       	subi	r18, 0xFB	; 251
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	a9 01       	movw	r20, r18
    2250:	22 e0       	ldi	r18, 0x02	; 2
    2252:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <Util_String_vFloatToStr>
	Display_vPrint("Temperature is %s \r\n",u8TempBuf);
    2256:	00 d0       	rcall	.+0      	; 0x2258 <Home_vPrintTemp+0x64>
    2258:	00 d0       	rcall	.+0      	; 0x225a <Home_vPrintTemp+0x66>
    225a:	ed b7       	in	r30, 0x3d	; 61
    225c:	fe b7       	in	r31, 0x3e	; 62
    225e:	31 96       	adiw	r30, 0x01	; 1
    2260:	88 eb       	ldi	r24, 0xB8	; 184
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	ce 01       	movw	r24, r28
    226a:	05 96       	adiw	r24, 0x05	; 5
    226c:	93 83       	std	Z+3, r25	; 0x03
    226e:	82 83       	std	Z+2, r24	; 0x02
    2270:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
}
    227c:	2e 96       	adiw	r28, 0x0e	; 14
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <Home_vOpenDoor>:

/* ***************************************************************************** */

void Home_vOpenDoor(void)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	60 97       	sbiw	r28, 0x10	; 16
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
	uint16 Local_u16Index = 0;
    22a2:	18 8a       	std	Y+16, r1	; 0x10
    22a4:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u16Index=0;Local_u16Index<HOME_DOOR_SERVO_MAX_MS;Local_u16Index+=100)
    22a6:	18 8a       	std	Y+16, r1	; 0x10
    22a8:	1f 86       	std	Y+15, r1	; 0x0f
    22aa:	7d c0       	rjmp	.+250    	; 0x23a6 <Home_vOpenDoor+0x118>
	{
		PWM_xSet_TONus(Local_u16Index,HOME_DOOR_SERVO_CH);
    22ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ae:	98 89       	ldd	r25, Y+16	; 0x10
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	0e 94 bf 19 	call	0x337e	; 0x337e <PWM_xSet_TONus>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a8 e4       	ldi	r26, 0x48	; 72
    22bc:	b2 e4       	ldi	r27, 0x42	; 66
    22be:	8b 87       	std	Y+11, r24	; 0x0b
    22c0:	9c 87       	std	Y+12, r25	; 0x0c
    22c2:	ad 87       	std	Y+13, r26	; 0x0d
    22c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    22cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	4a ef       	ldi	r20, 0xFA	; 250
    22d4:	54 e4       	ldi	r21, 0x44	; 68
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8f 83       	std	Y+7, r24	; 0x07
    22e0:	98 87       	std	Y+8, r25	; 0x08
    22e2:	a9 87       	std	Y+9, r26	; 0x09
    22e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e6:	6f 81       	ldd	r22, Y+7	; 0x07
    22e8:	78 85       	ldd	r23, Y+8	; 0x08
    22ea:	89 85       	ldd	r24, Y+9	; 0x09
    22ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e8       	ldi	r20, 0x80	; 128
    22f4:	5f e3       	ldi	r21, 0x3F	; 63
    22f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	2c f4       	brge	.+10     	; 0x2308 <Home_vOpenDoor+0x7a>
		__ticks = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
    2306:	3f c0       	rjmp	.+126    	; 0x2386 <Home_vOpenDoor+0xf8>
	else if (__tmp > 65535)
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	3f ef       	ldi	r19, 0xFF	; 255
    2314:	4f e7       	ldi	r20, 0x7F	; 127
    2316:	57 e4       	ldi	r21, 0x47	; 71
    2318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    231c:	18 16       	cp	r1, r24
    231e:	4c f5       	brge	.+82     	; 0x2372 <Home_vOpenDoor+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2320:	6b 85       	ldd	r22, Y+11	; 0x0b
    2322:	7c 85       	ldd	r23, Y+12	; 0x0c
    2324:	8d 85       	ldd	r24, Y+13	; 0x0d
    2326:	9e 85       	ldd	r25, Y+14	; 0x0e
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e2       	ldi	r20, 0x20	; 32
    232e:	51 e4       	ldi	r21, 0x41	; 65
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	0f c0       	rjmp	.+30     	; 0x2368 <Home_vOpenDoor+0xda>
    234a:	88 ec       	ldi	r24, 0xC8	; 200
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9c 83       	std	Y+4, r25	; 0x04
    2350:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <Home_vOpenDoor+0xc8>
    235a:	9c 83       	std	Y+4, r25	; 0x04
    235c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	69 f7       	brne	.-38     	; 0x234a <Home_vOpenDoor+0xbc>
    2370:	14 c0       	rjmp	.+40     	; 0x239a <Home_vOpenDoor+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2372:	6f 81       	ldd	r22, Y+7	; 0x07
    2374:	78 85       	ldd	r23, Y+8	; 0x08
    2376:	89 85       	ldd	r24, Y+9	; 0x09
    2378:	9a 85       	ldd	r25, Y+10	; 0x0a
    237a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9e 83       	std	Y+6, r25	; 0x06
    2384:	8d 83       	std	Y+5, r24	; 0x05
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	9e 81       	ldd	r25, Y+6	; 0x06
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <Home_vOpenDoor+0x104>
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
/* ***************************************************************************** */

void Home_vOpenDoor(void)
{
	uint16 Local_u16Index = 0;
	for(Local_u16Index=0;Local_u16Index<HOME_DOOR_SERVO_MAX_MS;Local_u16Index+=100)
    239a:	8f 85       	ldd	r24, Y+15	; 0x0f
    239c:	98 89       	ldd	r25, Y+16	; 0x10
    239e:	8c 59       	subi	r24, 0x9C	; 156
    23a0:	9f 4f       	sbci	r25, 0xFF	; 255
    23a2:	98 8b       	std	Y+16, r25	; 0x10
    23a4:	8f 87       	std	Y+15, r24	; 0x0f
    23a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a8:	98 89       	ldd	r25, Y+16	; 0x10
    23aa:	29 e0       	ldi	r18, 0x09	; 9
    23ac:	84 3c       	cpi	r24, 0xC4	; 196
    23ae:	92 07       	cpc	r25, r18
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <Home_vOpenDoor+0x126>
    23b2:	7c cf       	rjmp	.-264    	; 0x22ac <Home_vOpenDoor+0x1e>
	{
		PWM_xSet_TONus(Local_u16Index,HOME_DOOR_SERVO_CH);
		_delay_ms(50);
	}
}
    23b4:	60 96       	adiw	r28, 0x10	; 16
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <Home_vCloseDoor>:

/* ***************************************************************************** */

void Home_vCloseDoor(void)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	60 97       	sbiw	r28, 0x10	; 16
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
	uint16 Local_u16Index = 0;
    23da:	18 8a       	std	Y+16, r1	; 0x10
    23dc:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u16Index=HOME_DOOR_SERVO_MAX_MS;Local_u16Index>=1;Local_u16Index-=100)
    23de:	84 ec       	ldi	r24, 0xC4	; 196
    23e0:	99 e0       	ldi	r25, 0x09	; 9
    23e2:	98 8b       	std	Y+16, r25	; 0x10
    23e4:	8f 87       	std	Y+15, r24	; 0x0f
    23e6:	7d c0       	rjmp	.+250    	; 0x24e2 <Home_vCloseDoor+0x11c>
	{
		PWM_xSet_TONus(Local_u16Index,HOME_DOOR_SERVO_CH);
    23e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ea:	98 89       	ldd	r25, Y+16	; 0x10
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	0e 94 bf 19 	call	0x337e	; 0x337e <PWM_xSet_TONus>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a8 e4       	ldi	r26, 0x48	; 72
    23f8:	b2 e4       	ldi	r27, 0x42	; 66
    23fa:	8b 87       	std	Y+11, r24	; 0x0b
    23fc:	9c 87       	std	Y+12, r25	; 0x0c
    23fe:	ad 87       	std	Y+13, r26	; 0x0d
    2400:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2402:	6b 85       	ldd	r22, Y+11	; 0x0b
    2404:	7c 85       	ldd	r23, Y+12	; 0x0c
    2406:	8d 85       	ldd	r24, Y+13	; 0x0d
    2408:	9e 85       	ldd	r25, Y+14	; 0x0e
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a ef       	ldi	r20, 0xFA	; 250
    2410:	54 e4       	ldi	r21, 0x44	; 68
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8f 83       	std	Y+7, r24	; 0x07
    241c:	98 87       	std	Y+8, r25	; 0x08
    241e:	a9 87       	std	Y+9, r26	; 0x09
    2420:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2422:	6f 81       	ldd	r22, Y+7	; 0x07
    2424:	78 85       	ldd	r23, Y+8	; 0x08
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <Home_vCloseDoor+0x7e>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <Home_vCloseDoor+0xfc>
	else if (__tmp > 65535)
    2444:	6f 81       	ldd	r22, Y+7	; 0x07
    2446:	78 85       	ldd	r23, Y+8	; 0x08
    2448:	89 85       	ldd	r24, Y+9	; 0x09
    244a:	9a 85       	ldd	r25, Y+10	; 0x0a
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	4c f5       	brge	.+82     	; 0x24ae <Home_vCloseDoor+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245c:	6b 85       	ldd	r22, Y+11	; 0x0b
    245e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2460:	8d 85       	ldd	r24, Y+13	; 0x0d
    2462:	9e 85       	ldd	r25, Y+14	; 0x0e
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9e 83       	std	Y+6, r25	; 0x06
    2482:	8d 83       	std	Y+5, r24	; 0x05
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <Home_vCloseDoor+0xde>
    2486:	88 ec       	ldi	r24, 0xC8	; 200
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9c 83       	std	Y+4, r25	; 0x04
    248c:	8b 83       	std	Y+3, r24	; 0x03
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <Home_vCloseDoor+0xcc>
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	9e 81       	ldd	r25, Y+6	; 0x06
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <Home_vCloseDoor+0xc0>
    24ac:	14 c0       	rjmp	.+40     	; 0x24d6 <Home_vCloseDoor+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	6f 81       	ldd	r22, Y+7	; 0x07
    24b0:	78 85       	ldd	r23, Y+8	; 0x08
    24b2:	89 85       	ldd	r24, Y+9	; 0x09
    24b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	9a 83       	std	Y+2, r25	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <Home_vCloseDoor+0x108>
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
/* ***************************************************************************** */

void Home_vCloseDoor(void)
{
	uint16 Local_u16Index = 0;
	for(Local_u16Index=HOME_DOOR_SERVO_MAX_MS;Local_u16Index>=1;Local_u16Index-=100)
    24d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d8:	98 89       	ldd	r25, Y+16	; 0x10
    24da:	84 56       	subi	r24, 0x64	; 100
    24dc:	90 40       	sbci	r25, 0x00	; 0
    24de:	98 8b       	std	Y+16, r25	; 0x10
    24e0:	8f 87       	std	Y+15, r24	; 0x0f
    24e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e4:	98 89       	ldd	r25, Y+16	; 0x10
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	09 f0       	breq	.+2      	; 0x24ec <Home_vCloseDoor+0x126>
    24ea:	7e cf       	rjmp	.-260    	; 0x23e8 <Home_vCloseDoor+0x22>
	{
		PWM_xSet_TONus(Local_u16Index,HOME_DOOR_SERVO_CH);
		_delay_ms(50);
	}
}
    24ec:	60 96       	adiw	r28, 0x10	; 16
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <Home_vSetLight>:

/* ***************************************************************************** */

void Home_vSetLight(HomeLighState_t Copy_xLightState)
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	89 83       	std	Y+1, r24	; 0x01
	LED_xSetState(HOME_LIGHT_LED,Copy_xLightState);
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	69 81       	ldd	r22, Y+1	; 0x01
    250e:	0e 94 07 14 	call	0x280e	; 0x280e <LED_xSetState>
}
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <Home_vWelcomMsg>:

/* ***************************************************************************** */

static void Home_vWelcomMsg(void)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
	Display_vPrint("Welcome, Choose option \r\n");
    2522:	00 d0       	rcall	.+0      	; 0x2524 <Home_vWelcomMsg+0xa>
    2524:	ed b7       	in	r30, 0x3d	; 61
    2526:	fe b7       	in	r31, 0x3e	; 62
    2528:	31 96       	adiw	r30, 0x01	; 1
    252a:	8d ec       	ldi	r24, 0xCD	; 205
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    2532:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
	Display_vPrint("1- Open & Close door \r\n");
    253a:	00 d0       	rcall	.+0      	; 0x253c <Home_vWelcomMsg+0x22>
    253c:	ed b7       	in	r30, 0x3d	; 61
    253e:	fe b7       	in	r31, 0x3e	; 62
    2540:	31 96       	adiw	r30, 0x01	; 1
    2542:	87 ee       	ldi	r24, 0xE7	; 231
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	80 83       	st	Z, r24
    254a:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
	Display_vPrint("2- Open & Close light \r\n");
    2552:	00 d0       	rcall	.+0      	; 0x2554 <Home_vWelcomMsg+0x3a>
    2554:	ed b7       	in	r30, 0x3d	; 61
    2556:	fe b7       	in	r31, 0x3e	; 62
    2558:	31 96       	adiw	r30, 0x01	; 1
    255a:	8f ef       	ldi	r24, 0xFF	; 255
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
	Display_vPrint("3- Get the current temp \r\n");
    256a:	00 d0       	rcall	.+0      	; 0x256c <Home_vWelcomMsg+0x52>
    256c:	ed b7       	in	r30, 0x3d	; 61
    256e:	fe b7       	in	r31, 0x3e	; 62
    2570:	31 96       	adiw	r30, 0x01	; 1
    2572:	88 e1       	ldi	r24, 0x18	; 24
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
    257a:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
	Display_vPrint("0- Exit menu \r\n");
    2582:	00 d0       	rcall	.+0      	; 0x2584 <Home_vWelcomMsg+0x6a>
    2584:	ed b7       	in	r30, 0x3d	; 61
    2586:	fe b7       	in	r31, 0x3e	; 62
    2588:	31 96       	adiw	r30, 0x01	; 1
    258a:	83 e3       	ldi	r24, 0x33	; 51
    258c:	91 e0       	ldi	r25, 0x01	; 1
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
    2592:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
}
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <Home_xOptionHandle>:

/* ***************************************************************************** */

Flag_Status Home_xOptionHandle(void)
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <Home_xOptionHandle+0x6>
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <Home_xOptionHandle+0x8>
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <Home_xOptionHandle+0xa>
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
	static HomeLighState_t Local_xLedState	=	HOME_LIGHT_OFF;
	static HomeDoorState_t Local_xDoorState	=	HOME_DOOR_CLOSED;
	Flag_Status Local_xFlag					=	E_OK;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_xRecvData	=	0;
    25b2:	1a 82       	std	Y+2, r1	; 0x02

	Home_vWelcomMsg();
    25b4:	0e 94 8d 12 	call	0x251a	; 0x251a <Home_vWelcomMsg>

	Display_vRecvChar(&Local_xRecvData);
    25b8:	ce 01       	movw	r24, r28
    25ba:	02 96       	adiw	r24, 0x02	; 2
    25bc:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <Display_vRecvChar>

	Home_vUpdate();
    25c0:	0e 94 66 13 	call	0x26cc	; 0x26cc <Home_vUpdate>

	switch(Local_xRecvData)
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	3e 83       	std	Y+6, r19	; 0x06
    25cc:	2d 83       	std	Y+5, r18	; 0x05
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	81 33       	cpi	r24, 0x31	; 49
    25d4:	91 05       	cpc	r25, r1
    25d6:	c1 f0       	breq	.+48     	; 0x2608 <Home_xOptionHandle+0x68>
    25d8:	2d 81       	ldd	r18, Y+5	; 0x05
    25da:	3e 81       	ldd	r19, Y+6	; 0x06
    25dc:	22 33       	cpi	r18, 0x32	; 50
    25de:	31 05       	cpc	r19, r1
    25e0:	3c f4       	brge	.+14     	; 0x25f0 <Home_xOptionHandle+0x50>
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	80 33       	cpi	r24, 0x30	; 48
    25e8:	91 05       	cpc	r25, r1
    25ea:	09 f4       	brne	.+2      	; 0x25ee <Home_xOptionHandle+0x4e>
    25ec:	57 c0       	rjmp	.+174    	; 0x269c <Home_xOptionHandle+0xfc>
    25ee:	58 c0       	rjmp	.+176    	; 0x26a0 <Home_xOptionHandle+0x100>
    25f0:	2d 81       	ldd	r18, Y+5	; 0x05
    25f2:	3e 81       	ldd	r19, Y+6	; 0x06
    25f4:	22 33       	cpi	r18, 0x32	; 50
    25f6:	31 05       	cpc	r19, r1
    25f8:	99 f1       	breq	.+102    	; 0x2660 <Home_xOptionHandle+0xc0>
    25fa:	8d 81       	ldd	r24, Y+5	; 0x05
    25fc:	9e 81       	ldd	r25, Y+6	; 0x06
    25fe:	83 33       	cpi	r24, 0x33	; 51
    2600:	91 05       	cpc	r25, r1
    2602:	09 f4       	brne	.+2      	; 0x2606 <Home_xOptionHandle+0x66>
    2604:	48 c0       	rjmp	.+144    	; 0x2696 <Home_xOptionHandle+0xf6>
    2606:	4c c0       	rjmp	.+152    	; 0x26a0 <Home_xOptionHandle+0x100>
	{
	case HOME_DOOR_OP:
		if(HOME_DOOR_CLOSED	==	Local_xDoorState)
    2608:	80 91 89 04 	lds	r24, 0x0489
    260c:	88 23       	and	r24, r24
    260e:	79 f4       	brne	.+30     	; 0x262e <Home_xOptionHandle+0x8e>
		{
			Display_vPrint("Opening door \r\n");
    2610:	00 d0       	rcall	.+0      	; 0x2612 <Home_xOptionHandle+0x72>
    2612:	ed b7       	in	r30, 0x3d	; 61
    2614:	fe b7       	in	r31, 0x3e	; 62
    2616:	31 96       	adiw	r30, 0x01	; 1
    2618:	83 e4       	ldi	r24, 0x43	; 67
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	80 83       	st	Z, r24
    2620:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
			Home_vOpenDoor();
    2628:	0e 94 47 11 	call	0x228e	; 0x228e <Home_vOpenDoor>
    262c:	0e c0       	rjmp	.+28     	; 0x264a <Home_xOptionHandle+0xaa>
		}
		else
		{
			Display_vPrint("Closing door \r\n");
    262e:	00 d0       	rcall	.+0      	; 0x2630 <Home_xOptionHandle+0x90>
    2630:	ed b7       	in	r30, 0x3d	; 61
    2632:	fe b7       	in	r31, 0x3e	; 62
    2634:	31 96       	adiw	r30, 0x01	; 1
    2636:	83 e5       	ldi	r24, 0x53	; 83
    2638:	91 e0       	ldi	r25, 0x01	; 1
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	80 83       	st	Z, r24
    263e:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
			Home_vCloseDoor();
    2646:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <Home_vCloseDoor>
		}
		Local_xDoorState = (HOME_DOOR_CLOSED == Local_xDoorState)?HOME_DOOR_OPENED:HOME_DOOR_CLOSED;
    264a:	80 91 89 04 	lds	r24, 0x0489
    264e:	1c 82       	std	Y+4, r1	; 0x04
    2650:	88 23       	and	r24, r24
    2652:	11 f4       	brne	.+4      	; 0x2658 <Home_xOptionHandle+0xb8>
    2654:	91 e0       	ldi	r25, 0x01	; 1
    2656:	9c 83       	std	Y+4, r25	; 0x04
    2658:	2c 81       	ldd	r18, Y+4	; 0x04
    265a:	20 93 89 04 	sts	0x0489, r18
    265e:	2c c0       	rjmp	.+88     	; 0x26b8 <Home_xOptionHandle+0x118>
		break;

	case HOME_LED_OP:
		Local_xLedState = (HOME_LIGHT_OFF == Local_xLedState)?HOME_LIGHT_ON:HOME_LIGHT_OFF;
    2660:	80 91 8a 04 	lds	r24, 0x048A
    2664:	1b 82       	std	Y+3, r1	; 0x03
    2666:	88 23       	and	r24, r24
    2668:	11 f4       	brne	.+4      	; 0x266e <Home_xOptionHandle+0xce>
    266a:	31 e0       	ldi	r19, 0x01	; 1
    266c:	3b 83       	std	Y+3, r19	; 0x03
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	80 93 8a 04 	sts	0x048A, r24
		Home_vSetLight(Local_xLedState);
    2674:	80 91 8a 04 	lds	r24, 0x048A
    2678:	0e 94 7f 12 	call	0x24fe	; 0x24fe <Home_vSetLight>
		Display_vPrint("Toggling light \r\n");
    267c:	00 d0       	rcall	.+0      	; 0x267e <Home_xOptionHandle+0xde>
    267e:	ed b7       	in	r30, 0x3d	; 61
    2680:	fe b7       	in	r31, 0x3e	; 62
    2682:	31 96       	adiw	r30, 0x01	; 1
    2684:	83 e6       	ldi	r24, 0x63	; 99
    2686:	91 e0       	ldi	r25, 0x01	; 1
    2688:	91 83       	std	Z+1, r25	; 0x01
    268a:	80 83       	st	Z, r24
    268c:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	11 c0       	rjmp	.+34     	; 0x26b8 <Home_xOptionHandle+0x118>
		break;

	case HOME_TEMP_OP:
		Home_vPrintTemp();
    2696:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <Home_vPrintTemp>
    269a:	0e c0       	rjmp	.+28     	; 0x26b8 <Home_xOptionHandle+0x118>
		break;
	case HOME_EXIT_MENU_OP:
		Local_xFlag = E_NOK;
    269c:	19 82       	std	Y+1, r1	; 0x01
    269e:	0c c0       	rjmp	.+24     	; 0x26b8 <Home_xOptionHandle+0x118>
		break;
	default:
		Display_vPrint("Wrong choice \r\n");
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <Home_xOptionHandle+0x102>
    26a2:	ed b7       	in	r30, 0x3d	; 61
    26a4:	fe b7       	in	r31, 0x3e	; 62
    26a6:	31 96       	adiw	r30, 0x01	; 1
    26a8:	85 e7       	ldi	r24, 0x75	; 117
    26aa:	91 e0       	ldi	r25, 0x01	; 1
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    26b0:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
		break;
	}
	return Local_xFlag;
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ba:	26 96       	adiw	r28, 0x06	; 6
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <Home_vUpdate>:

/* ***************************************************************************** */

void Home_vUpdate(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
	LDR_vUpdate();
    26d4:	0e 94 94 13 	call	0x2728	; 0x2728 <LDR_vUpdate>

	if(LDR_u16GetVal() < HOME_LIGHT_MIN_INTENSITY)
    26d8:	0e 94 89 13 	call	0x2712	; 0x2712 <LDR_u16GetVal>
    26dc:	22 e0       	ldi	r18, 0x02	; 2
    26de:	8c 3b       	cpi	r24, 0xBC	; 188
    26e0:	92 07       	cpc	r25, r18
    26e2:	28 f4       	brcc	.+10     	; 0x26ee <Home_vUpdate+0x22>
	{
		LED_xSetState(HOME_LIGHT_LDR_SENSOR_LED,LED_ON);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	0e 94 07 14 	call	0x280e	; 0x280e <LED_xSetState>
    26ec:	04 c0       	rjmp	.+8      	; 0x26f6 <Home_vUpdate+0x2a>
	}
	else
	{
		LED_xSetState(HOME_LIGHT_LDR_SENSOR_LED,LED_OFF);
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	0e 94 07 14 	call	0x280e	; 0x280e <LED_xSetState>
	}
}
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <LDR_vInit>:
/* **************************************************************************** */
static uint16 LDR_Value;
/* **************************************************************************** */

void LDR_vInit(void)
{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
	/* Initial value for light intensity */
	LDR_Value	=	0;
    2704:	10 92 8c 04 	sts	0x048C, r1
    2708:	10 92 8b 04 	sts	0x048B, r1
}
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <LDR_u16GetVal>:

/* **************************************************************************** */

uint16 LDR_u16GetVal(void)
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
	return LDR_Value;
    271a:	80 91 8b 04 	lds	r24, 0x048B
    271e:	90 91 8c 04 	lds	r25, 0x048C
}
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <LDR_vUpdate>:

/* ***************************************************************************** */
/*Light intensity sensor update*/
/* ***************************************************************************** */
void LDR_vUpdate(void)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	00 d0       	rcall	.+0      	; 0x272e <LDR_vUpdate+0x6>
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
	uint16 Local_u16RecvData	=	0;
    2732:	1a 82       	std	Y+2, r1	; 0x02
    2734:	19 82       	std	Y+1, r1	; 0x01

	/*Measure the current light intensity*/
	 ADC_xReadSynch(LDR_ADC_CHANNEL, &Local_u16RecvData);
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	9e 01       	movw	r18, r28
    273a:	2f 5f       	subi	r18, 0xFF	; 255
    273c:	3f 4f       	sbci	r19, 0xFF	; 255
    273e:	b9 01       	movw	r22, r18
    2740:	0e 94 8b 09 	call	0x1316	; 0x1316 <ADC_xReadSynch>

	 LDR_Value = Local_u16RecvData;
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	90 93 8c 04 	sts	0x048C, r25
    274c:	80 93 8b 04 	sts	0x048B, r24
}
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <LED_xInit>:
/* ***********************************************************  */
/*Functions definitions*/
/* ***********************************************************  */

Error_Status LED_xInit(LED_t Copy_xLed, LED_State_t Copy_xState)
{
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	00 d0       	rcall	.+0      	; 0x2760 <LED_xInit+0x6>
    2760:	0f 92       	push	r0
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	6a 83       	std	Y+2, r22	; 0x02
	if(E_OK	!=	LED_IS_VALID(Copy_xLed))
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	82 30       	cpi	r24, 0x02	; 2
    276e:	10 f0       	brcs	.+4      	; 0x2774 <LED_xInit+0x1a>
	{
		return E_NOK;
    2770:	1b 82       	std	Y+3, r1	; 0x03
    2772:	1d c0       	rjmp	.+58     	; 0x27ae <LED_xInit+0x54>
	}
	/* Set led as output*/
	GPIO_vInitPortPin(Leds[Copy_xLed].Led_Port,Leds[Copy_xLed].Led_Pin,GPIO_OUT);
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	88 2f       	mov	r24, r24
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	fc 01       	movw	r30, r24
    2780:	e3 57       	subi	r30, 0x73	; 115
    2782:	fd 4f       	sbci	r31, 0xFD	; 253
    2784:	20 81       	ld	r18, Z
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	fc 01       	movw	r30, r24
    2792:	e2 57       	subi	r30, 0x72	; 114
    2794:	fd 4f       	sbci	r31, 0xFD	; 253
    2796:	90 81       	ld	r25, Z
    2798:	82 2f       	mov	r24, r18
    279a:	69 2f       	mov	r22, r25
    279c:	41 e0       	ldi	r20, 0x01	; 1
    279e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_vInitPortPin>
	/* Set led state */
	LED_xSetState(Copy_xLed, Copy_xState);
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	6a 81       	ldd	r22, Y+2	; 0x02
    27a6:	0e 94 07 14 	call	0x280e	; 0x280e <LED_xSetState>

	return E_OK;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	8b 83       	std	Y+3, r24	; 0x03
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <LED_xToggle>:

/* ***********************************************************  */

Error_Status LED_xToggle(LED_t Copy_xLed)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <LED_xToggle+0x6>
    27c2:	0f 92       	push	r0
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	8a 83       	std	Y+2, r24	; 0x02
	if(E_OK	!=	LED_IS_VALID(Copy_xLed))
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	82 30       	cpi	r24, 0x02	; 2
    27ce:	10 f0       	brcs	.+4      	; 0x27d4 <LED_xToggle+0x18>
	{
		return E_NOK;
    27d0:	1b 82       	std	Y+3, r1	; 0x03
    27d2:	16 c0       	rjmp	.+44     	; 0x2800 <LED_xToggle+0x44>
	}

	/* Get led state */
	LED_State_t Local_xLedState = LED_OFF;
    27d4:	19 82       	std	Y+1, r1	; 0x01
	LED_xGetState(Copy_xLed,&Local_xLedState);
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9e 01       	movw	r18, r28
    27da:	2f 5f       	subi	r18, 0xFF	; 255
    27dc:	3f 4f       	sbci	r19, 0xFF	; 255
    27de:	b9 01       	movw	r22, r18
    27e0:	0e 94 34 14 	call	0x2868	; 0x2868 <LED_xGetState>

	/* Toggle led */
	if (Local_xLedState == LED_ON)
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	81 30       	cpi	r24, 0x01	; 1
    27e8:	29 f4       	brne	.+10     	; 0x27f4 <LED_xToggle+0x38>
	{
		LED_xSetState(Copy_xLed, LED_OFF);
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	0e 94 07 14 	call	0x280e	; 0x280e <LED_xSetState>
    27f2:	04 c0       	rjmp	.+8      	; 0x27fc <LED_xToggle+0x40>
	} else
	{
		LED_xSetState(Copy_xLed, LED_ON);
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	61 e0       	ldi	r22, 0x01	; 1
    27f8:	0e 94 07 14 	call	0x280e	; 0x280e <LED_xSetState>
	}
	return E_OK;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	8b 83       	std	Y+3, r24	; 0x03
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <LED_xSetState>:

/* ***********************************************************  */

Error_Status LED_xSetState(LED_t Copy_xLed, LED_State_t Copy_xState)
{
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	00 d0       	rcall	.+0      	; 0x2814 <LED_xSetState+0x6>
    2814:	0f 92       	push	r0
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	6a 83       	std	Y+2, r22	; 0x02
	if(E_OK	!=	LED_IS_VALID(Copy_xLed))
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	82 30       	cpi	r24, 0x02	; 2
    2822:	10 f0       	brcs	.+4      	; 0x2828 <LED_xSetState+0x1a>
	{
		return E_NOK;
    2824:	1b 82       	std	Y+3, r1	; 0x03
    2826:	19 c0       	rjmp	.+50     	; 0x285a <LED_xSetState+0x4c>
	}
	GPIO_vWritePortPin(Leds[Copy_xLed].Led_Port,Leds[Copy_xLed].Led_Pin,Copy_xState);
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	88 2f       	mov	r24, r24
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	fc 01       	movw	r30, r24
    2834:	e3 57       	subi	r30, 0x73	; 115
    2836:	fd 4f       	sbci	r31, 0xFD	; 253
    2838:	20 81       	ld	r18, Z
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	88 2f       	mov	r24, r24
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	88 0f       	add	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	fc 01       	movw	r30, r24
    2846:	e2 57       	subi	r30, 0x72	; 114
    2848:	fd 4f       	sbci	r31, 0xFD	; 253
    284a:	90 81       	ld	r25, Z
    284c:	82 2f       	mov	r24, r18
    284e:	69 2f       	mov	r22, r25
    2850:	4a 81       	ldd	r20, Y+2	; 0x02
    2852:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_vWritePortPin>
	return E_OK;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	8b 83       	std	Y+3, r24	; 0x03
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <LED_xGetState>:

/* ***********************************************************  */

Error_Status LED_xGetState(LED_t Copy_xLed,LED_State_t *pxLedState)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	00 d0       	rcall	.+0      	; 0x286e <LED_xGetState+0x6>
    286e:	00 d0       	rcall	.+0      	; 0x2870 <LED_xGetState+0x8>
    2870:	0f 92       	push	r0
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	8a 83       	std	Y+2, r24	; 0x02
    2878:	7c 83       	std	Y+4, r23	; 0x04
    287a:	6b 83       	std	Y+3, r22	; 0x03
	if(E_OK	!=	LED_IS_VALID(Copy_xLed))
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	82 30       	cpi	r24, 0x02	; 2
    2880:	10 f0       	brcs	.+4      	; 0x2886 <LED_xGetState+0x1e>
	{
		return E_NOK;
    2882:	1d 82       	std	Y+5, r1	; 0x05
    2884:	1a c0       	rjmp	.+52     	; 0x28ba <LED_xGetState+0x52>
	}
	LED_State_t ret = LED_OFF;
    2886:	19 82       	std	Y+1, r1	; 0x01

	ret = GPIO_xReadPortPin(Leds[Copy_xLed].Led_Port,Leds[Copy_xLed].Led_Pin);
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	88 2f       	mov	r24, r24
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	fc 01       	movw	r30, r24
    2894:	e3 57       	subi	r30, 0x73	; 115
    2896:	fd 4f       	sbci	r31, 0xFD	; 253
    2898:	20 81       	ld	r18, Z
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	88 2f       	mov	r24, r24
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	88 0f       	add	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	fc 01       	movw	r30, r24
    28a6:	e2 57       	subi	r30, 0x72	; 114
    28a8:	fd 4f       	sbci	r31, 0xFD	; 253
    28aa:	90 81       	ld	r25, Z
    28ac:	82 2f       	mov	r24, r18
    28ae:	69 2f       	mov	r22, r25
    28b0:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_xReadPortPin>
    28b4:	89 83       	std	Y+1, r24	; 0x01

	return E_OK;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	8d 83       	std	Y+5, r24	; 0x05
    28ba:	8d 81       	ldd	r24, Y+5	; 0x05
}
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <Login_CheckUserName>:
static uint8 UsersPass[LOGIN_N_USERS][LOGIN_USERS_PASS_LEN]	={"12345","00000","55555"};

static uint8 u8CurrentIndex	=	0;

Flag_Status Login_CheckUserName(uint8 *String)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <Login_CheckUserName+0x6>
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <Login_CheckUserName+0x8>
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	9c 83       	std	Y+4, r25	; 0x04
    28da:	8b 83       	std	Y+3, r24	; 0x03
	Flag_Status Local_xFlag = E_NOK;
    28dc:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Index = 0;
    28de:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Index = 0; Local_u8Index < LOGIN_N_USERS;Local_u8Index++)
    28e0:	19 82       	std	Y+1, r1	; 0x01
    28e2:	22 c0       	rjmp	.+68     	; 0x2928 <Login_CheckUserName+0x5c>
	{
		if(Util_String_xComp(String,UserNames[Local_u8Index]) == 0)
    28e4:	41 e9       	ldi	r20, 0x91	; 145
    28e6:	52 e0       	ldi	r21, 0x02	; 2
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	82 e3       	ldi	r24, 0x32	; 50
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	bc 01       	movw	r22, r24
    28f4:	26 9f       	mul	r18, r22
    28f6:	c0 01       	movw	r24, r0
    28f8:	27 9f       	mul	r18, r23
    28fa:	90 0d       	add	r25, r0
    28fc:	36 9f       	mul	r19, r22
    28fe:	90 0d       	add	r25, r0
    2900:	11 24       	eor	r1, r1
    2902:	9a 01       	movw	r18, r20
    2904:	28 0f       	add	r18, r24
    2906:	39 1f       	adc	r19, r25
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	9c 81       	ldd	r25, Y+4	; 0x04
    290c:	b9 01       	movw	r22, r18
    290e:	0e 94 9c 21 	call	0x4338	; 0x4338 <Util_String_xComp>
    2912:	88 23       	and	r24, r24
    2914:	31 f4       	brne	.+12     	; 0x2922 <Login_CheckUserName+0x56>
		{
			u8CurrentIndex	= Local_u8Index;
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	80 93 8d 04 	sts	0x048D, r24
			Local_xFlag = E_OK;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	8a 83       	std	Y+2, r24	; 0x02
    2920:	06 c0       	rjmp	.+12     	; 0x292e <Login_CheckUserName+0x62>

Flag_Status Login_CheckUserName(uint8 *String)
{
	Flag_Status Local_xFlag = E_NOK;
	uint8 Local_u8Index = 0;
	for(Local_u8Index = 0; Local_u8Index < LOGIN_N_USERS;Local_u8Index++)
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	8f 5f       	subi	r24, 0xFF	; 255
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	85 30       	cpi	r24, 0x05	; 5
    292c:	d8 f2       	brcs	.-74     	; 0x28e4 <Login_CheckUserName+0x18>
			Local_xFlag = E_OK;
			break;
		}
	}

	return Local_xFlag;
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <Login_CheckPass>:

Flag_Status Login_CheckPass(uint8 *String)
{
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <Login_CheckPass+0x6>
    2944:	0f 92       	push	r0
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	9b 83       	std	Y+3, r25	; 0x03
    294c:	8a 83       	std	Y+2, r24	; 0x02
	Flag_Status Local_xFlag = E_NOK;
    294e:	19 82       	std	Y+1, r1	; 0x01

	if(Util_String_xComp(String,UsersPass[u8CurrentIndex]) ==0)
    2950:	4b e8       	ldi	r20, 0x8B	; 139
    2952:	53 e0       	ldi	r21, 0x03	; 3
    2954:	80 91 8d 04 	lds	r24, 0x048D
    2958:	28 2f       	mov	r18, r24
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	82 e3       	ldi	r24, 0x32	; 50
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	bc 01       	movw	r22, r24
    2962:	26 9f       	mul	r18, r22
    2964:	c0 01       	movw	r24, r0
    2966:	27 9f       	mul	r18, r23
    2968:	90 0d       	add	r25, r0
    296a:	36 9f       	mul	r19, r22
    296c:	90 0d       	add	r25, r0
    296e:	11 24       	eor	r1, r1
    2970:	9a 01       	movw	r18, r20
    2972:	28 0f       	add	r18, r24
    2974:	39 1f       	adc	r19, r25
    2976:	8a 81       	ldd	r24, Y+2	; 0x02
    2978:	9b 81       	ldd	r25, Y+3	; 0x03
    297a:	b9 01       	movw	r22, r18
    297c:	0e 94 9c 21 	call	0x4338	; 0x4338 <Util_String_xComp>
    2980:	88 23       	and	r24, r24
    2982:	11 f4       	brne	.+4      	; 0x2988 <Login_CheckPass+0x4a>
	{
		Local_xFlag = E_OK;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_xFlag;
    2988:	89 81       	ldd	r24, Y+1	; 0x01
}
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <PWM_vInit>:

static uint16 Global_Prescaler	=	PWM_NO_Clock_Source;
static uint16 u16Current_Freq;

Error_Status PWM_vInit(PWM_Typedef *PWM_ConfigPtr)
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	00 d0       	rcall	.+0      	; 0x299c <PWM_vInit+0x6>
    299c:	00 d0       	rcall	.+0      	; 0x299e <PWM_vInit+0x8>
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <PWM_vInit+0xa>
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	9b 83       	std	Y+3, r25	; 0x03
    29a6:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status Local_xErrorState	=	0;
    29a8:	19 82       	std	Y+1, r1	; 0x01
	/* Choose channel and compare match mode */
	Local_xErrorState	=	PWM_xSetChannels(PWM_ConfigPtr->Channel,PWM_ConfigPtr->COM_Mode);
    29aa:	ea 81       	ldd	r30, Y+2	; 0x02
    29ac:	fb 81       	ldd	r31, Y+3	; 0x03
    29ae:	82 81       	ldd	r24, Z+2	; 0x02
    29b0:	ea 81       	ldd	r30, Y+2	; 0x02
    29b2:	fb 81       	ldd	r31, Y+3	; 0x03
    29b4:	90 81       	ld	r25, Z
    29b6:	69 2f       	mov	r22, r25
    29b8:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <PWM_xSetChannels>
    29bc:	89 83       	std	Y+1, r24	; 0x01

	/* Initialize PWM pins as output */
	switch(PWM_ConfigPtr->Channel)
    29be:	ea 81       	ldd	r30, Y+2	; 0x02
    29c0:	fb 81       	ldd	r31, Y+3	; 0x03
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	28 2f       	mov	r18, r24
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	3e 83       	std	Y+6, r19	; 0x06
    29ca:	2d 83       	std	Y+5, r18	; 0x05
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	31 f0       	breq	.+12     	; 0x29e0 <PWM_vInit+0x4a>
    29d4:	2d 81       	ldd	r18, Y+5	; 0x05
    29d6:	3e 81       	ldd	r19, Y+6	; 0x06
    29d8:	21 30       	cpi	r18, 0x01	; 1
    29da:	31 05       	cpc	r19, r1
    29dc:	39 f0       	breq	.+14     	; 0x29ec <PWM_vInit+0x56>
    29de:	0c c0       	rjmp	.+24     	; 0x29f8 <PWM_vInit+0x62>
	{
	case PWM_CH_1:
		GPIO_vInitPortPin(PWM_OCR1A_PORT,PWM_OCR1A_PIN,GPIO_OUT);
    29e0:	84 e4       	ldi	r24, 0x44	; 68
    29e2:	65 e0       	ldi	r22, 0x05	; 5
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_vInitPortPin>
    29ea:	08 c0       	rjmp	.+16     	; 0x29fc <PWM_vInit+0x66>
		break;
	case PWM_CH_2:
		GPIO_vInitPortPin(PWM_OCR1B_PORT,PWM_OCR1B_PIN,GPIO_OUT);
    29ec:	84 e4       	ldi	r24, 0x44	; 68
    29ee:	64 e0       	ldi	r22, 0x04	; 4
    29f0:	41 e0       	ldi	r20, 0x01	; 1
    29f2:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_vInitPortPin>
    29f6:	02 c0       	rjmp	.+4      	; 0x29fc <PWM_vInit+0x66>
		break;
	default:
		return E_NOK;
    29f8:	1c 82       	std	Y+4, r1	; 0x04
    29fa:	0e c0       	rjmp	.+28     	; 0x2a18 <PWM_vInit+0x82>
		break;
	}
	/* Set PWM mode */
	Local_xErrorState	=	PWM_xSetMode(PWM_ConfigPtr->Mode);
    29fc:	ea 81       	ldd	r30, Y+2	; 0x02
    29fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2a00:	81 81       	ldd	r24, Z+1	; 0x01
    2a02:	0e 94 19 17 	call	0x2e32	; 0x2e32 <PWM_xSetMode>
    2a06:	89 83       	std	Y+1, r24	; 0x01
	/* Enable Timer */
	Local_xErrorState	=	PWM_xSetPrescaler(PWM_ConfigPtr->Prescaler);
    2a08:	ea 81       	ldd	r30, Y+2	; 0x02
    2a0a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a0c:	83 81       	ldd	r24, Z+3	; 0x03
    2a0e:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <PWM_xSetPrescaler>
    2a12:	89 83       	std	Y+1, r24	; 0x01

	return Local_xErrorState;
    2a14:	39 81       	ldd	r19, Y+1	; 0x01
    2a16:	3c 83       	std	Y+4, r19	; 0x04
    2a18:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2a1a:	26 96       	adiw	r28, 0x06	; 6
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <PWM_xSetPrescaler>:

Error_Status PWM_xSetPrescaler(PWM_ClockPrescaler Copy_xPrescaler)
{
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <PWM_xSetPrescaler+0x6>
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <PWM_xSetPrescaler+0x8>
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xPrescaler)
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	28 2f       	mov	r18, r24
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	3c 83       	std	Y+4, r19	; 0x04
    2a42:	2b 83       	std	Y+3, r18	; 0x03
    2a44:	8b 81       	ldd	r24, Y+3	; 0x03
    2a46:	9c 81       	ldd	r25, Y+4	; 0x04
    2a48:	83 30       	cpi	r24, 0x03	; 3
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <PWM_xSetPrescaler+0x24>
    2a4e:	81 c0       	rjmp	.+258    	; 0x2b52 <PWM_xSetPrescaler+0x126>
    2a50:	2b 81       	ldd	r18, Y+3	; 0x03
    2a52:	3c 81       	ldd	r19, Y+4	; 0x04
    2a54:	24 30       	cpi	r18, 0x04	; 4
    2a56:	31 05       	cpc	r19, r1
    2a58:	8c f4       	brge	.+34     	; 0x2a7c <PWM_xSetPrescaler+0x50>
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	91 05       	cpc	r25, r1
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <PWM_xSetPrescaler+0x3a>
    2a64:	3e c0       	rjmp	.+124    	; 0x2ae2 <PWM_xSetPrescaler+0xb6>
    2a66:	2b 81       	ldd	r18, Y+3	; 0x03
    2a68:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6a:	22 30       	cpi	r18, 0x02	; 2
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	0c f0       	brlt	.+2      	; 0x2a72 <PWM_xSetPrescaler+0x46>
    2a70:	54 c0       	rjmp	.+168    	; 0x2b1a <PWM_xSetPrescaler+0xee>
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	d1 f0       	breq	.+52     	; 0x2aae <PWM_xSetPrescaler+0x82>
    2a7a:	eb c0       	rjmp	.+470    	; 0x2c52 <PWM_xSetPrescaler+0x226>
    2a7c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a7e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a80:	25 30       	cpi	r18, 0x05	; 5
    2a82:	31 05       	cpc	r19, r1
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <PWM_xSetPrescaler+0x5c>
    2a86:	9d c0       	rjmp	.+314    	; 0x2bc2 <PWM_xSetPrescaler+0x196>
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	85 30       	cpi	r24, 0x05	; 5
    2a8e:	91 05       	cpc	r25, r1
    2a90:	0c f4       	brge	.+2      	; 0x2a94 <PWM_xSetPrescaler+0x68>
    2a92:	7b c0       	rjmp	.+246    	; 0x2b8a <PWM_xSetPrescaler+0x15e>
    2a94:	2b 81       	ldd	r18, Y+3	; 0x03
    2a96:	3c 81       	ldd	r19, Y+4	; 0x04
    2a98:	26 30       	cpi	r18, 0x06	; 6
    2a9a:	31 05       	cpc	r19, r1
    2a9c:	09 f4       	brne	.+2      	; 0x2aa0 <PWM_xSetPrescaler+0x74>
    2a9e:	ad c0       	rjmp	.+346    	; 0x2bfa <PWM_xSetPrescaler+0x1ce>
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	87 30       	cpi	r24, 0x07	; 7
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <PWM_xSetPrescaler+0x80>
    2aaa:	bd c0       	rjmp	.+378    	; 0x2c26 <PWM_xSetPrescaler+0x1fa>
    2aac:	d2 c0       	rjmp	.+420    	; 0x2c52 <PWM_xSetPrescaler+0x226>
	{
	case PWM_NO_Clock_Source:
		CLEAR_BIT(TCCR1B,CS10);
    2aae:	ae e4       	ldi	r26, 0x4E	; 78
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	ee e4       	ldi	r30, 0x4E	; 78
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	8e 7f       	andi	r24, 0xFE	; 254
    2aba:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    2abc:	ae e4       	ldi	r26, 0x4E	; 78
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	ee e4       	ldi	r30, 0x4E	; 78
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	8d 7f       	andi	r24, 0xFD	; 253
    2ac8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    2aca:	ae e4       	ldi	r26, 0x4E	; 78
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	ee e4       	ldi	r30, 0x4E	; 78
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	8b 7f       	andi	r24, 0xFB	; 251
    2ad6:	8c 93       	st	X, r24
		Global_Prescaler=0;
    2ad8:	10 92 8f 04 	sts	0x048F, r1
    2adc:	10 92 8e 04 	sts	0x048E, r1
    2ae0:	ba c0       	rjmp	.+372    	; 0x2c56 <PWM_xSetPrescaler+0x22a>
		break;
	case PWM_Prescaler_1:
		SET_BIT(TCCR1B,CS10);
    2ae2:	ae e4       	ldi	r26, 0x4E	; 78
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	ee e4       	ldi	r30, 0x4E	; 78
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	81 60       	ori	r24, 0x01	; 1
    2aee:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    2af0:	ae e4       	ldi	r26, 0x4E	; 78
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	ee e4       	ldi	r30, 0x4E	; 78
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	8d 7f       	andi	r24, 0xFD	; 253
    2afc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    2afe:	ae e4       	ldi	r26, 0x4E	; 78
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	ee e4       	ldi	r30, 0x4E	; 78
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	8b 7f       	andi	r24, 0xFB	; 251
    2b0a:	8c 93       	st	X, r24

		Global_Prescaler=1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	90 93 8f 04 	sts	0x048F, r25
    2b14:	80 93 8e 04 	sts	0x048E, r24
    2b18:	9e c0       	rjmp	.+316    	; 0x2c56 <PWM_xSetPrescaler+0x22a>
		break;

	case PWM_Prescaler_8:
		CLEAR_BIT(TCCR1B,CS10);
    2b1a:	ae e4       	ldi	r26, 0x4E	; 78
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	ee e4       	ldi	r30, 0x4E	; 78
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	8e 7f       	andi	r24, 0xFE	; 254
    2b26:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    2b28:	ae e4       	ldi	r26, 0x4E	; 78
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	ee e4       	ldi	r30, 0x4E	; 78
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	82 60       	ori	r24, 0x02	; 2
    2b34:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    2b36:	ae e4       	ldi	r26, 0x4E	; 78
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	ee e4       	ldi	r30, 0x4E	; 78
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	8b 7f       	andi	r24, 0xFB	; 251
    2b42:	8c 93       	st	X, r24

		Global_Prescaler=8;
    2b44:	88 e0       	ldi	r24, 0x08	; 8
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	90 93 8f 04 	sts	0x048F, r25
    2b4c:	80 93 8e 04 	sts	0x048E, r24
    2b50:	82 c0       	rjmp	.+260    	; 0x2c56 <PWM_xSetPrescaler+0x22a>
		break;

	case PWM_Prescaler_64:
		SET_BIT(TCCR1B,CS10);
    2b52:	ae e4       	ldi	r26, 0x4E	; 78
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	ee e4       	ldi	r30, 0x4E	; 78
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	81 60       	ori	r24, 0x01	; 1
    2b5e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    2b60:	ae e4       	ldi	r26, 0x4E	; 78
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	ee e4       	ldi	r30, 0x4E	; 78
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	82 60       	ori	r24, 0x02	; 2
    2b6c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    2b6e:	ae e4       	ldi	r26, 0x4E	; 78
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	ee e4       	ldi	r30, 0x4E	; 78
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8b 7f       	andi	r24, 0xFB	; 251
    2b7a:	8c 93       	st	X, r24

		Global_Prescaler=64;
    2b7c:	80 e4       	ldi	r24, 0x40	; 64
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	90 93 8f 04 	sts	0x048F, r25
    2b84:	80 93 8e 04 	sts	0x048E, r24
    2b88:	66 c0       	rjmp	.+204    	; 0x2c56 <PWM_xSetPrescaler+0x22a>
		break;

	case PWM_Prescaler_256:
		CLEAR_BIT(TCCR1B,CS10);
    2b8a:	ae e4       	ldi	r26, 0x4E	; 78
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	ee e4       	ldi	r30, 0x4E	; 78
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	8e 7f       	andi	r24, 0xFE	; 254
    2b96:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    2b98:	ae e4       	ldi	r26, 0x4E	; 78
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	ee e4       	ldi	r30, 0x4E	; 78
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	8d 7f       	andi	r24, 0xFD	; 253
    2ba4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
    2ba6:	ae e4       	ldi	r26, 0x4E	; 78
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	ee e4       	ldi	r30, 0x4E	; 78
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	84 60       	ori	r24, 0x04	; 4
    2bb2:	8c 93       	st	X, r24

		Global_Prescaler=256;
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
    2bb8:	90 93 8f 04 	sts	0x048F, r25
    2bbc:	80 93 8e 04 	sts	0x048E, r24
    2bc0:	4a c0       	rjmp	.+148    	; 0x2c56 <PWM_xSetPrescaler+0x22a>
		break;

	case PWM_Prescaler_1024:
		SET_BIT(TCCR1B,CS10);
    2bc2:	ae e4       	ldi	r26, 0x4E	; 78
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	ee e4       	ldi	r30, 0x4E	; 78
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	81 60       	ori	r24, 0x01	; 1
    2bce:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    2bd0:	ae e4       	ldi	r26, 0x4E	; 78
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	ee e4       	ldi	r30, 0x4E	; 78
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	8d 7f       	andi	r24, 0xFD	; 253
    2bdc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
    2bde:	ae e4       	ldi	r26, 0x4E	; 78
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	ee e4       	ldi	r30, 0x4E	; 78
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	84 60       	ori	r24, 0x04	; 4
    2bea:	8c 93       	st	X, r24

		Global_Prescaler=1024;
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	94 e0       	ldi	r25, 0x04	; 4
    2bf0:	90 93 8f 04 	sts	0x048F, r25
    2bf4:	80 93 8e 04 	sts	0x048E, r24
    2bf8:	2e c0       	rjmp	.+92     	; 0x2c56 <PWM_xSetPrescaler+0x22a>
		break;

	case PWM_Preascaler_ExClockT1_Falling:
		CLEAR_BIT(TCCR1B,CS10);
    2bfa:	ae e4       	ldi	r26, 0x4E	; 78
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	ee e4       	ldi	r30, 0x4E	; 78
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	8e 7f       	andi	r24, 0xFE	; 254
    2c06:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    2c08:	ae e4       	ldi	r26, 0x4E	; 78
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	ee e4       	ldi	r30, 0x4E	; 78
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	82 60       	ori	r24, 0x02	; 2
    2c14:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
    2c16:	ae e4       	ldi	r26, 0x4E	; 78
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	ee e4       	ldi	r30, 0x4E	; 78
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	84 60       	ori	r24, 0x04	; 4
    2c22:	8c 93       	st	X, r24
    2c24:	18 c0       	rjmp	.+48     	; 0x2c56 <PWM_xSetPrescaler+0x22a>
		break;
	case PWM_Preascaler_ExClockT1_Rising:
		SET_BIT(TCCR1B,CS10);
    2c26:	ae e4       	ldi	r26, 0x4E	; 78
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	ee e4       	ldi	r30, 0x4E	; 78
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	81 60       	ori	r24, 0x01	; 1
    2c32:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    2c34:	ae e4       	ldi	r26, 0x4E	; 78
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	ee e4       	ldi	r30, 0x4E	; 78
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	82 60       	ori	r24, 0x02	; 2
    2c40:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
    2c42:	ae e4       	ldi	r26, 0x4E	; 78
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	ee e4       	ldi	r30, 0x4E	; 78
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	84 60       	ori	r24, 0x04	; 4
    2c4e:	8c 93       	st	X, r24
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <PWM_xSetPrescaler+0x22a>
		break;
	default:
		return E_NOK;
    2c52:	1a 82       	std	Y+2, r1	; 0x02
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <PWM_xSetPrescaler+0x22e>
		break;
	}
	return E_OK;
    2c56:	91 e0       	ldi	r25, 0x01	; 1
    2c58:	9a 83       	std	Y+2, r25	; 0x02
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <PWM_vStop>:

void PWM_vStop(void)
{
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B,CS10);
    2c72:	ae e4       	ldi	r26, 0x4E	; 78
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	ee e4       	ldi	r30, 0x4E	; 78
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8e 7f       	andi	r24, 0xFE	; 254
    2c7e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
    2c80:	ae e4       	ldi	r26, 0x4E	; 78
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	ee e4       	ldi	r30, 0x4E	; 78
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	8d 7f       	andi	r24, 0xFD	; 253
    2c8c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
    2c8e:	ae e4       	ldi	r26, 0x4E	; 78
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	ee e4       	ldi	r30, 0x4E	; 78
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	8b 7f       	andi	r24, 0xFB	; 251
    2c9a:	8c 93       	st	X, r24
}
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <PWM_xSetChannels>:

Error_Status PWM_xSetChannels(PWM_Channels Copy_xChannel,PWM_Com_OutputMode Copy_xOutputMode)
{
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <PWM_xSetChannels+0x6>
    2ca8:	00 d0       	rcall	.+0      	; 0x2caa <PWM_xSetChannels+0x8>
    2caa:	0f 92       	push	r0
    2cac:	cd b7       	in	r28, 0x3d	; 61
    2cae:	de b7       	in	r29, 0x3e	; 62
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_xOutputMode)
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	3d 83       	std	Y+5, r19	; 0x05
    2cbc:	2c 83       	std	Y+4, r18	; 0x04
    2cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc2:	81 30       	cpi	r24, 0x01	; 1
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	e1 f1       	breq	.+120    	; 0x2d40 <PWM_xSetChannels+0x9e>
    2cc8:	2c 81       	ldd	r18, Y+4	; 0x04
    2cca:	3d 81       	ldd	r19, Y+5	; 0x05
    2ccc:	22 30       	cpi	r18, 0x02	; 2
    2cce:	31 05       	cpc	r19, r1
    2cd0:	2c f4       	brge	.+10     	; 0x2cdc <PWM_xSetChannels+0x3a>
    2cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	71 f0       	breq	.+28     	; 0x2cf6 <PWM_xSetChannels+0x54>
    2cda:	9e c0       	rjmp	.+316    	; 0x2e18 <PWM_xSetChannels+0x176>
    2cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    2cde:	3d 81       	ldd	r19, Y+5	; 0x05
    2ce0:	22 30       	cpi	r18, 0x02	; 2
    2ce2:	31 05       	cpc	r19, r1
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <PWM_xSetChannels+0x46>
    2ce6:	51 c0       	rjmp	.+162    	; 0x2d8a <PWM_xSetChannels+0xe8>
    2ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cea:	9d 81       	ldd	r25, Y+5	; 0x05
    2cec:	83 30       	cpi	r24, 0x03	; 3
    2cee:	91 05       	cpc	r25, r1
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <PWM_xSetChannels+0x52>
    2cf2:	6f c0       	rjmp	.+222    	; 0x2dd2 <PWM_xSetChannels+0x130>
    2cf4:	91 c0       	rjmp	.+290    	; 0x2e18 <PWM_xSetChannels+0x176>
	{
	case Normal_Port_Operation:
		if (Copy_xChannel==PWM_CH_1)
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	88 23       	and	r24, r24
    2cfa:	79 f4       	brne	.+30     	; 0x2d1a <PWM_xSetChannels+0x78>
		{
			CLEAR_BIT(TCCR1A,COM1A1);
    2cfc:	af e4       	ldi	r26, 0x4F	; 79
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	ef e4       	ldi	r30, 0x4F	; 79
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	8f 77       	andi	r24, 0x7F	; 127
    2d08:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A0);
    2d0a:	af e4       	ldi	r26, 0x4F	; 79
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	ef e4       	ldi	r30, 0x4F	; 79
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	8f 7b       	andi	r24, 0xBF	; 191
    2d16:	8c 93       	st	X, r24
    2d18:	81 c0       	rjmp	.+258    	; 0x2e1c <PWM_xSetChannels+0x17a>
		}
		else if (Copy_xChannel==PWM_CH_2)
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	09 f0       	breq	.+2      	; 0x2d22 <PWM_xSetChannels+0x80>
    2d20:	7d c0       	rjmp	.+250    	; 0x2e1c <PWM_xSetChannels+0x17a>
		{
			CLEAR_BIT(TCCR1A,COM1B1);
    2d22:	af e4       	ldi	r26, 0x4F	; 79
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	ef e4       	ldi	r30, 0x4F	; 79
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8f 7d       	andi	r24, 0xDF	; 223
    2d2e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1B0);
    2d30:	af e4       	ldi	r26, 0x4F	; 79
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	ef e4       	ldi	r30, 0x4F	; 79
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	8f 7e       	andi	r24, 0xEF	; 239
    2d3c:	8c 93       	st	X, r24
    2d3e:	6e c0       	rjmp	.+220    	; 0x2e1c <PWM_xSetChannels+0x17a>
		}
		break;

	case Tog_OC1A_CompMatch_OC1B_Disconnected:
		if (Copy_xChannel==PWM_CH_1)
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	88 23       	and	r24, r24
    2d44:	79 f4       	brne	.+30     	; 0x2d64 <PWM_xSetChannels+0xc2>
		{
			CLEAR_BIT(TCCR1A,COM1A1);
    2d46:	af e4       	ldi	r26, 0x4F	; 79
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	ef e4       	ldi	r30, 0x4F	; 79
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	8f 77       	andi	r24, 0x7F	; 127
    2d52:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A0);
    2d54:	af e4       	ldi	r26, 0x4F	; 79
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	ef e4       	ldi	r30, 0x4F	; 79
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	80 64       	ori	r24, 0x40	; 64
    2d60:	8c 93       	st	X, r24
    2d62:	5c c0       	rjmp	.+184    	; 0x2e1c <PWM_xSetChannels+0x17a>
		}
		else if (Copy_xChannel==PWM_CH_2)
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	81 30       	cpi	r24, 0x01	; 1
    2d68:	09 f0       	breq	.+2      	; 0x2d6c <PWM_xSetChannels+0xca>
    2d6a:	58 c0       	rjmp	.+176    	; 0x2e1c <PWM_xSetChannels+0x17a>
		{
			CLEAR_BIT(TCCR1A,COM1B1);
    2d6c:	af e4       	ldi	r26, 0x4F	; 79
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	ef e4       	ldi	r30, 0x4F	; 79
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	8f 7d       	andi	r24, 0xDF	; 223
    2d78:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B0);
    2d7a:	af e4       	ldi	r26, 0x4F	; 79
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	ef e4       	ldi	r30, 0x4F	; 79
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	80 61       	ori	r24, 0x10	; 16
    2d86:	8c 93       	st	X, r24
    2d88:	49 c0       	rjmp	.+146    	; 0x2e1c <PWM_xSetChannels+0x17a>
		}
		break;

	case Clr_OC1A_OC1B_CompMatchNonInvert:
		if (Copy_xChannel==PWM_CH_1)
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	88 23       	and	r24, r24
    2d8e:	79 f4       	brne	.+30     	; 0x2dae <PWM_xSetChannels+0x10c>
		{
			SET_BIT(TCCR1A,COM1A1);
    2d90:	af e4       	ldi	r26, 0x4F	; 79
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	ef e4       	ldi	r30, 0x4F	; 79
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	80 68       	ori	r24, 0x80	; 128
    2d9c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A0);
    2d9e:	af e4       	ldi	r26, 0x4F	; 79
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	ef e4       	ldi	r30, 0x4F	; 79
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	8f 7b       	andi	r24, 0xBF	; 191
    2daa:	8c 93       	st	X, r24
    2dac:	37 c0       	rjmp	.+110    	; 0x2e1c <PWM_xSetChannels+0x17a>
		}
		else if (Copy_xChannel==PWM_CH_2)
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	81 30       	cpi	r24, 0x01	; 1
    2db2:	a1 f5       	brne	.+104    	; 0x2e1c <PWM_xSetChannels+0x17a>
		{
			SET_BIT(TCCR1A,COM1B1);
    2db4:	af e4       	ldi	r26, 0x4F	; 79
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	ef e4       	ldi	r30, 0x4F	; 79
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	80 62       	ori	r24, 0x20	; 32
    2dc0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1B0);
    2dc2:	af e4       	ldi	r26, 0x4F	; 79
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	ef e4       	ldi	r30, 0x4F	; 79
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	8f 7e       	andi	r24, 0xEF	; 239
    2dce:	8c 93       	st	X, r24
    2dd0:	25 c0       	rjmp	.+74     	; 0x2e1c <PWM_xSetChannels+0x17a>
		}
		break;

	case Set_OC1A_OC1B_CompMatchInvert:
		if (Copy_xChannel==PWM_CH_1)
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	88 23       	and	r24, r24
    2dd6:	71 f4       	brne	.+28     	; 0x2df4 <PWM_xSetChannels+0x152>
		{
			SET_BIT(TCCR1A,COM1A1);
    2dd8:	af e4       	ldi	r26, 0x4F	; 79
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	ef e4       	ldi	r30, 0x4F	; 79
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	80 68       	ori	r24, 0x80	; 128
    2de4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A0);
    2de6:	af e4       	ldi	r26, 0x4F	; 79
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	ef e4       	ldi	r30, 0x4F	; 79
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	80 64       	ori	r24, 0x40	; 64
    2df2:	8c 93       	st	X, r24
		}
		if (Copy_xChannel==PWM_CH_2)
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	81 30       	cpi	r24, 0x01	; 1
    2df8:	89 f4       	brne	.+34     	; 0x2e1c <PWM_xSetChannels+0x17a>
		{
			SET_BIT(TCCR1A,COM1B1);
    2dfa:	af e4       	ldi	r26, 0x4F	; 79
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	ef e4       	ldi	r30, 0x4F	; 79
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	80 62       	ori	r24, 0x20	; 32
    2e06:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B0);
    2e08:	af e4       	ldi	r26, 0x4F	; 79
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ef e4       	ldi	r30, 0x4F	; 79
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	80 61       	ori	r24, 0x10	; 16
    2e14:	8c 93       	st	X, r24
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <PWM_xSetChannels+0x17a>
		}
		break;

	default:
		return E_NOK;
    2e18:	1b 82       	std	Y+3, r1	; 0x03
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <PWM_xSetChannels+0x17e>
		break;
	}
	return E_OK;
    2e1c:	91 e0       	ldi	r25, 0x01	; 1
    2e1e:	9b 83       	std	Y+3, r25	; 0x03
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <PWM_xSetMode>:

static Error_Status PWM_xSetMode(PWM_Mode Copy_xMode)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <PWM_xSetMode+0x6>
    2e38:	00 d0       	rcall	.+0      	; 0x2e3a <PWM_xSetMode+0x8>
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
    2e3e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xMode)
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	28 2f       	mov	r18, r24
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	3c 83       	std	Y+4, r19	; 0x04
    2e48:	2b 83       	std	Y+3, r18	; 0x03
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4e:	85 30       	cpi	r24, 0x05	; 5
    2e50:	91 05       	cpc	r25, r1
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <PWM_xSetMode+0x24>
    2e54:	e5 c0       	rjmp	.+458    	; 0x3020 <PWM_xSetMode+0x1ee>
    2e56:	2b 81       	ldd	r18, Y+3	; 0x03
    2e58:	3c 81       	ldd	r19, Y+4	; 0x04
    2e5a:	26 30       	cpi	r18, 0x06	; 6
    2e5c:	31 05       	cpc	r19, r1
    2e5e:	24 f5       	brge	.+72     	; 0x2ea8 <PWM_xSetMode+0x76>
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	82 30       	cpi	r24, 0x02	; 2
    2e66:	91 05       	cpc	r25, r1
    2e68:	09 f4       	brne	.+2      	; 0x2e6c <PWM_xSetMode+0x3a>
    2e6a:	83 c0       	rjmp	.+262    	; 0x2f72 <PWM_xSetMode+0x140>
    2e6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e70:	23 30       	cpi	r18, 0x03	; 3
    2e72:	31 05       	cpc	r19, r1
    2e74:	64 f4       	brge	.+24     	; 0x2e8e <PWM_xSetMode+0x5c>
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	09 f4       	brne	.+2      	; 0x2e80 <PWM_xSetMode+0x4e>
    2e7e:	3f c0       	rjmp	.+126    	; 0x2efe <PWM_xSetMode+0xcc>
    2e80:	2b 81       	ldd	r18, Y+3	; 0x03
    2e82:	3c 81       	ldd	r19, Y+4	; 0x04
    2e84:	21 30       	cpi	r18, 0x01	; 1
    2e86:	31 05       	cpc	r19, r1
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <PWM_xSetMode+0x5a>
    2e8a:	56 c0       	rjmp	.+172    	; 0x2f38 <PWM_xSetMode+0x106>
    2e8c:	94 c1       	rjmp	.+808    	; 0x31b6 <PWM_xSetMode+0x384>
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	9c 81       	ldd	r25, Y+4	; 0x04
    2e92:	83 30       	cpi	r24, 0x03	; 3
    2e94:	91 05       	cpc	r25, r1
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <PWM_xSetMode+0x68>
    2e98:	89 c0       	rjmp	.+274    	; 0x2fac <PWM_xSetMode+0x17a>
    2e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e9e:	24 30       	cpi	r18, 0x04	; 4
    2ea0:	31 05       	cpc	r19, r1
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <PWM_xSetMode+0x74>
    2ea4:	a0 c0       	rjmp	.+320    	; 0x2fe6 <PWM_xSetMode+0x1b4>
    2ea6:	87 c1       	rjmp	.+782    	; 0x31b6 <PWM_xSetMode+0x384>
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2eac:	88 30       	cpi	r24, 0x08	; 8
    2eae:	91 05       	cpc	r25, r1
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <PWM_xSetMode+0x82>
    2eb2:	0d c1       	rjmp	.+538    	; 0x30ce <PWM_xSetMode+0x29c>
    2eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    2eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    2eb8:	29 30       	cpi	r18, 0x09	; 9
    2eba:	31 05       	cpc	r19, r1
    2ebc:	6c f4       	brge	.+26     	; 0x2ed8 <PWM_xSetMode+0xa6>
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec2:	86 30       	cpi	r24, 0x06	; 6
    2ec4:	91 05       	cpc	r25, r1
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <PWM_xSetMode+0x98>
    2ec8:	c8 c0       	rjmp	.+400    	; 0x305a <PWM_xSetMode+0x228>
    2eca:	2b 81       	ldd	r18, Y+3	; 0x03
    2ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ece:	27 30       	cpi	r18, 0x07	; 7
    2ed0:	31 05       	cpc	r19, r1
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <PWM_xSetMode+0xa4>
    2ed4:	df c0       	rjmp	.+446    	; 0x3094 <PWM_xSetMode+0x262>
    2ed6:	6f c1       	rjmp	.+734    	; 0x31b6 <PWM_xSetMode+0x384>
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	9c 81       	ldd	r25, Y+4	; 0x04
    2edc:	8a 30       	cpi	r24, 0x0A	; 10
    2ede:	91 05       	cpc	r25, r1
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <PWM_xSetMode+0xb2>
    2ee2:	2f c1       	rjmp	.+606    	; 0x3142 <PWM_xSetMode+0x310>
    2ee4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ee6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ee8:	2a 30       	cpi	r18, 0x0A	; 10
    2eea:	31 05       	cpc	r19, r1
    2eec:	0c f4       	brge	.+2      	; 0x2ef0 <PWM_xSetMode+0xbe>
    2eee:	0c c1       	rjmp	.+536    	; 0x3108 <PWM_xSetMode+0x2d6>
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef4:	8b 30       	cpi	r24, 0x0B	; 11
    2ef6:	91 05       	cpc	r25, r1
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <PWM_xSetMode+0xca>
    2efa:	40 c1       	rjmp	.+640    	; 0x317c <PWM_xSetMode+0x34a>
    2efc:	5c c1       	rjmp	.+696    	; 0x31b6 <PWM_xSetMode+0x384>
	{
	case TIMER1_WGM_PWM_8     :
		SET_BIT(TCCR1A,WGM10);
    2efe:	af e4       	ldi	r26, 0x4F	; 79
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	ef e4       	ldi	r30, 0x4F	; 79
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	81 60       	ori	r24, 0x01	; 1
    2f0a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    2f0c:	af e4       	ldi	r26, 0x4F	; 79
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	ef e4       	ldi	r30, 0x4F	; 79
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	8d 7f       	andi	r24, 0xFD	; 253
    2f18:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    2f1a:	ae e4       	ldi	r26, 0x4E	; 78
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	ee e4       	ldi	r30, 0x4E	; 78
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	87 7f       	andi	r24, 0xF7	; 247
    2f26:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    2f28:	ae e4       	ldi	r26, 0x4E	; 78
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	ee e4       	ldi	r30, 0x4E	; 78
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	8f 7e       	andi	r24, 0xEF	; 239
    2f34:	8c 93       	st	X, r24
    2f36:	41 c1       	rjmp	.+642    	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_9     :
		CLEAR_BIT(TCCR1A,WGM10);
    2f38:	af e4       	ldi	r26, 0x4F	; 79
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	ef e4       	ldi	r30, 0x4F	; 79
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	8e 7f       	andi	r24, 0xFE	; 254
    2f44:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    2f46:	af e4       	ldi	r26, 0x4F	; 79
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	ef e4       	ldi	r30, 0x4F	; 79
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	82 60       	ori	r24, 0x02	; 2
    2f52:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    2f54:	ae e4       	ldi	r26, 0x4E	; 78
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	ee e4       	ldi	r30, 0x4E	; 78
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	87 7f       	andi	r24, 0xF7	; 247
    2f60:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    2f62:	ae e4       	ldi	r26, 0x4E	; 78
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	ee e4       	ldi	r30, 0x4E	; 78
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	8f 7e       	andi	r24, 0xEF	; 239
    2f6e:	8c 93       	st	X, r24
    2f70:	24 c1       	rjmp	.+584    	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_10	  :
		SET_BIT(TCCR1A,WGM10);
    2f72:	af e4       	ldi	r26, 0x4F	; 79
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	ef e4       	ldi	r30, 0x4F	; 79
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	81 60       	ori	r24, 0x01	; 1
    2f7e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    2f80:	af e4       	ldi	r26, 0x4F	; 79
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	ef e4       	ldi	r30, 0x4F	; 79
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	82 60       	ori	r24, 0x02	; 2
    2f8c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    2f8e:	ae e4       	ldi	r26, 0x4E	; 78
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	ee e4       	ldi	r30, 0x4E	; 78
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	87 7f       	andi	r24, 0xF7	; 247
    2f9a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    2f9c:	ae e4       	ldi	r26, 0x4E	; 78
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	ee e4       	ldi	r30, 0x4E	; 78
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8f 7e       	andi	r24, 0xEF	; 239
    2fa8:	8c 93       	st	X, r24
    2faa:	07 c1       	rjmp	.+526    	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_FPWM_8	  :
		SET_BIT(TCCR1A,WGM10);
    2fac:	af e4       	ldi	r26, 0x4F	; 79
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	ef e4       	ldi	r30, 0x4F	; 79
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	81 60       	ori	r24, 0x01	; 1
    2fb8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    2fba:	af e4       	ldi	r26, 0x4F	; 79
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	ef e4       	ldi	r30, 0x4F	; 79
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	8d 7f       	andi	r24, 0xFD	; 253
    2fc6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    2fc8:	ae e4       	ldi	r26, 0x4E	; 78
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	ee e4       	ldi	r30, 0x4E	; 78
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	88 60       	ori	r24, 0x08	; 8
    2fd4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    2fd6:	ae e4       	ldi	r26, 0x4E	; 78
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	ee e4       	ldi	r30, 0x4E	; 78
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	8f 7e       	andi	r24, 0xEF	; 239
    2fe2:	8c 93       	st	X, r24
    2fe4:	ea c0       	rjmp	.+468    	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_FPWM_9	  :
		CLEAR_BIT(TCCR1A,WGM10);
    2fe6:	af e4       	ldi	r26, 0x4F	; 79
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	ef e4       	ldi	r30, 0x4F	; 79
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	8e 7f       	andi	r24, 0xFE	; 254
    2ff2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    2ff4:	af e4       	ldi	r26, 0x4F	; 79
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	ef e4       	ldi	r30, 0x4F	; 79
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	82 60       	ori	r24, 0x02	; 2
    3000:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    3002:	ae e4       	ldi	r26, 0x4E	; 78
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	ee e4       	ldi	r30, 0x4E	; 78
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	88 60       	ori	r24, 0x08	; 8
    300e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    3010:	ae e4       	ldi	r26, 0x4E	; 78
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	ee e4       	ldi	r30, 0x4E	; 78
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	8f 7e       	andi	r24, 0xEF	; 239
    301c:	8c 93       	st	X, r24
    301e:	cd c0       	rjmp	.+410    	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_FPWM_10	  :
		SET_BIT(TCCR1A,WGM10);
    3020:	af e4       	ldi	r26, 0x4F	; 79
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	ef e4       	ldi	r30, 0x4F	; 79
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	81 60       	ori	r24, 0x01	; 1
    302c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    302e:	af e4       	ldi	r26, 0x4F	; 79
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	ef e4       	ldi	r30, 0x4F	; 79
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	82 60       	ori	r24, 0x02	; 2
    303a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    303c:	ae e4       	ldi	r26, 0x4E	; 78
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	ee e4       	ldi	r30, 0x4E	; 78
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	88 60       	ori	r24, 0x08	; 8
    3048:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    304a:	ae e4       	ldi	r26, 0x4E	; 78
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	ee e4       	ldi	r30, 0x4E	; 78
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	8f 7e       	andi	r24, 0xEF	; 239
    3056:	8c 93       	st	X, r24
    3058:	b0 c0       	rjmp	.+352    	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_PF_ICR:
		CLEAR_BIT(TCCR1A,WGM10);
    305a:	af e4       	ldi	r26, 0x4F	; 79
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	ef e4       	ldi	r30, 0x4F	; 79
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	8e 7f       	andi	r24, 0xFE	; 254
    3066:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    3068:	af e4       	ldi	r26, 0x4F	; 79
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	ef e4       	ldi	r30, 0x4F	; 79
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	8d 7f       	andi	r24, 0xFD	; 253
    3074:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    3076:	ae e4       	ldi	r26, 0x4E	; 78
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	ee e4       	ldi	r30, 0x4E	; 78
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	87 7f       	andi	r24, 0xF7	; 247
    3082:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    3084:	ae e4       	ldi	r26, 0x4E	; 78
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	ee e4       	ldi	r30, 0x4E	; 78
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	80 61       	ori	r24, 0x10	; 16
    3090:	8c 93       	st	X, r24
    3092:	93 c0       	rjmp	.+294    	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_PF_OCR:
		SET_BIT(TCCR1A,WGM10);
    3094:	af e4       	ldi	r26, 0x4F	; 79
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	ef e4       	ldi	r30, 0x4F	; 79
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	81 60       	ori	r24, 0x01	; 1
    30a0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    30a2:	af e4       	ldi	r26, 0x4F	; 79
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	ef e4       	ldi	r30, 0x4F	; 79
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	8d 7f       	andi	r24, 0xFD	; 253
    30ae:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    30b0:	ae e4       	ldi	r26, 0x4E	; 78
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	ee e4       	ldi	r30, 0x4E	; 78
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	87 7f       	andi	r24, 0xF7	; 247
    30bc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    30be:	ae e4       	ldi	r26, 0x4E	; 78
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	ee e4       	ldi	r30, 0x4E	; 78
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	80 61       	ori	r24, 0x10	; 16
    30ca:	8c 93       	st	X, r24
    30cc:	76 c0       	rjmp	.+236    	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_P_ICR :
		CLEAR_BIT(TCCR1A,WGM10);
    30ce:	af e4       	ldi	r26, 0x4F	; 79
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	ef e4       	ldi	r30, 0x4F	; 79
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	8e 7f       	andi	r24, 0xFE	; 254
    30da:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    30dc:	af e4       	ldi	r26, 0x4F	; 79
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	ef e4       	ldi	r30, 0x4F	; 79
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	82 60       	ori	r24, 0x02	; 2
    30e8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    30ea:	ae e4       	ldi	r26, 0x4E	; 78
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	ee e4       	ldi	r30, 0x4E	; 78
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	87 7f       	andi	r24, 0xF7	; 247
    30f6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    30f8:	ae e4       	ldi	r26, 0x4E	; 78
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	ee e4       	ldi	r30, 0x4E	; 78
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	80 61       	ori	r24, 0x10	; 16
    3104:	8c 93       	st	X, r24
    3106:	59 c0       	rjmp	.+178    	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_P_OCR :
		SET_BIT(TCCR1A,WGM10);
    3108:	af e4       	ldi	r26, 0x4F	; 79
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	ef e4       	ldi	r30, 0x4F	; 79
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	81 60       	ori	r24, 0x01	; 1
    3114:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    3116:	af e4       	ldi	r26, 0x4F	; 79
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	ef e4       	ldi	r30, 0x4F	; 79
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	82 60       	ori	r24, 0x02	; 2
    3122:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    3124:	ae e4       	ldi	r26, 0x4E	; 78
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	ee e4       	ldi	r30, 0x4E	; 78
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	87 7f       	andi	r24, 0xF7	; 247
    3130:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    3132:	ae e4       	ldi	r26, 0x4E	; 78
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	ee e4       	ldi	r30, 0x4E	; 78
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	80 61       	ori	r24, 0x10	; 16
    313e:	8c 93       	st	X, r24
    3140:	3c c0       	rjmp	.+120    	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_FPWM_ICR  :
		CLEAR_BIT(TCCR1A,WGM10);
    3142:	af e4       	ldi	r26, 0x4F	; 79
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	ef e4       	ldi	r30, 0x4F	; 79
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	8e 7f       	andi	r24, 0xFE	; 254
    314e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    3150:	af e4       	ldi	r26, 0x4F	; 79
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	ef e4       	ldi	r30, 0x4F	; 79
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	82 60       	ori	r24, 0x02	; 2
    315c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    315e:	ae e4       	ldi	r26, 0x4E	; 78
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	ee e4       	ldi	r30, 0x4E	; 78
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	88 60       	ori	r24, 0x08	; 8
    316a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    316c:	ae e4       	ldi	r26, 0x4E	; 78
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	ee e4       	ldi	r30, 0x4E	; 78
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	80 61       	ori	r24, 0x10	; 16
    3178:	8c 93       	st	X, r24
    317a:	1f c0       	rjmp	.+62     	; 0x31ba <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_FPWM_OCR  :
		SET_BIT(TCCR1A,WGM10);
    317c:	af e4       	ldi	r26, 0x4F	; 79
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	ef e4       	ldi	r30, 0x4F	; 79
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	81 60       	ori	r24, 0x01	; 1
    3188:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    318a:	af e4       	ldi	r26, 0x4F	; 79
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	ef e4       	ldi	r30, 0x4F	; 79
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	82 60       	ori	r24, 0x02	; 2
    3196:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM12);
    3198:	af e4       	ldi	r26, 0x4F	; 79
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	ef e4       	ldi	r30, 0x4F	; 79
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	88 60       	ori	r24, 0x08	; 8
    31a4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM13);
    31a6:	af e4       	ldi	r26, 0x4F	; 79
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	ef e4       	ldi	r30, 0x4F	; 79
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	80 61       	ori	r24, 0x10	; 16
    31b2:	8c 93       	st	X, r24
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <PWM_xSetMode+0x388>
		break;
	default:
		return E_NOK;
    31b6:	1a 82       	std	Y+2, r1	; 0x02
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <PWM_xSetMode+0x38c>
		break;
	}
	return E_OK;
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	9a 83       	std	Y+2, r25	; 0x02
    31be:	8a 81       	ldd	r24, Y+2	; 0x02

}
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	cf 91       	pop	r28
    31ca:	df 91       	pop	r29
    31cc:	08 95       	ret

000031ce <PWM_xSetDutyCycle>:

Error_Status PWM_xSetDutyCycle(PWM_Channels Copy_xChannel,float32 Copy_f32DutyCycle)
{
    31ce:	df 93       	push	r29
    31d0:	cf 93       	push	r28
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	2a 97       	sbiw	r28, 0x0a	; 10
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	de bf       	out	0x3e, r29	; 62
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	cd bf       	out	0x3d, r28	; 61
    31e2:	8b 83       	std	Y+3, r24	; 0x03
    31e4:	4c 83       	std	Y+4, r20	; 0x04
    31e6:	5d 83       	std	Y+5, r21	; 0x05
    31e8:	6e 83       	std	Y+6, r22	; 0x06
    31ea:	7f 83       	std	Y+7, r23	; 0x07
	Copy_f32DutyCycle		=	Copy_f32DutyCycle/100;
    31ec:	6c 81       	ldd	r22, Y+4	; 0x04
    31ee:	7d 81       	ldd	r23, Y+5	; 0x05
    31f0:	8e 81       	ldd	r24, Y+6	; 0x06
    31f2:	9f 81       	ldd	r25, Y+7	; 0x07
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	48 ec       	ldi	r20, 0xC8	; 200
    31fa:	52 e4       	ldi	r21, 0x42	; 66
    31fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	8c 83       	std	Y+4, r24	; 0x04
    3206:	9d 83       	std	Y+5, r25	; 0x05
    3208:	ae 83       	std	Y+6, r26	; 0x06
    320a:	bf 83       	std	Y+7, r27	; 0x07
	uint16 u16PWM_RegVal	=	(uint16)(ICR1 * Copy_f32DutyCycle);
    320c:	e6 e4       	ldi	r30, 0x46	; 70
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	91 81       	ldd	r25, Z+1	; 0x01
    3214:	cc 01       	movw	r24, r24
    3216:	a0 e0       	ldi	r26, 0x00	; 0
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	2c 81       	ldd	r18, Y+4	; 0x04
    322c:	3d 81       	ldd	r19, Y+5	; 0x05
    322e:	4e 81       	ldd	r20, Y+6	; 0x06
    3230:	5f 81       	ldd	r21, Y+7	; 0x07
    3232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	9a 83       	std	Y+2, r25	; 0x02
    3248:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xChannel)
    324a:	8b 81       	ldd	r24, Y+3	; 0x03
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	3a 87       	std	Y+10, r19	; 0x0a
    3252:	29 87       	std	Y+9, r18	; 0x09
    3254:	89 85       	ldd	r24, Y+9	; 0x09
    3256:	9a 85       	ldd	r25, Y+10	; 0x0a
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	31 f0       	breq	.+12     	; 0x3268 <PWM_xSetDutyCycle+0x9a>
    325c:	29 85       	ldd	r18, Y+9	; 0x09
    325e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3260:	21 30       	cpi	r18, 0x01	; 1
    3262:	31 05       	cpc	r19, r1
    3264:	41 f0       	breq	.+16     	; 0x3276 <PWM_xSetDutyCycle+0xa8>
    3266:	0e c0       	rjmp	.+28     	; 0x3284 <PWM_xSetDutyCycle+0xb6>
	{
	case PWM_CH_1:
		OCR1A	=	u16PWM_RegVal;
    3268:	ea e4       	ldi	r30, 0x4A	; 74
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	91 83       	std	Z+1, r25	; 0x01
    3272:	80 83       	st	Z, r24
    3274:	09 c0       	rjmp	.+18     	; 0x3288 <PWM_xSetDutyCycle+0xba>
		break;
	case PWM_CH_2:
		OCR1B	=	u16PWM_RegVal;
    3276:	e8 e4       	ldi	r30, 0x48	; 72
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	9a 81       	ldd	r25, Y+2	; 0x02
    327e:	91 83       	std	Z+1, r25	; 0x01
    3280:	80 83       	st	Z, r24
    3282:	02 c0       	rjmp	.+4      	; 0x3288 <PWM_xSetDutyCycle+0xba>
		break;
	default:
		return E_NOK;
    3284:	18 86       	std	Y+8, r1	; 0x08
    3286:	02 c0       	rjmp	.+4      	; 0x328c <PWM_xSetDutyCycle+0xbe>
		break;
	}
	return E_OK;
    3288:	31 e0       	ldi	r19, 0x01	; 1
    328a:	38 87       	std	Y+8, r19	; 0x08
    328c:	88 85       	ldd	r24, Y+8	; 0x08
}
    328e:	2a 96       	adiw	r28, 0x0a	; 10
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	f8 94       	cli
    3294:	de bf       	out	0x3e, r29	; 62
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <PWM_vSetFPWM_Freq>:

void PWM_vSetFPWM_Freq(uint16 Copy_u16Freq)
{
    32a0:	0f 93       	push	r16
    32a2:	1f 93       	push	r17
    32a4:	df 93       	push	r29
    32a6:	cf 93       	push	r28
    32a8:	00 d0       	rcall	.+0      	; 0x32aa <PWM_vSetFPWM_Freq+0xa>
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	9a 83       	std	Y+2, r25	; 0x02
    32b0:	89 83       	std	Y+1, r24	; 0x01
	/*The PWM resolution for fast PWM can be fixed to 8-bit, 9-bit, or 10-bit, or defined by either ICR1
	or OCR1A*/
	ICR1=(uint16)(F_CPU/(Copy_u16Freq*Global_Prescaler))-1;
    32b2:	06 e4       	ldi	r16, 0x46	; 70
    32b4:	10 e0       	ldi	r17, 0x00	; 0
    32b6:	20 91 8e 04 	lds	r18, 0x048E
    32ba:	30 91 8f 04 	lds	r19, 0x048F
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	9a 81       	ldd	r25, Y+2	; 0x02
    32c2:	ac 01       	movw	r20, r24
    32c4:	24 9f       	mul	r18, r20
    32c6:	c0 01       	movw	r24, r0
    32c8:	25 9f       	mul	r18, r21
    32ca:	90 0d       	add	r25, r0
    32cc:	34 9f       	mul	r19, r20
    32ce:	90 0d       	add	r25, r0
    32d0:	11 24       	eor	r1, r1
    32d2:	9c 01       	movw	r18, r24
    32d4:	40 e0       	ldi	r20, 0x00	; 0
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	92 e1       	ldi	r25, 0x12	; 18
    32dc:	aa e7       	ldi	r26, 0x7A	; 122
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	0e 94 3e 22 	call	0x447c	; 0x447c <__udivmodsi4>
    32e8:	da 01       	movw	r26, r20
    32ea:	c9 01       	movw	r24, r18
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	f8 01       	movw	r30, r16
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	80 83       	st	Z, r24
	u16Current_Freq	=	Copy_u16Freq;
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	9a 81       	ldd	r25, Y+2	; 0x02
    32f8:	90 93 91 04 	sts	0x0491, r25
    32fc:	80 93 90 04 	sts	0x0490, r24
}
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	1f 91       	pop	r17
    330a:	0f 91       	pop	r16
    330c:	08 95       	ret

0000330e <PWM_vSetPWM_Freq>:

void PWM_vSetPWM_Freq(uint16 Copy_u16Freq)
{
    330e:	0f 93       	push	r16
    3310:	1f 93       	push	r17
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	00 d0       	rcall	.+0      	; 0x3318 <PWM_vSetPWM_Freq+0xa>
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	9a 83       	std	Y+2, r25	; 0x02
    331e:	89 83       	std	Y+1, r24	; 0x01
	/*The PWM resolution for Phase correct PWM can be fixed to 8-bit, 9-bit, or 10-bit, or defined by either ICR1
	or OCR1A*/
	ICR1=(uint16)(F_CPU/(Copy_u16Freq*Global_Prescaler*2));
    3320:	06 e4       	ldi	r16, 0x46	; 70
    3322:	10 e0       	ldi	r17, 0x00	; 0
    3324:	20 91 8e 04 	lds	r18, 0x048E
    3328:	30 91 8f 04 	lds	r19, 0x048F
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	9a 81       	ldd	r25, Y+2	; 0x02
    3330:	ac 01       	movw	r20, r24
    3332:	24 9f       	mul	r18, r20
    3334:	c0 01       	movw	r24, r0
    3336:	25 9f       	mul	r18, r21
    3338:	90 0d       	add	r25, r0
    333a:	34 9f       	mul	r19, r20
    333c:	90 0d       	add	r25, r0
    333e:	11 24       	eor	r1, r1
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	9c 01       	movw	r18, r24
    3346:	40 e0       	ldi	r20, 0x00	; 0
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	92 e1       	ldi	r25, 0x12	; 18
    334e:	aa e7       	ldi	r26, 0x7A	; 122
    3350:	b0 e0       	ldi	r27, 0x00	; 0
    3352:	bc 01       	movw	r22, r24
    3354:	cd 01       	movw	r24, r26
    3356:	0e 94 3e 22 	call	0x447c	; 0x447c <__udivmodsi4>
    335a:	da 01       	movw	r26, r20
    335c:	c9 01       	movw	r24, r18
    335e:	f8 01       	movw	r30, r16
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	80 83       	st	Z, r24
	u16Current_Freq	=	Copy_u16Freq;
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	9a 81       	ldd	r25, Y+2	; 0x02
    3368:	90 93 91 04 	sts	0x0491, r25
    336c:	80 93 90 04 	sts	0x0490, r24
}
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	1f 91       	pop	r17
    337a:	0f 91       	pop	r16
    337c:	08 95       	ret

0000337e <PWM_xSet_TONus>:


Error_Status PWM_xSet_TONus(uint16 Copy_u16Time,PWM_Channels Copy_xChannel)
{
    337e:	ef 92       	push	r14
    3380:	ff 92       	push	r15
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	28 97       	sbiw	r28, 0x08	; 8
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	9c 83       	std	Y+4, r25	; 0x04
    339c:	8b 83       	std	Y+3, r24	; 0x03
    339e:	6d 83       	std	Y+5, r22	; 0x05
	uint16 Local_u16Val;
	Local_u16Val =(uint16)(Copy_u16Time/((Global_Prescaler*1000000)/F_CPU));
    33a0:	8b 81       	ldd	r24, Y+3	; 0x03
    33a2:	9c 81       	ldd	r25, Y+4	; 0x04
    33a4:	7c 01       	movw	r14, r24
    33a6:	00 e0       	ldi	r16, 0x00	; 0
    33a8:	10 e0       	ldi	r17, 0x00	; 0
    33aa:	80 91 8e 04 	lds	r24, 0x048E
    33ae:	90 91 8f 04 	lds	r25, 0x048F
    33b2:	cc 01       	movw	r24, r24
    33b4:	a0 e0       	ldi	r26, 0x00	; 0
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	20 e4       	ldi	r18, 0x40	; 64
    33ba:	32 e4       	ldi	r19, 0x42	; 66
    33bc:	4f e0       	ldi	r20, 0x0F	; 15
    33be:	50 e0       	ldi	r21, 0x00	; 0
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	0e 94 1f 22 	call	0x443e	; 0x443e <__mulsi3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	32 e1       	ldi	r19, 0x12	; 18
    33d0:	4a e7       	ldi	r20, 0x7A	; 122
    33d2:	50 e0       	ldi	r21, 0x00	; 0
    33d4:	bc 01       	movw	r22, r24
    33d6:	cd 01       	movw	r24, r26
    33d8:	0e 94 3e 22 	call	0x447c	; 0x447c <__udivmodsi4>
    33dc:	da 01       	movw	r26, r20
    33de:	c9 01       	movw	r24, r18
    33e0:	9c 01       	movw	r18, r24
    33e2:	ad 01       	movw	r20, r26
    33e4:	c8 01       	movw	r24, r16
    33e6:	b7 01       	movw	r22, r14
    33e8:	0e 94 3e 22 	call	0x447c	; 0x447c <__udivmodsi4>
    33ec:	da 01       	movw	r26, r20
    33ee:	c9 01       	movw	r24, r18
    33f0:	9a 83       	std	Y+2, r25	; 0x02
    33f2:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_xChannel)
    33f4:	8d 81       	ldd	r24, Y+5	; 0x05
    33f6:	28 2f       	mov	r18, r24
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	38 87       	std	Y+8, r19	; 0x08
    33fc:	2f 83       	std	Y+7, r18	; 0x07
    33fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3400:	98 85       	ldd	r25, Y+8	; 0x08
    3402:	00 97       	sbiw	r24, 0x00	; 0
    3404:	31 f0       	breq	.+12     	; 0x3412 <PWM_xSet_TONus+0x94>
    3406:	2f 81       	ldd	r18, Y+7	; 0x07
    3408:	38 85       	ldd	r19, Y+8	; 0x08
    340a:	21 30       	cpi	r18, 0x01	; 1
    340c:	31 05       	cpc	r19, r1
    340e:	41 f0       	breq	.+16     	; 0x3420 <PWM_xSet_TONus+0xa2>
    3410:	0e c0       	rjmp	.+28     	; 0x342e <PWM_xSet_TONus+0xb0>
	{
	case PWM_CH_1:
		OCR1A	=	Local_u16Val;
    3412:	ea e4       	ldi	r30, 0x4A	; 74
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	9a 81       	ldd	r25, Y+2	; 0x02
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
    341e:	09 c0       	rjmp	.+18     	; 0x3432 <PWM_xSet_TONus+0xb4>
		break;
	case PWM_CH_2:
		OCR1B	=	Local_u16Val;
    3420:	e8 e4       	ldi	r30, 0x48	; 72
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	9a 81       	ldd	r25, Y+2	; 0x02
    3428:	91 83       	std	Z+1, r25	; 0x01
    342a:	80 83       	st	Z, r24
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <PWM_xSet_TONus+0xb4>
		break;
	default:
		return E_NOK;
    342e:	1e 82       	std	Y+6, r1	; 0x06
    3430:	02 c0       	rjmp	.+4      	; 0x3436 <PWM_xSet_TONus+0xb8>
		break;
	}
	return E_OK;
    3432:	31 e0       	ldi	r19, 0x01	; 1
    3434:	3e 83       	std	Y+6, r19	; 0x06
    3436:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3438:	28 96       	adiw	r28, 0x08	; 8
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	1f 91       	pop	r17
    344a:	0f 91       	pop	r16
    344c:	ff 90       	pop	r15
    344e:	ef 90       	pop	r14
    3450:	08 95       	ret

00003452 <PWM_xSetValReg>:

Error_Status PWM_xSetValReg(PWM_Channels Copy_xChannel,uint16 Copy_u16Val)
{
    3452:	df 93       	push	r29
    3454:	cf 93       	push	r28
    3456:	00 d0       	rcall	.+0      	; 0x3458 <PWM_xSetValReg+0x6>
    3458:	00 d0       	rcall	.+0      	; 0x345a <PWM_xSetValReg+0x8>
    345a:	00 d0       	rcall	.+0      	; 0x345c <PWM_xSetValReg+0xa>
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	89 83       	std	Y+1, r24	; 0x01
    3462:	7b 83       	std	Y+3, r23	; 0x03
    3464:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_xChannel)
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	28 2f       	mov	r18, r24
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	3e 83       	std	Y+6, r19	; 0x06
    346e:	2d 83       	std	Y+5, r18	; 0x05
    3470:	8d 81       	ldd	r24, Y+5	; 0x05
    3472:	9e 81       	ldd	r25, Y+6	; 0x06
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	31 f0       	breq	.+12     	; 0x3484 <PWM_xSetValReg+0x32>
    3478:	2d 81       	ldd	r18, Y+5	; 0x05
    347a:	3e 81       	ldd	r19, Y+6	; 0x06
    347c:	21 30       	cpi	r18, 0x01	; 1
    347e:	31 05       	cpc	r19, r1
    3480:	41 f0       	breq	.+16     	; 0x3492 <PWM_xSetValReg+0x40>
    3482:	0e c0       	rjmp	.+28     	; 0x34a0 <PWM_xSetValReg+0x4e>
		{
		case PWM_CH_1:
			OCR1A	=	Copy_u16Val;
    3484:	ea e4       	ldi	r30, 0x4A	; 74
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	9b 81       	ldd	r25, Y+3	; 0x03
    348c:	91 83       	std	Z+1, r25	; 0x01
    348e:	80 83       	st	Z, r24
    3490:	09 c0       	rjmp	.+18     	; 0x34a4 <PWM_xSetValReg+0x52>
			break;
		case PWM_CH_2:
			OCR1B	=	Copy_u16Val;
    3492:	e8 e4       	ldi	r30, 0x48	; 72
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	8a 81       	ldd	r24, Y+2	; 0x02
    3498:	9b 81       	ldd	r25, Y+3	; 0x03
    349a:	91 83       	std	Z+1, r25	; 0x01
    349c:	80 83       	st	Z, r24
    349e:	02 c0       	rjmp	.+4      	; 0x34a4 <PWM_xSetValReg+0x52>
			break;
		default:
			return E_NOK;
    34a0:	1c 82       	std	Y+4, r1	; 0x04
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <PWM_xSetValReg+0x56>
			break;
		}
		return E_OK;
    34a4:	31 e0       	ldi	r19, 0x01	; 1
    34a6:	3c 83       	std	Y+4, r19	; 0x04
    34a8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    34aa:	26 96       	adiw	r28, 0x06	; 6
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	cf 91       	pop	r28
    34b8:	df 91       	pop	r29
    34ba:	08 95       	ret

000034bc <TempS_vInit>:
/* **************************************************************************** */
static float32 TempValue;
/* **************************************************************************** */

void TempS_vInit(void)
{
    34bc:	df 93       	push	r29
    34be:	cf 93       	push	r28
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
	/* Initial value for temperature */
	TempValue	=	0;
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	a0 e0       	ldi	r26, 0x00	; 0
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	80 93 92 04 	sts	0x0492, r24
    34d0:	90 93 93 04 	sts	0x0493, r25
    34d4:	a0 93 94 04 	sts	0x0494, r26
    34d8:	b0 93 95 04 	sts	0x0495, r27
}
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <TempS_f32GetTemp>:

/* **************************************************************************** */

float32 TempS_f32GetTemp(void)
{
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
	return TempValue;
    34ea:	80 91 92 04 	lds	r24, 0x0492
    34ee:	90 91 93 04 	lds	r25, 0x0493
    34f2:	a0 91 94 04 	lds	r26, 0x0494
    34f6:	b0 91 95 04 	lds	r27, 0x0495
}
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	cf 91       	pop	r28
    3500:	df 91       	pop	r29
    3502:	08 95       	ret

00003504 <TempS_vUpdate>:

/* ***************************************************************************** */
/*Temperature sensor update*/
/* ***************************************************************************** */
void TempS_vUpdate(void)
{
    3504:	df 93       	push	r29
    3506:	cf 93       	push	r28
    3508:	00 d0       	rcall	.+0      	; 0x350a <TempS_vUpdate+0x6>
    350a:	00 d0       	rcall	.+0      	; 0x350c <TempS_vUpdate+0x8>
    350c:	00 d0       	rcall	.+0      	; 0x350e <TempS_vUpdate+0xa>
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
	uint16 Local_u16RecvData	=	0;
    3512:	1e 82       	std	Y+6, r1	; 0x06
    3514:	1d 82       	std	Y+5, r1	; 0x05
	float32 Local_f32Voltage	=	0;
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	a0 e0       	ldi	r26, 0x00	; 0
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	89 83       	std	Y+1, r24	; 0x01
    3520:	9a 83       	std	Y+2, r25	; 0x02
    3522:	ab 83       	std	Y+3, r26	; 0x03
    3524:	bc 83       	std	Y+4, r27	; 0x04
	/*Measure the current temperature*/
	 ADC_xReadSynch(TEMPSENSE_ADC_CHANNEL, &Local_u16RecvData);
    3526:	9e 01       	movw	r18, r28
    3528:	2b 5f       	subi	r18, 0xFB	; 251
    352a:	3f 4f       	sbci	r19, 0xFF	; 255
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	b9 01       	movw	r22, r18
    3530:	0e 94 8b 09 	call	0x1316	; 0x1316 <ADC_xReadSynch>
	 /* Convert the reading into milli voltage */
	 Local_f32Voltage = (float32)Local_u16RecvData*(TEMPSENSE_VCC_MV/TEMPSENSE_ADC_RESOLUTION);
    3534:	8d 81       	ldd	r24, Y+5	; 0x05
    3536:	9e 81       	ldd	r25, Y+6	; 0x06
    3538:	cc 01       	movw	r24, r24
    353a:	a0 e0       	ldi	r26, 0x00	; 0
    353c:	b0 e0       	ldi	r27, 0x00	; 0
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	bc 01       	movw	r22, r24
    354c:	cd 01       	movw	r24, r26
    354e:	2a e1       	ldi	r18, 0x1A	; 26
    3550:	37 e6       	ldi	r19, 0x67	; 103
    3552:	4c e9       	ldi	r20, 0x9C	; 156
    3554:	50 e4       	ldi	r21, 0x40	; 64
    3556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	89 83       	std	Y+1, r24	; 0x01
    3560:	9a 83       	std	Y+2, r25	; 0x02
    3562:	ab 83       	std	Y+3, r26	; 0x03
    3564:	bc 83       	std	Y+4, r27	; 0x04

	/* Divide voltage by 10mv the 2 to get accurate temperature degree */
	TempValue= (Local_f32Voltage/10)/2;
    3566:	69 81       	ldd	r22, Y+1	; 0x01
    3568:	7a 81       	ldd	r23, Y+2	; 0x02
    356a:	8b 81       	ldd	r24, Y+3	; 0x03
    356c:	9c 81       	ldd	r25, Y+4	; 0x04
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	40 e2       	ldi	r20, 0x20	; 32
    3574:	51 e4       	ldi	r21, 0x41	; 65
    3576:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	bc 01       	movw	r22, r24
    3580:	cd 01       	movw	r24, r26
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e0       	ldi	r20, 0x00	; 0
    3588:	50 e4       	ldi	r21, 0x40	; 64
    358a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	80 93 92 04 	sts	0x0492, r24
    3596:	90 93 93 04 	sts	0x0493, r25
    359a:	a0 93 94 04 	sts	0x0494, r26
    359e:	b0 93 95 04 	sts	0x0495, r27
}
    35a2:	26 96       	adiw	r28, 0x06	; 6
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	08 95       	ret

000035b4 <USART_xInit>:

#include "USART_interface.h"
#include "USART_private.h"

Error_Status USART_xInit(USART_TypeDef USARTx,USART_ConfigType * configType_PTr)
{
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <USART_xInit+0x6>
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <USART_xInit+0x8>
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	8a 83       	std	Y+2, r24	; 0x02
    35c2:	7c 83       	std	Y+4, r23	; 0x04
    35c4:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status Local_xErrorState;

	/* Clear URSSEL bit to write on UBRRH register */
	CLEAR_BIT(UCSRC,URSEL);
    35c6:	a0 e4       	ldi	r26, 0x40	; 64
    35c8:	b0 e0       	ldi	r27, 0x00	; 0
    35ca:	e0 e4       	ldi	r30, 0x40	; 64
    35cc:	f0 e0       	ldi	r31, 0x00	; 0
    35ce:	80 81       	ld	r24, Z
    35d0:	8f 77       	andi	r24, 0x7F	; 127
    35d2:	8c 93       	st	X, r24

	/* Set baud rate */
	Local_xErrorState	=	USART_xSetBaudRate(USARTx,configType_PTr->Speed,configType_PTr->BaudRate);
    35d4:	eb 81       	ldd	r30, Y+3	; 0x03
    35d6:	fc 81       	ldd	r31, Y+4	; 0x04
    35d8:	97 81       	ldd	r25, Z+7	; 0x07
    35da:	eb 81       	ldd	r30, Y+3	; 0x03
    35dc:	fc 81       	ldd	r31, Y+4	; 0x04
    35de:	20 81       	ld	r18, Z
    35e0:	31 81       	ldd	r19, Z+1	; 0x01
    35e2:	8a 81       	ldd	r24, Y+2	; 0x02
    35e4:	69 2f       	mov	r22, r25
    35e6:	a9 01       	movw	r20, r18
    35e8:	0e 94 38 1c 	call	0x3870	; 0x3870 <USART_xSetBaudRate>
    35ec:	89 83       	std	Y+1, r24	; 0x01

	/*set URSEL bit to write on UCSRC register*/
	SET_BIT(UCSRC,URSEL);
    35ee:	a0 e4       	ldi	r26, 0x40	; 64
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	e0 e4       	ldi	r30, 0x40	; 64
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	80 81       	ld	r24, Z
    35f8:	80 68       	ori	r24, 0x80	; 128
    35fa:	8c 93       	st	X, r24

	/* Set stop bits */
	Local_xErrorState	=	USART_xSetStopBits(USARTx,configType_PTr->StopBit);
    35fc:	eb 81       	ldd	r30, Y+3	; 0x03
    35fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3600:	95 81       	ldd	r25, Z+5	; 0x05
    3602:	8a 81       	ldd	r24, Y+2	; 0x02
    3604:	69 2f       	mov	r22, r25
    3606:	0e 94 2e 1b 	call	0x365c	; 0x365c <USART_xSetStopBits>
    360a:	89 83       	std	Y+1, r24	; 0x01

	/* Set parity bit */
	Local_xErrorState	=	USART_xSetParityBit(USARTx,configType_PTr->Parity);
    360c:	eb 81       	ldd	r30, Y+3	; 0x03
    360e:	fc 81       	ldd	r31, Y+4	; 0x04
    3610:	94 81       	ldd	r25, Z+4	; 0x04
    3612:	8a 81       	ldd	r24, Y+2	; 0x02
    3614:	69 2f       	mov	r22, r25
    3616:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <USART_xSetParityBit>
    361a:	89 83       	std	Y+1, r24	; 0x01

	/* Set data size */
	Local_xErrorState	=	USART_xSetDataSize(USARTx,configType_PTr->DataSize);
    361c:	eb 81       	ldd	r30, Y+3	; 0x03
    361e:	fc 81       	ldd	r31, Y+4	; 0x04
    3620:	93 81       	ldd	r25, Z+3	; 0x03
    3622:	8a 81       	ldd	r24, Y+2	; 0x02
    3624:	69 2f       	mov	r22, r25
    3626:	0e 94 b3 1b 	call	0x3766	; 0x3766 <USART_xSetDataSize>
    362a:	89 83       	std	Y+1, r24	; 0x01

	/* Set USART Interrupt state */
	Local_xErrorState	=	USART_xSetInterrupt(USARTx,configType_PTr->Interrupt);
    362c:	eb 81       	ldd	r30, Y+3	; 0x03
    362e:	fc 81       	ldd	r31, Y+4	; 0x04
    3630:	92 81       	ldd	r25, Z+2	; 0x02
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	69 2f       	mov	r22, r25
    3636:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <USART_xSetInterrupt>
    363a:	89 83       	std	Y+1, r24	; 0x01

	/* Set Transmission state -> Enable USART */
	Local_xErrorState	=	USART_xSetTransState(USARTx,configType_PTr->TransState);
    363c:	eb 81       	ldd	r30, Y+3	; 0x03
    363e:	fc 81       	ldd	r31, Y+4	; 0x04
    3640:	90 85       	ldd	r25, Z+8	; 0x08
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	69 2f       	mov	r22, r25
    3646:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <USART_xSetTransState>
    364a:	89 83       	std	Y+1, r24	; 0x01

	return Local_xErrorState;
    364c:	89 81       	ldd	r24, Y+1	; 0x01
}
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	cf 91       	pop	r28
    3658:	df 91       	pop	r29
    365a:	08 95       	ret

0000365c <USART_xSetStopBits>:



Error_Status USART_xSetStopBits(USART_TypeDef USARTx,USART_StopBit_t Copy_xStopBits)
{
    365c:	df 93       	push	r29
    365e:	cf 93       	push	r28
    3660:	00 d0       	rcall	.+0      	; 0x3662 <USART_xSetStopBits+0x6>
    3662:	00 d0       	rcall	.+0      	; 0x3664 <USART_xSetStopBits+0x8>
    3664:	0f 92       	push	r0
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	89 83       	std	Y+1, r24	; 0x01
    366c:	6a 83       	std	Y+2, r22	; 0x02
	if(USART1	==	USARTx)
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	81 30       	cpi	r24, 0x01	; 1
    3672:	81 f5       	brne	.+96     	; 0x36d4 <USART_xSetStopBits+0x78>
	{
		/*set URSEL bit to write on UCSRC register*/
		SET_BIT(UCSRC,URSEL);
    3674:	a0 e4       	ldi	r26, 0x40	; 64
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	e0 e4       	ldi	r30, 0x40	; 64
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	80 81       	ld	r24, Z
    367e:	80 68       	ori	r24, 0x80	; 128
    3680:	8c 93       	st	X, r24
		switch(Copy_xStopBits)
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
    3684:	28 2f       	mov	r18, r24
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	3d 83       	std	Y+5, r19	; 0x05
    368a:	2c 83       	std	Y+4, r18	; 0x04
    368c:	8c 81       	ldd	r24, Y+4	; 0x04
    368e:	9d 81       	ldd	r25, Y+5	; 0x05
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	31 f0       	breq	.+12     	; 0x36a0 <USART_xSetStopBits+0x44>
    3694:	2c 81       	ldd	r18, Y+4	; 0x04
    3696:	3d 81       	ldd	r19, Y+5	; 0x05
    3698:	21 30       	cpi	r18, 0x01	; 1
    369a:	31 05       	cpc	r19, r1
    369c:	49 f0       	breq	.+18     	; 0x36b0 <USART_xSetStopBits+0x54>
    369e:	10 c0       	rjmp	.+32     	; 0x36c0 <USART_xSetStopBits+0x64>
		{
		case USART_ONE_STOP_BIT:
			CLEAR_BIT(UCSRC,USBS);
    36a0:	a0 e4       	ldi	r26, 0x40	; 64
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	e0 e4       	ldi	r30, 0x40	; 64
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	87 7f       	andi	r24, 0xF7	; 247
    36ac:	8c 93       	st	X, r24
    36ae:	0f c0       	rjmp	.+30     	; 0x36ce <USART_xSetStopBits+0x72>
			break;
		case USART_TWO_STOP_BITS:
			SET_BIT(UCSRC,USBS);
    36b0:	a0 e4       	ldi	r26, 0x40	; 64
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	e0 e4       	ldi	r30, 0x40	; 64
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	88 60       	ori	r24, 0x08	; 8
    36bc:	8c 93       	st	X, r24
    36be:	07 c0       	rjmp	.+14     	; 0x36ce <USART_xSetStopBits+0x72>
			break;
		default:
			/* Default is one stop bit */
			CLEAR_BIT(UCSRC,USBS);
    36c0:	a0 e4       	ldi	r26, 0x40	; 64
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	e0 e4       	ldi	r30, 0x40	; 64
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	80 81       	ld	r24, Z
    36ca:	87 7f       	andi	r24, 0xF7	; 247
    36cc:	8c 93       	st	X, r24
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
    36ce:	31 e0       	ldi	r19, 0x01	; 1
    36d0:	3b 83       	std	Y+3, r19	; 0x03
    36d2:	01 c0       	rjmp	.+2      	; 0x36d6 <USART_xSetStopBits+0x7a>

		}
	}
	else
	{
		return E_NOK;
    36d4:	1b 82       	std	Y+3, r1	; 0x03
    36d6:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return E_OK;
}
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	cf 91       	pop	r28
    36e4:	df 91       	pop	r29
    36e6:	08 95       	ret

000036e8 <USART_xSetParityBit>:

Error_Status USART_xSetParityBit(USART_TypeDef USARTx,USART_Parity_t Copy_xParity)
{
    36e8:	df 93       	push	r29
    36ea:	cf 93       	push	r28
    36ec:	00 d0       	rcall	.+0      	; 0x36ee <USART_xSetParityBit+0x6>
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <USART_xSetParityBit+0x8>
    36f0:	0f 92       	push	r0
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
    36f6:	89 83       	std	Y+1, r24	; 0x01
    36f8:	6a 83       	std	Y+2, r22	; 0x02
	if(USART1	==	USARTx)
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	81 30       	cpi	r24, 0x01	; 1
    36fe:	49 f5       	brne	.+82     	; 0x3752 <USART_xSetParityBit+0x6a>
	{
		switch(Copy_xParity)
    3700:	8a 81       	ldd	r24, Y+2	; 0x02
    3702:	28 2f       	mov	r18, r24
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	3d 83       	std	Y+5, r19	; 0x05
    3708:	2c 83       	std	Y+4, r18	; 0x04
    370a:	8c 81       	ldd	r24, Y+4	; 0x04
    370c:	9d 81       	ldd	r25, Y+5	; 0x05
    370e:	81 30       	cpi	r24, 0x01	; 1
    3710:	91 05       	cpc	r25, r1
    3712:	71 f0       	breq	.+28     	; 0x3730 <USART_xSetParityBit+0x48>
    3714:	2c 81       	ldd	r18, Y+4	; 0x04
    3716:	3d 81       	ldd	r19, Y+5	; 0x05
    3718:	22 30       	cpi	r18, 0x02	; 2
    371a:	31 05       	cpc	r19, r1
    371c:	71 f0       	breq	.+28     	; 0x373a <USART_xSetParityBit+0x52>
    371e:	8c 81       	ldd	r24, Y+4	; 0x04
    3720:	9d 81       	ldd	r25, Y+5	; 0x05
    3722:	00 97       	sbiw	r24, 0x00	; 0
    3724:	79 f4       	brne	.+30     	; 0x3744 <USART_xSetParityBit+0x5c>
		{
		case USART_PARITY_OFF:
			UCSRC = (1<<URSEL)&~(1<<UPM0)&~(1<<UPM1);
    3726:	e0 e4       	ldi	r30, 0x40	; 64
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 e8       	ldi	r24, 0x80	; 128
    372c:	80 83       	st	Z, r24
    372e:	0e c0       	rjmp	.+28     	; 0x374c <USART_xSetParityBit+0x64>
			break;
		case USART_ODD_PARITY:
			UCSRC = (1<<URSEL)|(1<<UPM0);
    3730:	e0 e4       	ldi	r30, 0x40	; 64
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 e9       	ldi	r24, 0x90	; 144
    3736:	80 83       	st	Z, r24
    3738:	09 c0       	rjmp	.+18     	; 0x374c <USART_xSetParityBit+0x64>
			break;
		case USART_EVEN_PARITY:
			UCSRC = (1<<URSEL)|(1<<UPM0)|(1<<UPM1);
    373a:	e0 e4       	ldi	r30, 0x40	; 64
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	80 eb       	ldi	r24, 0xB0	; 176
    3740:	80 83       	st	Z, r24
    3742:	04 c0       	rjmp	.+8      	; 0x374c <USART_xSetParityBit+0x64>
			break;
		default:
			UCSRC = (1<<URSEL)&~(1<<UPM0)&~(1<<UPM1);
    3744:	e0 e4       	ldi	r30, 0x40	; 64
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	80 e8       	ldi	r24, 0x80	; 128
    374a:	80 83       	st	Z, r24
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
    374c:	91 e0       	ldi	r25, 0x01	; 1
    374e:	9b 83       	std	Y+3, r25	; 0x03
    3750:	01 c0       	rjmp	.+2      	; 0x3754 <USART_xSetParityBit+0x6c>
			break;
		}
	}
	else
	{
		return E_NOK;
    3752:	1b 82       	std	Y+3, r1	; 0x03
    3754:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return E_OK;
}
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <USART_xSetDataSize>:

Error_Status USART_xSetDataSize(USART_TypeDef USARTx,USART_DataSize_t Copy_xDataSize)
{
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	00 d0       	rcall	.+0      	; 0x376c <USART_xSetDataSize+0x6>
    376c:	00 d0       	rcall	.+0      	; 0x376e <USART_xSetDataSize+0x8>
    376e:	0f 92       	push	r0
    3770:	cd b7       	in	r28, 0x3d	; 61
    3772:	de b7       	in	r29, 0x3e	; 62
    3774:	89 83       	std	Y+1, r24	; 0x01
    3776:	6a 83       	std	Y+2, r22	; 0x02
	if(USART1	==	USARTx)
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	81 30       	cpi	r24, 0x01	; 1
    377c:	09 f0       	breq	.+2      	; 0x3780 <USART_xSetDataSize+0x1a>
    377e:	6e c0       	rjmp	.+220    	; 0x385c <USART_xSetDataSize+0xf6>
	{
		/*set URSEL bit to write on UCSRC register*/
		SET_BIT(UCSRC,URSEL);
    3780:	a0 e4       	ldi	r26, 0x40	; 64
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	e0 e4       	ldi	r30, 0x40	; 64
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	80 81       	ld	r24, Z
    378a:	80 68       	ori	r24, 0x80	; 128
    378c:	8c 93       	st	X, r24

		switch(Copy_xDataSize)
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	28 2f       	mov	r18, r24
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	3d 83       	std	Y+5, r19	; 0x05
    3796:	2c 83       	std	Y+4, r18	; 0x04
    3798:	8c 81       	ldd	r24, Y+4	; 0x04
    379a:	9d 81       	ldd	r25, Y+5	; 0x05
    379c:	82 30       	cpi	r24, 0x02	; 2
    379e:	91 05       	cpc	r25, r1
    37a0:	59 f1       	breq	.+86     	; 0x37f8 <USART_xSetDataSize+0x92>
    37a2:	2c 81       	ldd	r18, Y+4	; 0x04
    37a4:	3d 81       	ldd	r19, Y+5	; 0x05
    37a6:	23 30       	cpi	r18, 0x03	; 3
    37a8:	31 05       	cpc	r19, r1
    37aa:	54 f4       	brge	.+20     	; 0x37c0 <USART_xSetDataSize+0x5a>
    37ac:	8c 81       	ldd	r24, Y+4	; 0x04
    37ae:	9d 81       	ldd	r25, Y+5	; 0x05
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	89 f0       	breq	.+34     	; 0x37d6 <USART_xSetDataSize+0x70>
    37b4:	2c 81       	ldd	r18, Y+4	; 0x04
    37b6:	3d 81       	ldd	r19, Y+5	; 0x05
    37b8:	21 30       	cpi	r18, 0x01	; 1
    37ba:	31 05       	cpc	r19, r1
    37bc:	89 f0       	breq	.+34     	; 0x37e0 <USART_xSetDataSize+0x7a>
    37be:	40 c0       	rjmp	.+128    	; 0x3840 <USART_xSetDataSize+0xda>
    37c0:	8c 81       	ldd	r24, Y+4	; 0x04
    37c2:	9d 81       	ldd	r25, Y+5	; 0x05
    37c4:	83 30       	cpi	r24, 0x03	; 3
    37c6:	91 05       	cpc	r25, r1
    37c8:	19 f1       	breq	.+70     	; 0x3810 <USART_xSetDataSize+0xaa>
    37ca:	2c 81       	ldd	r18, Y+4	; 0x04
    37cc:	3d 81       	ldd	r19, Y+5	; 0x05
    37ce:	24 30       	cpi	r18, 0x04	; 4
    37d0:	31 05       	cpc	r19, r1
    37d2:	51 f1       	breq	.+84     	; 0x3828 <USART_xSetDataSize+0xc2>
    37d4:	35 c0       	rjmp	.+106    	; 0x3840 <USART_xSetDataSize+0xda>
		{
		case USART_FIVE_BITS:
			UCSRC = (1<<URSEL)&~(1<<UCSZ0)&~(1<<UCSZ1)&(~(1<<UCSZ2));
    37d6:	e0 e4       	ldi	r30, 0x40	; 64
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 e8       	ldi	r24, 0x80	; 128
    37dc:	80 83       	st	Z, r24
    37de:	3b c0       	rjmp	.+118    	; 0x3856 <USART_xSetDataSize+0xf0>
			break;
		case USART_SIX_BITS:
			UCSRC = (1<<URSEL)|(1<<UCSZ0);
    37e0:	e0 e4       	ldi	r30, 0x40	; 64
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	82 e8       	ldi	r24, 0x82	; 130
    37e6:	80 83       	st	Z, r24
			CLEAR_BIT(UCSRB,UCSZ2);
    37e8:	aa e2       	ldi	r26, 0x2A	; 42
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	ea e2       	ldi	r30, 0x2A	; 42
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	8b 7f       	andi	r24, 0xFB	; 251
    37f4:	8c 93       	st	X, r24
    37f6:	2f c0       	rjmp	.+94     	; 0x3856 <USART_xSetDataSize+0xf0>
			break;
		case USART_SEVEN_BITS:
			UCSRC = (1<<URSEL)|(1<<UCSZ1);
    37f8:	e0 e4       	ldi	r30, 0x40	; 64
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	84 e8       	ldi	r24, 0x84	; 132
    37fe:	80 83       	st	Z, r24
			CLEAR_BIT(UCSRB,UCSZ2);
    3800:	aa e2       	ldi	r26, 0x2A	; 42
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	ea e2       	ldi	r30, 0x2A	; 42
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	8b 7f       	andi	r24, 0xFB	; 251
    380c:	8c 93       	st	X, r24
    380e:	23 c0       	rjmp	.+70     	; 0x3856 <USART_xSetDataSize+0xf0>
			break;
		case USART_EIGHT_BITS:
			UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    3810:	e0 e4       	ldi	r30, 0x40	; 64
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	86 e8       	ldi	r24, 0x86	; 134
    3816:	80 83       	st	Z, r24
			CLEAR_BIT(UCSRB,UCSZ2);
    3818:	aa e2       	ldi	r26, 0x2A	; 42
    381a:	b0 e0       	ldi	r27, 0x00	; 0
    381c:	ea e2       	ldi	r30, 0x2A	; 42
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	8b 7f       	andi	r24, 0xFB	; 251
    3824:	8c 93       	st	X, r24
    3826:	17 c0       	rjmp	.+46     	; 0x3856 <USART_xSetDataSize+0xf0>
			break;
		case USART_NINE_BITS:
			UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    3828:	e0 e4       	ldi	r30, 0x40	; 64
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	86 e8       	ldi	r24, 0x86	; 134
    382e:	80 83       	st	Z, r24
			SET_BIT(UCSRB,UCSZ2);
    3830:	aa e2       	ldi	r26, 0x2A	; 42
    3832:	b0 e0       	ldi	r27, 0x00	; 0
    3834:	ea e2       	ldi	r30, 0x2A	; 42
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	80 81       	ld	r24, Z
    383a:	84 60       	ori	r24, 0x04	; 4
    383c:	8c 93       	st	X, r24
    383e:	0b c0       	rjmp	.+22     	; 0x3856 <USART_xSetDataSize+0xf0>
			break;
		default:
			/* Default is 8 bit mode */
			UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    3840:	e0 e4       	ldi	r30, 0x40	; 64
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	86 e8       	ldi	r24, 0x86	; 134
    3846:	80 83       	st	Z, r24
			CLEAR_BIT(UCSRB,UCSZ2);
    3848:	aa e2       	ldi	r26, 0x2A	; 42
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	ea e2       	ldi	r30, 0x2A	; 42
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	80 81       	ld	r24, Z
    3852:	8b 7f       	andi	r24, 0xFB	; 251
    3854:	8c 93       	st	X, r24
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
    3856:	31 e0       	ldi	r19, 0x01	; 1
    3858:	3b 83       	std	Y+3, r19	; 0x03
    385a:	01 c0       	rjmp	.+2      	; 0x385e <USART_xSetDataSize+0xf8>
			break;
		}
	}
	else
	{
		return E_NOK;
    385c:	1b 82       	std	Y+3, r1	; 0x03
    385e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return E_OK;
}
    3860:	0f 90       	pop	r0
    3862:	0f 90       	pop	r0
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	0f 90       	pop	r0
    386a:	cf 91       	pop	r28
    386c:	df 91       	pop	r29
    386e:	08 95       	ret

00003870 <USART_xSetBaudRate>:

Error_Status USART_xSetBaudRate(USART_TypeDef USARTx,USART_TransmissionSpeed_t Copy_xSpeed, uint16 Copy_u16BaudRate)
{
    3870:	df 93       	push	r29
    3872:	cf 93       	push	r28
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
    3878:	29 97       	sbiw	r28, 0x09	; 9
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	f8 94       	cli
    387e:	de bf       	out	0x3e, r29	; 62
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	cd bf       	out	0x3d, r28	; 61
    3884:	8b 83       	std	Y+3, r24	; 0x03
    3886:	6c 83       	std	Y+4, r22	; 0x04
    3888:	5e 83       	std	Y+6, r21	; 0x06
    388a:	4d 83       	std	Y+5, r20	; 0x05
	uint16 BaudRate_equ=0;
    388c:	1a 82       	std	Y+2, r1	; 0x02
    388e:	19 82       	std	Y+1, r1	; 0x01
	if(USART1	==	USARTx)
    3890:	8b 81       	ldd	r24, Y+3	; 0x03
    3892:	81 30       	cpi	r24, 0x01	; 1
    3894:	09 f0       	breq	.+2      	; 0x3898 <USART_xSetBaudRate+0x28>
    3896:	ad c0       	rjmp	.+346    	; 0x39f2 <USART_xSetBaudRate+0x182>
	{
		switch(Copy_xSpeed)
    3898:	8c 81       	ldd	r24, Y+4	; 0x04
    389a:	28 2f       	mov	r18, r24
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	39 87       	std	Y+9, r19	; 0x09
    38a0:	28 87       	std	Y+8, r18	; 0x08
    38a2:	88 85       	ldd	r24, Y+8	; 0x08
    38a4:	99 85       	ldd	r25, Y+9	; 0x09
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	31 f0       	breq	.+12     	; 0x38b6 <USART_xSetBaudRate+0x46>
    38aa:	28 85       	ldd	r18, Y+8	; 0x08
    38ac:	39 85       	ldd	r19, Y+9	; 0x09
    38ae:	21 30       	cpi	r18, 0x01	; 1
    38b0:	31 05       	cpc	r19, r1
    38b2:	a1 f1       	breq	.+104    	; 0x391c <USART_xSetBaudRate+0xac>
    38b4:	69 c0       	rjmp	.+210    	; 0x3988 <USART_xSetBaudRate+0x118>
		{
		case USART_NORMAL_SPEED:
			BaudRate_equ=(F_CPU)/((Copy_u16BaudRate * 16UL)-1);
    38b6:	8d 81       	ldd	r24, Y+5	; 0x05
    38b8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ba:	cc 01       	movw	r24, r24
    38bc:	a0 e0       	ldi	r26, 0x00	; 0
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	aa 1f       	adc	r26, r26
    38c6:	bb 1f       	adc	r27, r27
    38c8:	88 0f       	add	r24, r24
    38ca:	99 1f       	adc	r25, r25
    38cc:	aa 1f       	adc	r26, r26
    38ce:	bb 1f       	adc	r27, r27
    38d0:	88 0f       	add	r24, r24
    38d2:	99 1f       	adc	r25, r25
    38d4:	aa 1f       	adc	r26, r26
    38d6:	bb 1f       	adc	r27, r27
    38d8:	88 0f       	add	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	aa 1f       	adc	r26, r26
    38de:	bb 1f       	adc	r27, r27
    38e0:	9c 01       	movw	r18, r24
    38e2:	ad 01       	movw	r20, r26
    38e4:	21 50       	subi	r18, 0x01	; 1
    38e6:	30 40       	sbci	r19, 0x00	; 0
    38e8:	40 40       	sbci	r20, 0x00	; 0
    38ea:	50 40       	sbci	r21, 0x00	; 0
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	92 e1       	ldi	r25, 0x12	; 18
    38f0:	aa e7       	ldi	r26, 0x7A	; 122
    38f2:	b0 e0       	ldi	r27, 0x00	; 0
    38f4:	bc 01       	movw	r22, r24
    38f6:	cd 01       	movw	r24, r26
    38f8:	0e 94 3e 22 	call	0x447c	; 0x447c <__udivmodsi4>
    38fc:	da 01       	movw	r26, r20
    38fe:	c9 01       	movw	r24, r18
    3900:	9a 83       	std	Y+2, r25	; 0x02
    3902:	89 83       	std	Y+1, r24	; 0x01
			UBRRL=BaudRate_equ;
    3904:	e9 e2       	ldi	r30, 0x29	; 41
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	80 83       	st	Z, r24
			UBRRH=(uint8)(BaudRate_equ>>8);
    390c:	e0 e4       	ldi	r30, 0x40	; 64
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	9a 81       	ldd	r25, Y+2	; 0x02
    3914:	89 2f       	mov	r24, r25
    3916:	99 27       	eor	r25, r25
    3918:	80 83       	st	Z, r24
    391a:	68 c0       	rjmp	.+208    	; 0x39ec <USART_xSetBaudRate+0x17c>
			break;

		case USART_HIGH_SPEED:
			SET_BIT(UCSRA,U2X);
    391c:	ab e2       	ldi	r26, 0x2B	; 43
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	eb e2       	ldi	r30, 0x2B	; 43
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	82 60       	ori	r24, 0x02	; 2
    3928:	8c 93       	st	X, r24
			BaudRate_equ=(F_CPU)/((Copy_u16BaudRate * 8UL)-1);
    392a:	8d 81       	ldd	r24, Y+5	; 0x05
    392c:	9e 81       	ldd	r25, Y+6	; 0x06
    392e:	cc 01       	movw	r24, r24
    3930:	a0 e0       	ldi	r26, 0x00	; 0
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	88 0f       	add	r24, r24
    3936:	99 1f       	adc	r25, r25
    3938:	aa 1f       	adc	r26, r26
    393a:	bb 1f       	adc	r27, r27
    393c:	88 0f       	add	r24, r24
    393e:	99 1f       	adc	r25, r25
    3940:	aa 1f       	adc	r26, r26
    3942:	bb 1f       	adc	r27, r27
    3944:	88 0f       	add	r24, r24
    3946:	99 1f       	adc	r25, r25
    3948:	aa 1f       	adc	r26, r26
    394a:	bb 1f       	adc	r27, r27
    394c:	9c 01       	movw	r18, r24
    394e:	ad 01       	movw	r20, r26
    3950:	21 50       	subi	r18, 0x01	; 1
    3952:	30 40       	sbci	r19, 0x00	; 0
    3954:	40 40       	sbci	r20, 0x00	; 0
    3956:	50 40       	sbci	r21, 0x00	; 0
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	92 e1       	ldi	r25, 0x12	; 18
    395c:	aa e7       	ldi	r26, 0x7A	; 122
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	bc 01       	movw	r22, r24
    3962:	cd 01       	movw	r24, r26
    3964:	0e 94 3e 22 	call	0x447c	; 0x447c <__udivmodsi4>
    3968:	da 01       	movw	r26, r20
    396a:	c9 01       	movw	r24, r18
    396c:	9a 83       	std	Y+2, r25	; 0x02
    396e:	89 83       	std	Y+1, r24	; 0x01
			UBRRL=BaudRate_equ;
    3970:	e9 e2       	ldi	r30, 0x29	; 41
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	80 83       	st	Z, r24
			UBRRH=(uint8)(BaudRate_equ>>8);
    3978:	e0 e4       	ldi	r30, 0x40	; 64
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	9a 81       	ldd	r25, Y+2	; 0x02
    3980:	89 2f       	mov	r24, r25
    3982:	99 27       	eor	r25, r25
    3984:	80 83       	st	Z, r24
    3986:	32 c0       	rjmp	.+100    	; 0x39ec <USART_xSetBaudRate+0x17c>
			break;

		default:
			BaudRate_equ=(F_CPU)/((Copy_u16BaudRate * 16UL)-1);
    3988:	8d 81       	ldd	r24, Y+5	; 0x05
    398a:	9e 81       	ldd	r25, Y+6	; 0x06
    398c:	cc 01       	movw	r24, r24
    398e:	a0 e0       	ldi	r26, 0x00	; 0
    3990:	b0 e0       	ldi	r27, 0x00	; 0
    3992:	88 0f       	add	r24, r24
    3994:	99 1f       	adc	r25, r25
    3996:	aa 1f       	adc	r26, r26
    3998:	bb 1f       	adc	r27, r27
    399a:	88 0f       	add	r24, r24
    399c:	99 1f       	adc	r25, r25
    399e:	aa 1f       	adc	r26, r26
    39a0:	bb 1f       	adc	r27, r27
    39a2:	88 0f       	add	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	aa 1f       	adc	r26, r26
    39a8:	bb 1f       	adc	r27, r27
    39aa:	88 0f       	add	r24, r24
    39ac:	99 1f       	adc	r25, r25
    39ae:	aa 1f       	adc	r26, r26
    39b0:	bb 1f       	adc	r27, r27
    39b2:	9c 01       	movw	r18, r24
    39b4:	ad 01       	movw	r20, r26
    39b6:	21 50       	subi	r18, 0x01	; 1
    39b8:	30 40       	sbci	r19, 0x00	; 0
    39ba:	40 40       	sbci	r20, 0x00	; 0
    39bc:	50 40       	sbci	r21, 0x00	; 0
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	92 e1       	ldi	r25, 0x12	; 18
    39c2:	aa e7       	ldi	r26, 0x7A	; 122
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	bc 01       	movw	r22, r24
    39c8:	cd 01       	movw	r24, r26
    39ca:	0e 94 3e 22 	call	0x447c	; 0x447c <__udivmodsi4>
    39ce:	da 01       	movw	r26, r20
    39d0:	c9 01       	movw	r24, r18
    39d2:	9a 83       	std	Y+2, r25	; 0x02
    39d4:	89 83       	std	Y+1, r24	; 0x01
			UBRRL=BaudRate_equ;
    39d6:	e9 e2       	ldi	r30, 0x29	; 41
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	80 83       	st	Z, r24
			UBRRH=(uint8)(BaudRate_equ>>8);
    39de:	e0 e4       	ldi	r30, 0x40	; 64
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	9a 81       	ldd	r25, Y+2	; 0x02
    39e6:	89 2f       	mov	r24, r25
    39e8:	99 27       	eor	r25, r25
    39ea:	80 83       	st	Z, r24
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
    39ec:	31 e0       	ldi	r19, 0x01	; 1
    39ee:	3f 83       	std	Y+7, r19	; 0x07
    39f0:	01 c0       	rjmp	.+2      	; 0x39f4 <USART_xSetBaudRate+0x184>
			break;
		}
	}
	else
	{
		return E_NOK;
    39f2:	1f 82       	std	Y+7, r1	; 0x07
    39f4:	8f 81       	ldd	r24, Y+7	; 0x07
	}
	return E_OK;

}
    39f6:	29 96       	adiw	r28, 0x09	; 9
    39f8:	0f b6       	in	r0, 0x3f	; 63
    39fa:	f8 94       	cli
    39fc:	de bf       	out	0x3e, r29	; 62
    39fe:	0f be       	out	0x3f, r0	; 63
    3a00:	cd bf       	out	0x3d, r28	; 61
    3a02:	cf 91       	pop	r28
    3a04:	df 91       	pop	r29
    3a06:	08 95       	ret

00003a08 <USART_xSetInterrupt>:

Error_Status USART_xSetInterrupt(USART_TypeDef USARTx,uint8 interrupt )
{
    3a08:	df 93       	push	r29
    3a0a:	cf 93       	push	r28
    3a0c:	00 d0       	rcall	.+0      	; 0x3a0e <USART_xSetInterrupt+0x6>
    3a0e:	00 d0       	rcall	.+0      	; 0x3a10 <USART_xSetInterrupt+0x8>
    3a10:	0f 92       	push	r0
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	89 83       	std	Y+1, r24	; 0x01
    3a18:	6a 83       	std	Y+2, r22	; 0x02
	if(USART1	==	USARTx)
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	81 30       	cpi	r24, 0x01	; 1
    3a1e:	09 f0       	breq	.+2      	; 0x3a22 <USART_xSetInterrupt+0x1a>
    3a20:	6d c0       	rjmp	.+218    	; 0x3afc <USART_xSetInterrupt+0xf4>
	{
		switch(interrupt)
    3a22:	8a 81       	ldd	r24, Y+2	; 0x02
    3a24:	28 2f       	mov	r18, r24
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	3d 83       	std	Y+5, r19	; 0x05
    3a2a:	2c 83       	std	Y+4, r18	; 0x04
    3a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a30:	82 30       	cpi	r24, 0x02	; 2
    3a32:	91 05       	cpc	r25, r1
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <USART_xSetInterrupt+0x30>
    3a36:	3d c0       	rjmp	.+122    	; 0x3ab2 <USART_xSetInterrupt+0xaa>
    3a38:	2c 81       	ldd	r18, Y+4	; 0x04
    3a3a:	3d 81       	ldd	r19, Y+5	; 0x05
    3a3c:	23 30       	cpi	r18, 0x03	; 3
    3a3e:	31 05       	cpc	r19, r1
    3a40:	54 f4       	brge	.+20     	; 0x3a56 <USART_xSetInterrupt+0x4e>
    3a42:	8c 81       	ldd	r24, Y+4	; 0x04
    3a44:	9d 81       	ldd	r25, Y+5	; 0x05
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	b1 f0       	breq	.+44     	; 0x3a76 <USART_xSetInterrupt+0x6e>
    3a4a:	2c 81       	ldd	r18, Y+4	; 0x04
    3a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    3a4e:	21 30       	cpi	r18, 0x01	; 1
    3a50:	31 05       	cpc	r19, r1
    3a52:	01 f1       	breq	.+64     	; 0x3a94 <USART_xSetInterrupt+0x8c>
    3a54:	4e c0       	rjmp	.+156    	; 0x3af2 <USART_xSetInterrupt+0xea>
    3a56:	8c 81       	ldd	r24, Y+4	; 0x04
    3a58:	9d 81       	ldd	r25, Y+5	; 0x05
    3a5a:	84 30       	cpi	r24, 0x04	; 4
    3a5c:	91 05       	cpc	r25, r1
    3a5e:	c9 f1       	breq	.+114    	; 0x3ad2 <USART_xSetInterrupt+0xca>
    3a60:	2c 81       	ldd	r18, Y+4	; 0x04
    3a62:	3d 81       	ldd	r19, Y+5	; 0x05
    3a64:	24 30       	cpi	r18, 0x04	; 4
    3a66:	31 05       	cpc	r19, r1
    3a68:	64 f1       	brlt	.+88     	; 0x3ac2 <USART_xSetInterrupt+0xba>
    3a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a6e:	85 30       	cpi	r24, 0x05	; 5
    3a70:	91 05       	cpc	r25, r1
    3a72:	b9 f1       	breq	.+110    	; 0x3ae2 <USART_xSetInterrupt+0xda>
    3a74:	3e c0       	rjmp	.+124    	; 0x3af2 <USART_xSetInterrupt+0xea>
		{
		case USART_INTERRUPT_OFF:
			CLEAR_BIT(UCSRB,RXCIE);
    3a76:	aa e2       	ldi	r26, 0x2A	; 42
    3a78:	b0 e0       	ldi	r27, 0x00	; 0
    3a7a:	ea e2       	ldi	r30, 0x2A	; 42
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	80 81       	ld	r24, Z
    3a80:	8f 77       	andi	r24, 0x7F	; 127
    3a82:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB,TXCIE);
    3a84:	aa e2       	ldi	r26, 0x2A	; 42
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	ea e2       	ldi	r30, 0x2A	; 42
    3a8a:	f0 e0       	ldi	r31, 0x00	; 0
    3a8c:	80 81       	ld	r24, Z
    3a8e:	8f 7b       	andi	r24, 0xBF	; 191
    3a90:	8c 93       	st	X, r24
    3a92:	31 c0       	rjmp	.+98     	; 0x3af6 <USART_xSetInterrupt+0xee>
			break;

		case USART_INTERRUPT_ON:
			SET_BIT(UCSRB,RXCIE);
    3a94:	aa e2       	ldi	r26, 0x2A	; 42
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	ea e2       	ldi	r30, 0x2A	; 42
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	80 68       	ori	r24, 0x80	; 128
    3aa0:	8c 93       	st	X, r24
			SET_BIT(UCSRB,TXCIE);
    3aa2:	aa e2       	ldi	r26, 0x2A	; 42
    3aa4:	b0 e0       	ldi	r27, 0x00	; 0
    3aa6:	ea e2       	ldi	r30, 0x2A	; 42
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	80 81       	ld	r24, Z
    3aac:	80 64       	ori	r24, 0x40	; 64
    3aae:	8c 93       	st	X, r24
    3ab0:	22 c0       	rjmp	.+68     	; 0x3af6 <USART_xSetInterrupt+0xee>
			break;

		case USART_INTERRUPT_RX_ON:
			SET_BIT(UCSRB,RXCIE);
    3ab2:	aa e2       	ldi	r26, 0x2A	; 42
    3ab4:	b0 e0       	ldi	r27, 0x00	; 0
    3ab6:	ea e2       	ldi	r30, 0x2A	; 42
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	80 81       	ld	r24, Z
    3abc:	80 68       	ori	r24, 0x80	; 128
    3abe:	8c 93       	st	X, r24
    3ac0:	1a c0       	rjmp	.+52     	; 0x3af6 <USART_xSetInterrupt+0xee>
			break;

		case USART_INTERRUPT_RX_OFF:
			CLEAR_BIT(UCSRB,RXCIE);
    3ac2:	aa e2       	ldi	r26, 0x2A	; 42
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	ea e2       	ldi	r30, 0x2A	; 42
    3ac8:	f0 e0       	ldi	r31, 0x00	; 0
    3aca:	80 81       	ld	r24, Z
    3acc:	8f 77       	andi	r24, 0x7F	; 127
    3ace:	8c 93       	st	X, r24
    3ad0:	12 c0       	rjmp	.+36     	; 0x3af6 <USART_xSetInterrupt+0xee>
			break;

		case USART_INTERRUPT_TX_ON:
			SET_BIT(UCSRB,TXCIE);
    3ad2:	aa e2       	ldi	r26, 0x2A	; 42
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	ea e2       	ldi	r30, 0x2A	; 42
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	80 81       	ld	r24, Z
    3adc:	80 64       	ori	r24, 0x40	; 64
    3ade:	8c 93       	st	X, r24
    3ae0:	0a c0       	rjmp	.+20     	; 0x3af6 <USART_xSetInterrupt+0xee>
			break;

		case  USART_INTERRUPT_TX_OFF:
			CLEAR_BIT(UCSRB,TXCIE);
    3ae2:	aa e2       	ldi	r26, 0x2A	; 42
    3ae4:	b0 e0       	ldi	r27, 0x00	; 0
    3ae6:	ea e2       	ldi	r30, 0x2A	; 42
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	80 81       	ld	r24, Z
    3aec:	8f 7b       	andi	r24, 0xBF	; 191
    3aee:	8c 93       	st	X, r24
    3af0:	02 c0       	rjmp	.+4      	; 0x3af6 <USART_xSetInterrupt+0xee>
			break;

		default:
			return E_NOK;
    3af2:	1b 82       	std	Y+3, r1	; 0x03
    3af4:	04 c0       	rjmp	.+8      	; 0x3afe <USART_xSetInterrupt+0xf6>
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
    3af6:	91 e0       	ldi	r25, 0x01	; 1
    3af8:	9b 83       	std	Y+3, r25	; 0x03
    3afa:	01 c0       	rjmp	.+2      	; 0x3afe <USART_xSetInterrupt+0xf6>

		}
	}
	else
	{
		return E_NOK;
    3afc:	1b 82       	std	Y+3, r1	; 0x03
    3afe:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return E_OK;
}
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <USART_xSetTransState>:

Error_Status USART_xSetTransState(USART_TypeDef USARTx,USART_TransmissionState_T Copy_xstate)
{
    3b10:	df 93       	push	r29
    3b12:	cf 93       	push	r28
    3b14:	00 d0       	rcall	.+0      	; 0x3b16 <USART_xSetTransState+0x6>
    3b16:	00 d0       	rcall	.+0      	; 0x3b18 <USART_xSetTransState+0x8>
    3b18:	0f 92       	push	r0
    3b1a:	cd b7       	in	r28, 0x3d	; 61
    3b1c:	de b7       	in	r29, 0x3e	; 62
    3b1e:	89 83       	std	Y+1, r24	; 0x01
    3b20:	6a 83       	std	Y+2, r22	; 0x02
	if(USART1	==	USARTx)
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	81 30       	cpi	r24, 0x01	; 1
    3b26:	09 f0       	breq	.+2      	; 0x3b2a <USART_xSetTransState+0x1a>
    3b28:	51 c0       	rjmp	.+162    	; 0x3bcc <USART_xSetTransState+0xbc>
	{
		switch(Copy_xstate)
    3b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2c:	28 2f       	mov	r18, r24
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	3d 83       	std	Y+5, r19	; 0x05
    3b32:	2c 83       	std	Y+4, r18	; 0x04
    3b34:	8c 81       	ldd	r24, Y+4	; 0x04
    3b36:	9d 81       	ldd	r25, Y+5	; 0x05
    3b38:	81 30       	cpi	r24, 0x01	; 1
    3b3a:	91 05       	cpc	r25, r1
    3b3c:	c1 f0       	breq	.+48     	; 0x3b6e <USART_xSetTransState+0x5e>
    3b3e:	2c 81       	ldd	r18, Y+4	; 0x04
    3b40:	3d 81       	ldd	r19, Y+5	; 0x05
    3b42:	22 30       	cpi	r18, 0x02	; 2
    3b44:	31 05       	cpc	r19, r1
    3b46:	11 f1       	breq	.+68     	; 0x3b8c <USART_xSetTransState+0x7c>
    3b48:	8c 81       	ldd	r24, Y+4	; 0x04
    3b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b4c:	00 97       	sbiw	r24, 0x00	; 0
    3b4e:	69 f5       	brne	.+90     	; 0x3baa <USART_xSetTransState+0x9a>
		{
		case USART_TRANSMITER:
			SET_BIT(UCSRB,TXEN);
    3b50:	aa e2       	ldi	r26, 0x2A	; 42
    3b52:	b0 e0       	ldi	r27, 0x00	; 0
    3b54:	ea e2       	ldi	r30, 0x2A	; 42
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	80 81       	ld	r24, Z
    3b5a:	88 60       	ori	r24, 0x08	; 8
    3b5c:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB,RXEN);
    3b5e:	aa e2       	ldi	r26, 0x2A	; 42
    3b60:	b0 e0       	ldi	r27, 0x00	; 0
    3b62:	ea e2       	ldi	r30, 0x2A	; 42
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	80 81       	ld	r24, Z
    3b68:	8f 7e       	andi	r24, 0xEF	; 239
    3b6a:	8c 93       	st	X, r24
    3b6c:	2c c0       	rjmp	.+88     	; 0x3bc6 <USART_xSetTransState+0xb6>
			break;
		case USART_RECIEVER:
			SET_BIT(UCSRB,RXEN);
    3b6e:	aa e2       	ldi	r26, 0x2A	; 42
    3b70:	b0 e0       	ldi	r27, 0x00	; 0
    3b72:	ea e2       	ldi	r30, 0x2A	; 42
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	80 81       	ld	r24, Z
    3b78:	80 61       	ori	r24, 0x10	; 16
    3b7a:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB,TXEN);
    3b7c:	aa e2       	ldi	r26, 0x2A	; 42
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	ea e2       	ldi	r30, 0x2A	; 42
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	87 7f       	andi	r24, 0xF7	; 247
    3b88:	8c 93       	st	X, r24
    3b8a:	1d c0       	rjmp	.+58     	; 0x3bc6 <USART_xSetTransState+0xb6>
			break;
		case USART_TRANSMITER_RECIEVER:
			SET_BIT(UCSRB,RXEN);
    3b8c:	aa e2       	ldi	r26, 0x2A	; 42
    3b8e:	b0 e0       	ldi	r27, 0x00	; 0
    3b90:	ea e2       	ldi	r30, 0x2A	; 42
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	80 81       	ld	r24, Z
    3b96:	80 61       	ori	r24, 0x10	; 16
    3b98:	8c 93       	st	X, r24
			SET_BIT(UCSRB,TXEN);
    3b9a:	aa e2       	ldi	r26, 0x2A	; 42
    3b9c:	b0 e0       	ldi	r27, 0x00	; 0
    3b9e:	ea e2       	ldi	r30, 0x2A	; 42
    3ba0:	f0 e0       	ldi	r31, 0x00	; 0
    3ba2:	80 81       	ld	r24, Z
    3ba4:	88 60       	ori	r24, 0x08	; 8
    3ba6:	8c 93       	st	X, r24
    3ba8:	0e c0       	rjmp	.+28     	; 0x3bc6 <USART_xSetTransState+0xb6>
			break;
		default:
			SET_BIT(UCSRB,RXEN);
    3baa:	aa e2       	ldi	r26, 0x2A	; 42
    3bac:	b0 e0       	ldi	r27, 0x00	; 0
    3bae:	ea e2       	ldi	r30, 0x2A	; 42
    3bb0:	f0 e0       	ldi	r31, 0x00	; 0
    3bb2:	80 81       	ld	r24, Z
    3bb4:	80 61       	ori	r24, 0x10	; 16
    3bb6:	8c 93       	st	X, r24
			SET_BIT(UCSRB,TXEN);
    3bb8:	aa e2       	ldi	r26, 0x2A	; 42
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	ea e2       	ldi	r30, 0x2A	; 42
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	88 60       	ori	r24, 0x08	; 8
    3bc4:	8c 93       	st	X, r24
	}
	else
	{
		return E_OK;
	}
	return E_OK;
    3bc6:	91 e0       	ldi	r25, 0x01	; 1
    3bc8:	9b 83       	std	Y+3, r25	; 0x03
    3bca:	02 c0       	rjmp	.+4      	; 0x3bd0 <USART_xSetTransState+0xc0>
			break;
		}
	}
	else
	{
		return E_OK;
    3bcc:	21 e0       	ldi	r18, 0x01	; 1
    3bce:	2b 83       	std	Y+3, r18	; 0x03
    3bd0:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return E_OK;
}
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	0f 90       	pop	r0
    3bdc:	cf 91       	pop	r28
    3bde:	df 91       	pop	r29
    3be0:	08 95       	ret

00003be2 <USART_xSendByte>:



Error_Status USART_xSendByte(USART_TypeDef USARTx,uint8 data)
{
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	00 d0       	rcall	.+0      	; 0x3be8 <USART_xSendByte+0x6>
    3be8:	0f 92       	push	r0
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
    3bee:	89 83       	std	Y+1, r24	; 0x01
    3bf0:	6a 83       	std	Y+2, r22	; 0x02
	if(USART1	==	USARTx)
    3bf2:	89 81       	ldd	r24, Y+1	; 0x01
    3bf4:	81 30       	cpi	r24, 0x01	; 1
    3bf6:	81 f4       	brne	.+32     	; 0x3c18 <USART_xSendByte+0x36>
	{
		/*wait until Date buffer is empty and ready to Write*/
		while((UCSRA&(1<<UDRE))==0);
    3bf8:	eb e2       	ldi	r30, 0x2B	; 43
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	80 81       	ld	r24, Z
    3bfe:	88 2f       	mov	r24, r24
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	80 72       	andi	r24, 0x20	; 32
    3c04:	90 70       	andi	r25, 0x00	; 0
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	b9 f3       	breq	.-18     	; 0x3bf8 <USART_xSendByte+0x16>
		UDR=data;
    3c0a:	ec e2       	ldi	r30, 0x2C	; 44
    3c0c:	f0 e0       	ldi	r31, 0x00	; 0
    3c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c10:	80 83       	st	Z, r24
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	8b 83       	std	Y+3, r24	; 0x03
    3c16:	01 c0       	rjmp	.+2      	; 0x3c1a <USART_xSendByte+0x38>
		while((UCSRA&(1<<UDRE))==0);
		UDR=data;
	}
	else
	{
		return E_NOK;
    3c18:	1b 82       	std	Y+3, r1	; 0x03
    3c1a:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return E_OK;
}
    3c1c:	0f 90       	pop	r0
    3c1e:	0f 90       	pop	r0
    3c20:	0f 90       	pop	r0
    3c22:	cf 91       	pop	r28
    3c24:	df 91       	pop	r29
    3c26:	08 95       	ret

00003c28 <USART_xSendString>:

Error_Status USART_xSendString(USART_TypeDef USARTx,uint8 * string)
{
    3c28:	df 93       	push	r29
    3c2a:	cf 93       	push	r28
    3c2c:	00 d0       	rcall	.+0      	; 0x3c2e <USART_xSendString+0x6>
    3c2e:	00 d0       	rcall	.+0      	; 0x3c30 <USART_xSendString+0x8>
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
    3c34:	89 83       	std	Y+1, r24	; 0x01
    3c36:	7b 83       	std	Y+3, r23	; 0x03
    3c38:	6a 83       	std	Y+2, r22	; 0x02
	if(USART_IS_VALID_CH(USARTx)	==	E_OK)
    3c3a:	89 81       	ldd	r24, Y+1	; 0x01
    3c3c:	81 30       	cpi	r24, 0x01	; 1
    3c3e:	c9 f4       	brne	.+50     	; 0x3c72 <USART_xSendString+0x4a>
    3c40:	0c c0       	rjmp	.+24     	; 0x3c5a <USART_xSendString+0x32>
	{
		while(*string!='\0')
		{
			USART_xSendByte(USARTx,*string);
    3c42:	ea 81       	ldd	r30, Y+2	; 0x02
    3c44:	fb 81       	ldd	r31, Y+3	; 0x03
    3c46:	90 81       	ld	r25, Z
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	69 2f       	mov	r22, r25
    3c4c:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <USART_xSendByte>
			string++;
    3c50:	8a 81       	ldd	r24, Y+2	; 0x02
    3c52:	9b 81       	ldd	r25, Y+3	; 0x03
    3c54:	01 96       	adiw	r24, 0x01	; 1
    3c56:	9b 83       	std	Y+3, r25	; 0x03
    3c58:	8a 83       	std	Y+2, r24	; 0x02

Error_Status USART_xSendString(USART_TypeDef USARTx,uint8 * string)
{
	if(USART_IS_VALID_CH(USARTx)	==	E_OK)
	{
		while(*string!='\0')
    3c5a:	ea 81       	ldd	r30, Y+2	; 0x02
    3c5c:	fb 81       	ldd	r31, Y+3	; 0x03
    3c5e:	80 81       	ld	r24, Z
    3c60:	88 23       	and	r24, r24
    3c62:	79 f7       	brne	.-34     	; 0x3c42 <USART_xSendString+0x1a>
		{
			USART_xSendByte(USARTx,*string);
			string++;
		}
		USART_xSendByte(USARTx,'\0');
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	60 e0       	ldi	r22, 0x00	; 0
    3c68:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <USART_xSendByte>
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	8c 83       	std	Y+4, r24	; 0x04
    3c70:	01 c0       	rjmp	.+2      	; 0x3c74 <USART_xSendString+0x4c>
		}
		USART_xSendByte(USARTx,'\0');
	}
	else
	{
		return E_NOK;
    3c72:	1c 82       	std	Y+4, r1	; 0x04
    3c74:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return E_OK;
}
    3c76:	0f 90       	pop	r0
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	cf 91       	pop	r28
    3c80:	df 91       	pop	r29
    3c82:	08 95       	ret

00003c84 <USART_xRecieveByte>:

Error_Status USART_xRecieveByte(USART_TypeDef USARTx,uint8 *RecvData)
{
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	00 d0       	rcall	.+0      	; 0x3c8a <USART_xRecieveByte+0x6>
    3c8a:	00 d0       	rcall	.+0      	; 0x3c8c <USART_xRecieveByte+0x8>
    3c8c:	cd b7       	in	r28, 0x3d	; 61
    3c8e:	de b7       	in	r29, 0x3e	; 62
    3c90:	89 83       	std	Y+1, r24	; 0x01
    3c92:	7b 83       	std	Y+3, r23	; 0x03
    3c94:	6a 83       	std	Y+2, r22	; 0x02
	if(USART1	==	USARTx)
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	81 30       	cpi	r24, 0x01	; 1
    3c9a:	71 f4       	brne	.+28     	; 0x3cb8 <USART_xRecieveByte+0x34>
	{
		/*Wait until there is unread data in Date Buffer*/
		while (GET_BIT(UCSRA , RXC)	==	0);
    3c9c:	eb e2       	ldi	r30, 0x2B	; 43
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	80 81       	ld	r24, Z
    3ca2:	88 23       	and	r24, r24
    3ca4:	dc f7       	brge	.-10     	; 0x3c9c <USART_xRecieveByte+0x18>
		*RecvData	=	 UDR;
    3ca6:	ec e2       	ldi	r30, 0x2C	; 44
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	80 81       	ld	r24, Z
    3cac:	ea 81       	ldd	r30, Y+2	; 0x02
    3cae:	fb 81       	ldd	r31, Y+3	; 0x03
    3cb0:	80 83       	st	Z, r24
	else
	{
		*RecvData	=	E_NOK;
		return E_NOK;
	}
	return E_OK;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	8c 83       	std	Y+4, r24	; 0x04
    3cb6:	04 c0       	rjmp	.+8      	; 0x3cc0 <USART_xRecieveByte+0x3c>
		while (GET_BIT(UCSRA , RXC)	==	0);
		*RecvData	=	 UDR;
	}
	else
	{
		*RecvData	=	E_NOK;
    3cb8:	ea 81       	ldd	r30, Y+2	; 0x02
    3cba:	fb 81       	ldd	r31, Y+3	; 0x03
    3cbc:	10 82       	st	Z, r1
		return E_NOK;
    3cbe:	1c 82       	std	Y+4, r1	; 0x04
    3cc0:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return E_OK;
}
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	cf 91       	pop	r28
    3ccc:	df 91       	pop	r29
    3cce:	08 95       	ret

00003cd0 <USART_xRecieveString>:



Error_Status USART_xRecieveString(USART_TypeDef USARTx,uint8 * string)
{
    3cd0:	df 93       	push	r29
    3cd2:	cf 93       	push	r28
    3cd4:	00 d0       	rcall	.+0      	; 0x3cd6 <USART_xRecieveString+0x6>
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <USART_xRecieveString+0x8>
    3cd8:	0f 92       	push	r0
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	8a 83       	std	Y+2, r24	; 0x02
    3ce0:	7c 83       	std	Y+4, r23	; 0x04
    3ce2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Data	=	0;
    3ce4:	19 82       	std	Y+1, r1	; 0x01
	if(USART_IS_VALID_CH(USARTx)	==	E_OK)
    3ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce8:	81 30       	cpi	r24, 0x01	; 1
    3cea:	b1 f4       	brne	.+44     	; 0x3d18 <USART_xRecieveString+0x48>
	{
		do
		{
			USART_xRecieveByte(USARTx,&Local_u8Data);
    3cec:	8a 81       	ldd	r24, Y+2	; 0x02
    3cee:	9e 01       	movw	r18, r28
    3cf0:	2f 5f       	subi	r18, 0xFF	; 255
    3cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf4:	b9 01       	movw	r22, r18
    3cf6:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <USART_xRecieveByte>
			/*assign data to the string*/
			*string = Local_u8Data;
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	eb 81       	ldd	r30, Y+3	; 0x03
    3cfe:	fc 81       	ldd	r31, Y+4	; 0x04
    3d00:	80 83       	st	Z, r24
			/*move to next address*/
			string++;
    3d02:	8b 81       	ldd	r24, Y+3	; 0x03
    3d04:	9c 81       	ldd	r25, Y+4	; 0x04
    3d06:	01 96       	adiw	r24, 0x01	; 1
    3d08:	9c 83       	std	Y+4, r25	; 0x04
    3d0a:	8b 83       	std	Y+3, r24	; 0x03

		} while (Local_u8Data!='\0');
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	88 23       	and	r24, r24
    3d10:	69 f7       	brne	.-38     	; 0x3cec <USART_xRecieveString+0x1c>
	else
	{
		return E_NOK;
	}

	return E_OK;
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	8d 83       	std	Y+5, r24	; 0x05
    3d16:	01 c0       	rjmp	.+2      	; 0x3d1a <USART_xRecieveString+0x4a>
		} while (Local_u8Data!='\0');

	}
	else
	{
		return E_NOK;
    3d18:	1d 82       	std	Y+5, r1	; 0x05
    3d1a:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return E_OK;
}
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	08 95       	ret

00003d2c <Util_String_vNumtoStr>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "Util_String_interface.h"

void Util_String_vNumtoStr(sint32 Copy_s32Num,uint8 *pu8Buffer)
{
    3d2c:	0f 93       	push	r16
    3d2e:	1f 93       	push	r17
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	60 97       	sbiw	r28, 0x10	; 16
    3d3a:	0f b6       	in	r0, 0x3f	; 63
    3d3c:	f8 94       	cli
    3d3e:	de bf       	out	0x3e, r29	; 62
    3d40:	0f be       	out	0x3f, r0	; 63
    3d42:	cd bf       	out	0x3d, r28	; 61
    3d44:	6b 87       	std	Y+11, r22	; 0x0b
    3d46:	7c 87       	std	Y+12, r23	; 0x0c
    3d48:	8d 87       	std	Y+13, r24	; 0x0d
    3d4a:	9e 87       	std	Y+14, r25	; 0x0e
    3d4c:	58 8b       	std	Y+16, r21	; 0x10
    3d4e:	4f 87       	std	Y+15, r20	; 0x0f
	sint32 		 Local_s32Index		= 	0;
    3d50:	1f 82       	std	Y+7, r1	; 0x07
    3d52:	18 86       	std	Y+8, r1	; 0x08
    3d54:	19 86       	std	Y+9, r1	; 0x09
    3d56:	1a 86       	std	Y+10, r1	; 0x0a
	sint32 		 Local_s32Copy 		= 	0;
    3d58:	1b 82       	std	Y+3, r1	; 0x03
    3d5a:	1c 82       	std	Y+4, r1	; 0x04
    3d5c:	1d 82       	std	Y+5, r1	; 0x05
    3d5e:	1e 82       	std	Y+6, r1	; 0x06
	Flag_Status  Local_xSignFlag	=	E_NOK;
    3d60:	1a 82       	std	Y+2, r1	; 0x02
	uint8		 Local_xSignBorder	=	0;
    3d62:	19 82       	std	Y+1, r1	; 0x01

	/* Checks if the number is negative */
	if(Copy_s32Num < 0)
    3d64:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d66:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d68:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d6a:	be 85       	ldd	r27, Y+14	; 0x0e
    3d6c:	bb 23       	and	r27, r27
    3d6e:	8c f4       	brge	.+34     	; 0x3d92 <Util_String_vNumtoStr+0x66>
	{
		/* Turn it to positive */
		Copy_s32Num 	= -1 * Copy_s32Num;
    3d70:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d72:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d74:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d76:	be 85       	ldd	r27, Y+14	; 0x0e
    3d78:	b0 95       	com	r27
    3d7a:	a0 95       	com	r26
    3d7c:	90 95       	com	r25
    3d7e:	81 95       	neg	r24
    3d80:	9f 4f       	sbci	r25, 0xFF	; 255
    3d82:	af 4f       	sbci	r26, 0xFF	; 255
    3d84:	bf 4f       	sbci	r27, 0xFF	; 255
    3d86:	8b 87       	std	Y+11, r24	; 0x0b
    3d88:	9c 87       	std	Y+12, r25	; 0x0c
    3d8a:	ad 87       	std	Y+13, r26	; 0x0d
    3d8c:	be 87       	std	Y+14, r27	; 0x0e
		/* Raise sign flag*/
		Local_xSignFlag = E_OK;
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	8a 83       	std	Y+2, r24	; 0x02
	}

	/* Buffer to count number of digits in the number */
	Local_s32Copy = Copy_s32Num;
    3d92:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d94:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d96:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d98:	be 85       	ldd	r27, Y+14	; 0x0e
    3d9a:	8b 83       	std	Y+3, r24	; 0x03
    3d9c:	9c 83       	std	Y+4, r25	; 0x04
    3d9e:	ad 83       	std	Y+5, r26	; 0x05
    3da0:	be 83       	std	Y+6, r27	; 0x06
    3da2:	1d c0       	rjmp	.+58     	; 0x3dde <Util_String_vNumtoStr+0xb2>

	while(Local_s32Copy > 0)
	{
		Local_s32Copy /=10;
    3da4:	8b 81       	ldd	r24, Y+3	; 0x03
    3da6:	9c 81       	ldd	r25, Y+4	; 0x04
    3da8:	ad 81       	ldd	r26, Y+5	; 0x05
    3daa:	be 81       	ldd	r27, Y+6	; 0x06
    3dac:	2a e0       	ldi	r18, 0x0A	; 10
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	40 e0       	ldi	r20, 0x00	; 0
    3db2:	50 e0       	ldi	r21, 0x00	; 0
    3db4:	bc 01       	movw	r22, r24
    3db6:	cd 01       	movw	r24, r26
    3db8:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__divmodsi4>
    3dbc:	da 01       	movw	r26, r20
    3dbe:	c9 01       	movw	r24, r18
    3dc0:	8b 83       	std	Y+3, r24	; 0x03
    3dc2:	9c 83       	std	Y+4, r25	; 0x04
    3dc4:	ad 83       	std	Y+5, r26	; 0x05
    3dc6:	be 83       	std	Y+6, r27	; 0x06
		Local_s32Index++;
    3dc8:	8f 81       	ldd	r24, Y+7	; 0x07
    3dca:	98 85       	ldd	r25, Y+8	; 0x08
    3dcc:	a9 85       	ldd	r26, Y+9	; 0x09
    3dce:	ba 85       	ldd	r27, Y+10	; 0x0a
    3dd0:	01 96       	adiw	r24, 0x01	; 1
    3dd2:	a1 1d       	adc	r26, r1
    3dd4:	b1 1d       	adc	r27, r1
    3dd6:	8f 83       	std	Y+7, r24	; 0x07
    3dd8:	98 87       	std	Y+8, r25	; 0x08
    3dda:	a9 87       	std	Y+9, r26	; 0x09
    3ddc:	ba 87       	std	Y+10, r27	; 0x0a
	}

	/* Buffer to count number of digits in the number */
	Local_s32Copy = Copy_s32Num;

	while(Local_s32Copy > 0)
    3dde:	8b 81       	ldd	r24, Y+3	; 0x03
    3de0:	9c 81       	ldd	r25, Y+4	; 0x04
    3de2:	ad 81       	ldd	r26, Y+5	; 0x05
    3de4:	be 81       	ldd	r27, Y+6	; 0x06
    3de6:	18 16       	cp	r1, r24
    3de8:	19 06       	cpc	r1, r25
    3dea:	1a 06       	cpc	r1, r26
    3dec:	1b 06       	cpc	r1, r27
    3dee:	d4 f2       	brlt	.-76     	; 0x3da4 <Util_String_vNumtoStr+0x78>
	{
		Local_s32Copy /=10;
		Local_s32Index++;
	}
	/* If the number is negative */
	if(Local_xSignFlag == E_OK)
    3df0:	8a 81       	ldd	r24, Y+2	; 0x02
    3df2:	81 30       	cpi	r24, 0x01	; 1
    3df4:	89 f4       	brne	.+34     	; 0x3e18 <Util_String_vNumtoStr+0xec>
	{
		/* Increase the index to be able to store sign in the buffer */
		Local_s32Index++;
    3df6:	8f 81       	ldd	r24, Y+7	; 0x07
    3df8:	98 85       	ldd	r25, Y+8	; 0x08
    3dfa:	a9 85       	ldd	r26, Y+9	; 0x09
    3dfc:	ba 85       	ldd	r27, Y+10	; 0x0a
    3dfe:	01 96       	adiw	r24, 0x01	; 1
    3e00:	a1 1d       	adc	r26, r1
    3e02:	b1 1d       	adc	r27, r1
    3e04:	8f 83       	std	Y+7, r24	; 0x07
    3e06:	98 87       	std	Y+8, r25	; 0x08
    3e08:	a9 87       	std	Y+9, r26	; 0x09
    3e0a:	ba 87       	std	Y+10, r27	; 0x0a
		/* Assign the sign in the first index */
		pu8Buffer[0] = '-';
    3e0c:	ef 85       	ldd	r30, Y+15	; 0x0f
    3e0e:	f8 89       	ldd	r31, Y+16	; 0x10
    3e10:	8d e2       	ldi	r24, 0x2D	; 45
    3e12:	80 83       	st	Z, r24
		/* Leave the first index empty for the sign */
		Local_xSignBorder = 1;
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	89 83       	std	Y+1, r24	; 0x01
	}
	pu8Buffer[Local_s32Index--] = '\0';
    3e18:	2f 81       	ldd	r18, Y+7	; 0x07
    3e1a:	38 85       	ldd	r19, Y+8	; 0x08
    3e1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e1e:	98 89       	ldd	r25, Y+16	; 0x10
    3e20:	fc 01       	movw	r30, r24
    3e22:	e2 0f       	add	r30, r18
    3e24:	f3 1f       	adc	r31, r19
    3e26:	10 82       	st	Z, r1
    3e28:	8f 81       	ldd	r24, Y+7	; 0x07
    3e2a:	98 85       	ldd	r25, Y+8	; 0x08
    3e2c:	a9 85       	ldd	r26, Y+9	; 0x09
    3e2e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e30:	01 97       	sbiw	r24, 0x01	; 1
    3e32:	a1 09       	sbc	r26, r1
    3e34:	b1 09       	sbc	r27, r1
    3e36:	8f 83       	std	Y+7, r24	; 0x07
    3e38:	98 87       	std	Y+8, r25	; 0x08
    3e3a:	a9 87       	std	Y+9, r26	; 0x09
    3e3c:	ba 87       	std	Y+10, r27	; 0x0a
    3e3e:	35 c0       	rjmp	.+106    	; 0x3eaa <Util_String_vNumtoStr+0x17e>
	while(Local_s32Index >= Local_xSignBorder)
	{
		/* Convert the numbers to characters and store them in the buffer */
		pu8Buffer[Local_s32Index--] = ((Copy_s32Num % 10) + '0');
    3e40:	2f 81       	ldd	r18, Y+7	; 0x07
    3e42:	38 85       	ldd	r19, Y+8	; 0x08
    3e44:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e46:	98 89       	ldd	r25, Y+16	; 0x10
    3e48:	8c 01       	movw	r16, r24
    3e4a:	02 0f       	add	r16, r18
    3e4c:	13 1f       	adc	r17, r19
    3e4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e50:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e52:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e54:	be 85       	ldd	r27, Y+14	; 0x0e
    3e56:	2a e0       	ldi	r18, 0x0A	; 10
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	40 e0       	ldi	r20, 0x00	; 0
    3e5c:	50 e0       	ldi	r21, 0x00	; 0
    3e5e:	bc 01       	movw	r22, r24
    3e60:	cd 01       	movw	r24, r26
    3e62:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__divmodsi4>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	80 5d       	subi	r24, 0xD0	; 208
    3e6c:	f8 01       	movw	r30, r16
    3e6e:	80 83       	st	Z, r24
    3e70:	8f 81       	ldd	r24, Y+7	; 0x07
    3e72:	98 85       	ldd	r25, Y+8	; 0x08
    3e74:	a9 85       	ldd	r26, Y+9	; 0x09
    3e76:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	a1 09       	sbc	r26, r1
    3e7c:	b1 09       	sbc	r27, r1
    3e7e:	8f 83       	std	Y+7, r24	; 0x07
    3e80:	98 87       	std	Y+8, r25	; 0x08
    3e82:	a9 87       	std	Y+9, r26	; 0x09
    3e84:	ba 87       	std	Y+10, r27	; 0x0a
		Copy_s32Num /= 10;
    3e86:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e88:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e8a:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e8c:	be 85       	ldd	r27, Y+14	; 0x0e
    3e8e:	2a e0       	ldi	r18, 0x0A	; 10
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	40 e0       	ldi	r20, 0x00	; 0
    3e94:	50 e0       	ldi	r21, 0x00	; 0
    3e96:	bc 01       	movw	r22, r24
    3e98:	cd 01       	movw	r24, r26
    3e9a:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__divmodsi4>
    3e9e:	da 01       	movw	r26, r20
    3ea0:	c9 01       	movw	r24, r18
    3ea2:	8b 87       	std	Y+11, r24	; 0x0b
    3ea4:	9c 87       	std	Y+12, r25	; 0x0c
    3ea6:	ad 87       	std	Y+13, r26	; 0x0d
    3ea8:	be 87       	std	Y+14, r27	; 0x0e
		pu8Buffer[0] = '-';
		/* Leave the first index empty for the sign */
		Local_xSignBorder = 1;
	}
	pu8Buffer[Local_s32Index--] = '\0';
	while(Local_s32Index >= Local_xSignBorder)
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	28 2f       	mov	r18, r24
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	40 e0       	ldi	r20, 0x00	; 0
    3eb2:	50 e0       	ldi	r21, 0x00	; 0
    3eb4:	8f 81       	ldd	r24, Y+7	; 0x07
    3eb6:	98 85       	ldd	r25, Y+8	; 0x08
    3eb8:	a9 85       	ldd	r26, Y+9	; 0x09
    3eba:	ba 85       	ldd	r27, Y+10	; 0x0a
    3ebc:	82 17       	cp	r24, r18
    3ebe:	93 07       	cpc	r25, r19
    3ec0:	a4 07       	cpc	r26, r20
    3ec2:	b5 07       	cpc	r27, r21
    3ec4:	0c f0       	brlt	.+2      	; 0x3ec8 <Util_String_vNumtoStr+0x19c>
    3ec6:	bc cf       	rjmp	.-136    	; 0x3e40 <Util_String_vNumtoStr+0x114>
	{
		/* Convert the numbers to characters and store them in the buffer */
		pu8Buffer[Local_s32Index--] = ((Copy_s32Num % 10) + '0');
		Copy_s32Num /= 10;
	}
}
    3ec8:	60 96       	adiw	r28, 0x10	; 16
    3eca:	0f b6       	in	r0, 0x3f	; 63
    3ecc:	f8 94       	cli
    3ece:	de bf       	out	0x3e, r29	; 62
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	cd bf       	out	0x3d, r28	; 61
    3ed4:	cf 91       	pop	r28
    3ed6:	df 91       	pop	r29
    3ed8:	1f 91       	pop	r17
    3eda:	0f 91       	pop	r16
    3edc:	08 95       	ret

00003ede <Util_String_vFloatToStr>:


void Util_String_vFloatToStr(float32 Copy_f32NUM, uint8 *pu8Buffer,uint8 Copy_u8N_NumbersAfterFPonit)
{
    3ede:	0f 93       	push	r16
    3ee0:	1f 93       	push	r17
    3ee2:	df 93       	push	r29
    3ee4:	cf 93       	push	r28
    3ee6:	cd b7       	in	r28, 0x3d	; 61
    3ee8:	de b7       	in	r29, 0x3e	; 62
    3eea:	6d 97       	sbiw	r28, 0x1d	; 29
    3eec:	0f b6       	in	r0, 0x3f	; 63
    3eee:	f8 94       	cli
    3ef0:	de bf       	out	0x3e, r29	; 62
    3ef2:	0f be       	out	0x3f, r0	; 63
    3ef4:	cd bf       	out	0x3d, r28	; 61
    3ef6:	6f 8b       	std	Y+23, r22	; 0x17
    3ef8:	78 8f       	std	Y+24, r23	; 0x18
    3efa:	89 8f       	std	Y+25, r24	; 0x19
    3efc:	9a 8f       	std	Y+26, r25	; 0x1a
    3efe:	5c 8f       	std	Y+28, r21	; 0x1c
    3f00:	4b 8f       	std	Y+27, r20	; 0x1b
    3f02:	2d 8f       	std	Y+29, r18	; 0x1d
	sint32 		Local_s32Index 			= 0;
    3f04:	1b 8a       	std	Y+19, r1	; 0x13
    3f06:	1c 8a       	std	Y+20, r1	; 0x14
    3f08:	1d 8a       	std	Y+21, r1	; 0x15
    3f0a:	1e 8a       	std	Y+22, r1	; 0x16
	sint32 		Local_s32DecSize		= 0;
    3f0c:	1f 86       	std	Y+15, r1	; 0x0f
    3f0e:	18 8a       	std	Y+16, r1	; 0x10
    3f10:	19 8a       	std	Y+17, r1	; 0x11
    3f12:	1a 8a       	std	Y+18, r1	; 0x12
	float32 	Local_f32SubBuffer 		= 0;
    3f14:	80 e0       	ldi	r24, 0x00	; 0
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	a0 e0       	ldi	r26, 0x00	; 0
    3f1a:	b0 e0       	ldi	r27, 0x00	; 0
    3f1c:	8b 87       	std	Y+11, r24	; 0x0b
    3f1e:	9c 87       	std	Y+12, r25	; 0x0c
    3f20:	ad 87       	std	Y+13, r26	; 0x0d
    3f22:	be 87       	std	Y+14, r27	; 0x0e
	sint32 		Local_s32NumToSub		= 0;
    3f24:	1f 82       	std	Y+7, r1	; 0x07
    3f26:	18 86       	std	Y+8, r1	; 0x08
    3f28:	19 86       	std	Y+9, r1	; 0x09
    3f2a:	1a 86       	std	Y+10, r1	; 0x0a
	sint32 		Local_s32IntBuff		= 0;
    3f2c:	1b 82       	std	Y+3, r1	; 0x03
    3f2e:	1c 82       	std	Y+4, r1	; 0x04
    3f30:	1d 82       	std	Y+5, r1	; 0x05
    3f32:	1e 82       	std	Y+6, r1	; 0x06
	Flag_Status Local_xSignFlag			= E_NOK;
    3f34:	1a 82       	std	Y+2, r1	; 0x02
	uint8		Local_xSignBorder		= 0;
    3f36:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if(Copy_f32NUM < 0)
    3f38:	6f 89       	ldd	r22, Y+23	; 0x17
    3f3a:	78 8d       	ldd	r23, Y+24	; 0x18
    3f3c:	89 8d       	ldd	r24, Y+25	; 0x19
    3f3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	40 e0       	ldi	r20, 0x00	; 0
    3f46:	50 e0       	ldi	r21, 0x00	; 0
    3f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f4c:	88 23       	and	r24, r24
    3f4e:	5c f4       	brge	.+22     	; 0x3f66 <Util_String_vFloatToStr+0x88>
	{
		/* Turn it to positive */
		Copy_f32NUM = -1 * Copy_f32NUM;
    3f50:	8f 89       	ldd	r24, Y+23	; 0x17
    3f52:	98 8d       	ldd	r25, Y+24	; 0x18
    3f54:	a9 8d       	ldd	r26, Y+25	; 0x19
    3f56:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3f58:	b0 58       	subi	r27, 0x80	; 128
    3f5a:	8f 8b       	std	Y+23, r24	; 0x17
    3f5c:	98 8f       	std	Y+24, r25	; 0x18
    3f5e:	a9 8f       	std	Y+25, r26	; 0x19
    3f60:	ba 8f       	std	Y+26, r27	; 0x1a
		/* Raise sign flag*/
		Local_xSignFlag = E_OK;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	8a 83       	std	Y+2, r24	; 0x02
	}
	/* Copy the number into buffers to be used */
	Local_s32NumToSub 		= (sint32)Copy_f32NUM;
    3f66:	6f 89       	ldd	r22, Y+23	; 0x17
    3f68:	78 8d       	ldd	r23, Y+24	; 0x18
    3f6a:	89 8d       	ldd	r24, Y+25	; 0x19
    3f6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f6e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	8f 83       	std	Y+7, r24	; 0x07
    3f78:	98 87       	std	Y+8, r25	; 0x08
    3f7a:	a9 87       	std	Y+9, r26	; 0x09
    3f7c:	ba 87       	std	Y+10, r27	; 0x0a
	Local_s32IntBuff		= (sint32)Copy_f32NUM;
    3f7e:	6f 89       	ldd	r22, Y+23	; 0x17
    3f80:	78 8d       	ldd	r23, Y+24	; 0x18
    3f82:	89 8d       	ldd	r24, Y+25	; 0x19
    3f84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f86:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	8b 83       	std	Y+3, r24	; 0x03
    3f90:	9c 83       	std	Y+4, r25	; 0x04
    3f92:	ad 83       	std	Y+5, r26	; 0x05
    3f94:	be 83       	std	Y+6, r27	; 0x06

	/* If the number is 0 skip the function by make index 1 */
	/* Then print zero */
	if(Local_s32IntBuff == 0)
    3f96:	8b 81       	ldd	r24, Y+3	; 0x03
    3f98:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9a:	ad 81       	ldd	r26, Y+5	; 0x05
    3f9c:	be 81       	ldd	r27, Y+6	; 0x06
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	a1 05       	cpc	r26, r1
    3fa2:	b1 05       	cpc	r27, r1
    3fa4:	31 f5       	brne	.+76     	; 0x3ff2 <Util_String_vFloatToStr+0x114>
	{
		Local_s32Index =1;
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	a0 e0       	ldi	r26, 0x00	; 0
    3fac:	b0 e0       	ldi	r27, 0x00	; 0
    3fae:	8b 8b       	std	Y+19, r24	; 0x13
    3fb0:	9c 8b       	std	Y+20, r25	; 0x14
    3fb2:	ad 8b       	std	Y+21, r26	; 0x15
    3fb4:	be 8b       	std	Y+22, r27	; 0x16
    3fb6:	26 c0       	rjmp	.+76     	; 0x4004 <Util_String_vFloatToStr+0x126>
	}
	else{
		/* Count the number of digits */
		while (Local_s32IntBuff > 0)
		{
			Local_s32IntBuff /= 10;
    3fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fba:	9c 81       	ldd	r25, Y+4	; 0x04
    3fbc:	ad 81       	ldd	r26, Y+5	; 0x05
    3fbe:	be 81       	ldd	r27, Y+6	; 0x06
    3fc0:	2a e0       	ldi	r18, 0x0A	; 10
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	40 e0       	ldi	r20, 0x00	; 0
    3fc6:	50 e0       	ldi	r21, 0x00	; 0
    3fc8:	bc 01       	movw	r22, r24
    3fca:	cd 01       	movw	r24, r26
    3fcc:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__divmodsi4>
    3fd0:	da 01       	movw	r26, r20
    3fd2:	c9 01       	movw	r24, r18
    3fd4:	8b 83       	std	Y+3, r24	; 0x03
    3fd6:	9c 83       	std	Y+4, r25	; 0x04
    3fd8:	ad 83       	std	Y+5, r26	; 0x05
    3fda:	be 83       	std	Y+6, r27	; 0x06
			Local_s32Index++;
    3fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    3fde:	9c 89       	ldd	r25, Y+20	; 0x14
    3fe0:	ad 89       	ldd	r26, Y+21	; 0x15
    3fe2:	be 89       	ldd	r27, Y+22	; 0x16
    3fe4:	01 96       	adiw	r24, 0x01	; 1
    3fe6:	a1 1d       	adc	r26, r1
    3fe8:	b1 1d       	adc	r27, r1
    3fea:	8b 8b       	std	Y+19, r24	; 0x13
    3fec:	9c 8b       	std	Y+20, r25	; 0x14
    3fee:	ad 8b       	std	Y+21, r26	; 0x15
    3ff0:	be 8b       	std	Y+22, r27	; 0x16
	{
		Local_s32Index =1;
	}
	else{
		/* Count the number of digits */
		while (Local_s32IntBuff > 0)
    3ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff6:	ad 81       	ldd	r26, Y+5	; 0x05
    3ff8:	be 81       	ldd	r27, Y+6	; 0x06
    3ffa:	18 16       	cp	r1, r24
    3ffc:	19 06       	cpc	r1, r25
    3ffe:	1a 06       	cpc	r1, r26
    4000:	1b 06       	cpc	r1, r27
    4002:	d4 f2       	brlt	.-76     	; 0x3fb8 <Util_String_vFloatToStr+0xda>
			Local_s32IntBuff /= 10;
			Local_s32Index++;
		}
	}
	/* If the number is negative */
	if(Local_xSignFlag == E_OK)
    4004:	8a 81       	ldd	r24, Y+2	; 0x02
    4006:	81 30       	cpi	r24, 0x01	; 1
    4008:	89 f4       	brne	.+34     	; 0x402c <Util_String_vFloatToStr+0x14e>
	{
		/* Increase the index to be able to store sign in the buffer */
		Local_s32Index++;
    400a:	8b 89       	ldd	r24, Y+19	; 0x13
    400c:	9c 89       	ldd	r25, Y+20	; 0x14
    400e:	ad 89       	ldd	r26, Y+21	; 0x15
    4010:	be 89       	ldd	r27, Y+22	; 0x16
    4012:	01 96       	adiw	r24, 0x01	; 1
    4014:	a1 1d       	adc	r26, r1
    4016:	b1 1d       	adc	r27, r1
    4018:	8b 8b       	std	Y+19, r24	; 0x13
    401a:	9c 8b       	std	Y+20, r25	; 0x14
    401c:	ad 8b       	std	Y+21, r26	; 0x15
    401e:	be 8b       	std	Y+22, r27	; 0x16
		/* Assign the sign in the first index */
		pu8Buffer[0] = '-';
    4020:	eb 8d       	ldd	r30, Y+27	; 0x1b
    4022:	fc 8d       	ldd	r31, Y+28	; 0x1c
    4024:	8d e2       	ldi	r24, 0x2D	; 45
    4026:	80 83       	st	Z, r24
		/* Leave the first index empty for the sign */
		Local_xSignBorder = 1;
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Assign the number again in integer buffer to store it before floating point */
	Local_s32IntBuff = (sint32)Copy_f32NUM;
    402c:	6f 89       	ldd	r22, Y+23	; 0x17
    402e:	78 8d       	ldd	r23, Y+24	; 0x18
    4030:	89 8d       	ldd	r24, Y+25	; 0x19
    4032:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4034:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	8b 83       	std	Y+3, r24	; 0x03
    403e:	9c 83       	std	Y+4, r25	; 0x04
    4040:	ad 83       	std	Y+5, r26	; 0x05
    4042:	be 83       	std	Y+6, r27	; 0x06
	Local_s32DecSize = Local_s32Index+1;
    4044:	8b 89       	ldd	r24, Y+19	; 0x13
    4046:	9c 89       	ldd	r25, Y+20	; 0x14
    4048:	ad 89       	ldd	r26, Y+21	; 0x15
    404a:	be 89       	ldd	r27, Y+22	; 0x16
    404c:	01 96       	adiw	r24, 0x01	; 1
    404e:	a1 1d       	adc	r26, r1
    4050:	b1 1d       	adc	r27, r1
    4052:	8f 87       	std	Y+15, r24	; 0x0f
    4054:	98 8b       	std	Y+16, r25	; 0x10
    4056:	a9 8b       	std	Y+17, r26	; 0x11
    4058:	ba 8b       	std	Y+18, r27	; 0x12
	/* Store the floating point after the number */
	pu8Buffer[Local_s32Index--] = '.';
    405a:	2b 89       	ldd	r18, Y+19	; 0x13
    405c:	3c 89       	ldd	r19, Y+20	; 0x14
    405e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4062:	fc 01       	movw	r30, r24
    4064:	e2 0f       	add	r30, r18
    4066:	f3 1f       	adc	r31, r19
    4068:	8e e2       	ldi	r24, 0x2E	; 46
    406a:	80 83       	st	Z, r24
    406c:	8b 89       	ldd	r24, Y+19	; 0x13
    406e:	9c 89       	ldd	r25, Y+20	; 0x14
    4070:	ad 89       	ldd	r26, Y+21	; 0x15
    4072:	be 89       	ldd	r27, Y+22	; 0x16
    4074:	01 97       	sbiw	r24, 0x01	; 1
    4076:	a1 09       	sbc	r26, r1
    4078:	b1 09       	sbc	r27, r1
    407a:	8b 8b       	std	Y+19, r24	; 0x13
    407c:	9c 8b       	std	Y+20, r25	; 0x14
    407e:	ad 8b       	std	Y+21, r26	; 0x15
    4080:	be 8b       	std	Y+22, r27	; 0x16
    4082:	35 c0       	rjmp	.+106    	; 0x40ee <Util_String_vFloatToStr+0x210>
	/* Store the integer part if it is found */
	while(Local_s32Index >= Local_xSignBorder)
	{
		pu8Buffer[Local_s32Index--] = ((Local_s32IntBuff % 10) + '0');
    4084:	2b 89       	ldd	r18, Y+19	; 0x13
    4086:	3c 89       	ldd	r19, Y+20	; 0x14
    4088:	8b 8d       	ldd	r24, Y+27	; 0x1b
    408a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    408c:	8c 01       	movw	r16, r24
    408e:	02 0f       	add	r16, r18
    4090:	13 1f       	adc	r17, r19
    4092:	8b 81       	ldd	r24, Y+3	; 0x03
    4094:	9c 81       	ldd	r25, Y+4	; 0x04
    4096:	ad 81       	ldd	r26, Y+5	; 0x05
    4098:	be 81       	ldd	r27, Y+6	; 0x06
    409a:	2a e0       	ldi	r18, 0x0A	; 10
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e0       	ldi	r20, 0x00	; 0
    40a0:	50 e0       	ldi	r21, 0x00	; 0
    40a2:	bc 01       	movw	r22, r24
    40a4:	cd 01       	movw	r24, r26
    40a6:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__divmodsi4>
    40aa:	dc 01       	movw	r26, r24
    40ac:	cb 01       	movw	r24, r22
    40ae:	80 5d       	subi	r24, 0xD0	; 208
    40b0:	f8 01       	movw	r30, r16
    40b2:	80 83       	st	Z, r24
    40b4:	8b 89       	ldd	r24, Y+19	; 0x13
    40b6:	9c 89       	ldd	r25, Y+20	; 0x14
    40b8:	ad 89       	ldd	r26, Y+21	; 0x15
    40ba:	be 89       	ldd	r27, Y+22	; 0x16
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	a1 09       	sbc	r26, r1
    40c0:	b1 09       	sbc	r27, r1
    40c2:	8b 8b       	std	Y+19, r24	; 0x13
    40c4:	9c 8b       	std	Y+20, r25	; 0x14
    40c6:	ad 8b       	std	Y+21, r26	; 0x15
    40c8:	be 8b       	std	Y+22, r27	; 0x16
		Local_s32IntBuff /= 10;
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	9c 81       	ldd	r25, Y+4	; 0x04
    40ce:	ad 81       	ldd	r26, Y+5	; 0x05
    40d0:	be 81       	ldd	r27, Y+6	; 0x06
    40d2:	2a e0       	ldi	r18, 0x0A	; 10
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	40 e0       	ldi	r20, 0x00	; 0
    40d8:	50 e0       	ldi	r21, 0x00	; 0
    40da:	bc 01       	movw	r22, r24
    40dc:	cd 01       	movw	r24, r26
    40de:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__divmodsi4>
    40e2:	da 01       	movw	r26, r20
    40e4:	c9 01       	movw	r24, r18
    40e6:	8b 83       	std	Y+3, r24	; 0x03
    40e8:	9c 83       	std	Y+4, r25	; 0x04
    40ea:	ad 83       	std	Y+5, r26	; 0x05
    40ec:	be 83       	std	Y+6, r27	; 0x06
	Local_s32IntBuff = (sint32)Copy_f32NUM;
	Local_s32DecSize = Local_s32Index+1;
	/* Store the floating point after the number */
	pu8Buffer[Local_s32Index--] = '.';
	/* Store the integer part if it is found */
	while(Local_s32Index >= Local_xSignBorder)
    40ee:	89 81       	ldd	r24, Y+1	; 0x01
    40f0:	28 2f       	mov	r18, r24
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	40 e0       	ldi	r20, 0x00	; 0
    40f6:	50 e0       	ldi	r21, 0x00	; 0
    40f8:	8b 89       	ldd	r24, Y+19	; 0x13
    40fa:	9c 89       	ldd	r25, Y+20	; 0x14
    40fc:	ad 89       	ldd	r26, Y+21	; 0x15
    40fe:	be 89       	ldd	r27, Y+22	; 0x16
    4100:	82 17       	cp	r24, r18
    4102:	93 07       	cpc	r25, r19
    4104:	a4 07       	cpc	r26, r20
    4106:	b5 07       	cpc	r27, r21
    4108:	0c f0       	brlt	.+2      	; 0x410c <Util_String_vFloatToStr+0x22e>
    410a:	bc cf       	rjmp	.-136    	; 0x4084 <Util_String_vFloatToStr+0x1a6>
	{
		pu8Buffer[Local_s32Index--] = ((Local_s32IntBuff % 10) + '0');
		Local_s32IntBuff /= 10;
	}

	Local_f32SubBuffer = Copy_f32NUM - (float32) Local_s32NumToSub;
    410c:	6f 81       	ldd	r22, Y+7	; 0x07
    410e:	78 85       	ldd	r23, Y+8	; 0x08
    4110:	89 85       	ldd	r24, Y+9	; 0x09
    4112:	9a 85       	ldd	r25, Y+10	; 0x0a
    4114:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4118:	9b 01       	movw	r18, r22
    411a:	ac 01       	movw	r20, r24
    411c:	6f 89       	ldd	r22, Y+23	; 0x17
    411e:	78 8d       	ldd	r23, Y+24	; 0x18
    4120:	89 8d       	ldd	r24, Y+25	; 0x19
    4122:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4124:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	8b 87       	std	Y+11, r24	; 0x0b
    412e:	9c 87       	std	Y+12, r25	; 0x0c
    4130:	ad 87       	std	Y+13, r26	; 0x0d
    4132:	be 87       	std	Y+14, r27	; 0x0e
	/* Make index = 0 to be used as flag if the function exceeds the number
		of numbers after floating point */
	Local_s32Index = 0;
    4134:	1b 8a       	std	Y+19, r1	; 0x13
    4136:	1c 8a       	std	Y+20, r1	; 0x14
    4138:	1d 8a       	std	Y+21, r1	; 0x15
    413a:	1e 8a       	std	Y+22, r1	; 0x16
	/* Store the float part into the buffer */
	if(Local_f32SubBuffer > 0.0)
    413c:	6b 85       	ldd	r22, Y+11	; 0x0b
    413e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4140:	8d 85       	ldd	r24, Y+13	; 0x0d
    4142:	9e 85       	ldd	r25, Y+14	; 0x0e
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 e0       	ldi	r20, 0x00	; 0
    414a:	50 e0       	ldi	r21, 0x00	; 0
    414c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4150:	18 16       	cp	r1, r24
    4152:	0c f4       	brge	.+2      	; 0x4156 <Util_String_vFloatToStr+0x278>
    4154:	66 c0       	rjmp	.+204    	; 0x4222 <Util_String_vFloatToStr+0x344>
    4156:	7b c0       	rjmp	.+246    	; 0x424e <Util_String_vFloatToStr+0x370>
	{
		while(Local_f32SubBuffer > 0.0)
		{
			Local_f32SubBuffer *= 10;
    4158:	6b 85       	ldd	r22, Y+11	; 0x0b
    415a:	7c 85       	ldd	r23, Y+12	; 0x0c
    415c:	8d 85       	ldd	r24, Y+13	; 0x0d
    415e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	40 e2       	ldi	r20, 0x20	; 32
    4166:	51 e4       	ldi	r21, 0x41	; 65
    4168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	8b 87       	std	Y+11, r24	; 0x0b
    4172:	9c 87       	std	Y+12, r25	; 0x0c
    4174:	ad 87       	std	Y+13, r26	; 0x0d
    4176:	be 87       	std	Y+14, r27	; 0x0e
			pu8Buffer[Local_s32DecSize] = Local_f32SubBuffer+'0';
    4178:	2f 85       	ldd	r18, Y+15	; 0x0f
    417a:	38 89       	ldd	r19, Y+16	; 0x10
    417c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    417e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4180:	8c 01       	movw	r16, r24
    4182:	02 0f       	add	r16, r18
    4184:	13 1f       	adc	r17, r19
    4186:	6b 85       	ldd	r22, Y+11	; 0x0b
    4188:	7c 85       	ldd	r23, Y+12	; 0x0c
    418a:	8d 85       	ldd	r24, Y+13	; 0x0d
    418c:	9e 85       	ldd	r25, Y+14	; 0x0e
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e4       	ldi	r20, 0x40	; 64
    4194:	52 e4       	ldi	r21, 0x42	; 66
    4196:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	f8 01       	movw	r30, r16
    41ac:	80 83       	st	Z, r24
			Local_s32NumToSub = Local_f32SubBuffer;
    41ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41b6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	8f 83       	std	Y+7, r24	; 0x07
    41c0:	98 87       	std	Y+8, r25	; 0x08
    41c2:	a9 87       	std	Y+9, r26	; 0x09
    41c4:	ba 87       	std	Y+10, r27	; 0x0a
			Local_f32SubBuffer = Local_f32SubBuffer - Local_s32NumToSub;
    41c6:	6f 81       	ldd	r22, Y+7	; 0x07
    41c8:	78 85       	ldd	r23, Y+8	; 0x08
    41ca:	89 85       	ldd	r24, Y+9	; 0x09
    41cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    41d2:	9b 01       	movw	r18, r22
    41d4:	ac 01       	movw	r20, r24
    41d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    41d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    41da:	8d 85       	ldd	r24, Y+13	; 0x0d
    41dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    41de:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	8b 87       	std	Y+11, r24	; 0x0b
    41e8:	9c 87       	std	Y+12, r25	; 0x0c
    41ea:	ad 87       	std	Y+13, r26	; 0x0d
    41ec:	be 87       	std	Y+14, r27	; 0x0e
			Local_s32DecSize++;
    41ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    41f0:	98 89       	ldd	r25, Y+16	; 0x10
    41f2:	a9 89       	ldd	r26, Y+17	; 0x11
    41f4:	ba 89       	ldd	r27, Y+18	; 0x12
    41f6:	01 96       	adiw	r24, 0x01	; 1
    41f8:	a1 1d       	adc	r26, r1
    41fa:	b1 1d       	adc	r27, r1
    41fc:	8f 87       	std	Y+15, r24	; 0x0f
    41fe:	98 8b       	std	Y+16, r25	; 0x10
    4200:	a9 8b       	std	Y+17, r26	; 0x11
    4202:	ba 8b       	std	Y+18, r27	; 0x12
			Local_s32Index++;
    4204:	8b 89       	ldd	r24, Y+19	; 0x13
    4206:	9c 89       	ldd	r25, Y+20	; 0x14
    4208:	ad 89       	ldd	r26, Y+21	; 0x15
    420a:	be 89       	ldd	r27, Y+22	; 0x16
    420c:	01 96       	adiw	r24, 0x01	; 1
    420e:	a1 1d       	adc	r26, r1
    4210:	b1 1d       	adc	r27, r1
    4212:	8b 8b       	std	Y+19, r24	; 0x13
    4214:	9c 8b       	std	Y+20, r25	; 0x14
    4216:	ad 8b       	std	Y+21, r26	; 0x15
    4218:	be 8b       	std	Y+22, r27	; 0x16
			/* Check if number of numbers after floating point is stasfied */
			if(Copy_u8N_NumbersAfterFPonit <= (uint8) Local_s32Index)
    421a:	9b 89       	ldd	r25, Y+19	; 0x13
    421c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    421e:	98 17       	cp	r25, r24
    4220:	68 f4       	brcc	.+26     	; 0x423c <Util_String_vFloatToStr+0x35e>
		of numbers after floating point */
	Local_s32Index = 0;
	/* Store the float part into the buffer */
	if(Local_f32SubBuffer > 0.0)
	{
		while(Local_f32SubBuffer > 0.0)
    4222:	6b 85       	ldd	r22, Y+11	; 0x0b
    4224:	7c 85       	ldd	r23, Y+12	; 0x0c
    4226:	8d 85       	ldd	r24, Y+13	; 0x0d
    4228:	9e 85       	ldd	r25, Y+14	; 0x0e
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	40 e0       	ldi	r20, 0x00	; 0
    4230:	50 e0       	ldi	r21, 0x00	; 0
    4232:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4236:	18 16       	cp	r1, r24
    4238:	0c f4       	brge	.+2      	; 0x423c <Util_String_vFloatToStr+0x35e>
    423a:	8e cf       	rjmp	.-228    	; 0x4158 <Util_String_vFloatToStr+0x27a>
			{
				break;
			}
		}
		/* Puts null in the end of the string */
		pu8Buffer[Local_s32DecSize] = '\0';
    423c:	8f 85       	ldd	r24, Y+15	; 0x0f
    423e:	98 89       	ldd	r25, Y+16	; 0x10
    4240:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4242:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4244:	f9 01       	movw	r30, r18
    4246:	e8 0f       	add	r30, r24
    4248:	f9 1f       	adc	r31, r25
    424a:	10 82       	st	Z, r1
    424c:	0b c0       	rjmp	.+22     	; 0x4264 <Util_String_vFloatToStr+0x386>
	}
	else
	{
		/* Replaces the floating point by null if the number doesn't have
			float numbers */
		pu8Buffer[Local_s32DecSize - 1] = '\0';
    424e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4250:	98 89       	ldd	r25, Y+16	; 0x10
    4252:	9c 01       	movw	r18, r24
    4254:	21 50       	subi	r18, 0x01	; 1
    4256:	30 40       	sbci	r19, 0x00	; 0
    4258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    425a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    425c:	fc 01       	movw	r30, r24
    425e:	e2 0f       	add	r30, r18
    4260:	f3 1f       	adc	r31, r19
    4262:	10 82       	st	Z, r1
	}
}
    4264:	6d 96       	adiw	r28, 0x1d	; 29
    4266:	0f b6       	in	r0, 0x3f	; 63
    4268:	f8 94       	cli
    426a:	de bf       	out	0x3e, r29	; 62
    426c:	0f be       	out	0x3f, r0	; 63
    426e:	cd bf       	out	0x3d, r28	; 61
    4270:	cf 91       	pop	r28
    4272:	df 91       	pop	r29
    4274:	1f 91       	pop	r17
    4276:	0f 91       	pop	r16
    4278:	08 95       	ret

0000427a <Util_String_vRemoveSpaces>:

void Util_String_vRemoveSpaces(uint8* u8String)
{
    427a:	df 93       	push	r29
    427c:	cf 93       	push	r28
    427e:	00 d0       	rcall	.+0      	; 0x4280 <Util_String_vRemoveSpaces+0x6>
    4280:	00 d0       	rcall	.+0      	; 0x4282 <Util_String_vRemoveSpaces+0x8>
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	9c 83       	std	Y+4, r25	; 0x04
    4288:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8Index		= 0;
    428a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Index2	= 0;
    428c:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Index = 0; u8String[Local_u8Index] != '\0' ; Local_u8Index++)
    428e:	1a 82       	std	Y+2, r1	; 0x02
    4290:	40 c0       	rjmp	.+128    	; 0x4312 <Util_String_vRemoveSpaces+0x98>
	{
		if(u8String[Local_u8Index] == ' ')
    4292:	8a 81       	ldd	r24, Y+2	; 0x02
    4294:	28 2f       	mov	r18, r24
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	8b 81       	ldd	r24, Y+3	; 0x03
    429a:	9c 81       	ldd	r25, Y+4	; 0x04
    429c:	fc 01       	movw	r30, r24
    429e:	e2 0f       	add	r30, r18
    42a0:	f3 1f       	adc	r31, r19
    42a2:	80 81       	ld	r24, Z
    42a4:	80 32       	cpi	r24, 0x20	; 32
    42a6:	91 f5       	brne	.+100    	; 0x430c <Util_String_vRemoveSpaces+0x92>
    42a8:	26 c0       	rjmp	.+76     	; 0x42f6 <Util_String_vRemoveSpaces+0x7c>
		{
			while(u8String[Local_u8Index] == ' ')
			{
				for(Local_u8Index2 = Local_u8Index; u8String[Local_u8Index2] != '\0' ; Local_u8Index2++)
    42aa:	8a 81       	ldd	r24, Y+2	; 0x02
    42ac:	89 83       	std	Y+1, r24	; 0x01
    42ae:	18 c0       	rjmp	.+48     	; 0x42e0 <Util_String_vRemoveSpaces+0x66>
				{
					u8String[Local_u8Index2] = u8String[Local_u8Index2 + 1];
    42b0:	89 81       	ldd	r24, Y+1	; 0x01
    42b2:	28 2f       	mov	r18, r24
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	8b 81       	ldd	r24, Y+3	; 0x03
    42b8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ba:	dc 01       	movw	r26, r24
    42bc:	a2 0f       	add	r26, r18
    42be:	b3 1f       	adc	r27, r19
    42c0:	89 81       	ldd	r24, Y+1	; 0x01
    42c2:	88 2f       	mov	r24, r24
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	9c 01       	movw	r18, r24
    42c8:	2f 5f       	subi	r18, 0xFF	; 255
    42ca:	3f 4f       	sbci	r19, 0xFF	; 255
    42cc:	8b 81       	ldd	r24, Y+3	; 0x03
    42ce:	9c 81       	ldd	r25, Y+4	; 0x04
    42d0:	fc 01       	movw	r30, r24
    42d2:	e2 0f       	add	r30, r18
    42d4:	f3 1f       	adc	r31, r19
    42d6:	80 81       	ld	r24, Z
    42d8:	8c 93       	st	X, r24
	{
		if(u8String[Local_u8Index] == ' ')
		{
			while(u8String[Local_u8Index] == ' ')
			{
				for(Local_u8Index2 = Local_u8Index; u8String[Local_u8Index2] != '\0' ; Local_u8Index2++)
    42da:	89 81       	ldd	r24, Y+1	; 0x01
    42dc:	8f 5f       	subi	r24, 0xFF	; 255
    42de:	89 83       	std	Y+1, r24	; 0x01
    42e0:	89 81       	ldd	r24, Y+1	; 0x01
    42e2:	28 2f       	mov	r18, r24
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	8b 81       	ldd	r24, Y+3	; 0x03
    42e8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ea:	fc 01       	movw	r30, r24
    42ec:	e2 0f       	add	r30, r18
    42ee:	f3 1f       	adc	r31, r19
    42f0:	80 81       	ld	r24, Z
    42f2:	88 23       	and	r24, r24
    42f4:	e9 f6       	brne	.-70     	; 0x42b0 <Util_String_vRemoveSpaces+0x36>
	uint8 Local_u8Index2	= 0;
	for(Local_u8Index = 0; u8String[Local_u8Index] != '\0' ; Local_u8Index++)
	{
		if(u8String[Local_u8Index] == ' ')
		{
			while(u8String[Local_u8Index] == ' ')
    42f6:	8a 81       	ldd	r24, Y+2	; 0x02
    42f8:	28 2f       	mov	r18, r24
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	8b 81       	ldd	r24, Y+3	; 0x03
    42fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4300:	fc 01       	movw	r30, r24
    4302:	e2 0f       	add	r30, r18
    4304:	f3 1f       	adc	r31, r19
    4306:	80 81       	ld	r24, Z
    4308:	80 32       	cpi	r24, 0x20	; 32
    430a:	79 f2       	breq	.-98     	; 0x42aa <Util_String_vRemoveSpaces+0x30>

void Util_String_vRemoveSpaces(uint8* u8String)
{
	uint8 Local_u8Index		= 0;
	uint8 Local_u8Index2	= 0;
	for(Local_u8Index = 0; u8String[Local_u8Index] != '\0' ; Local_u8Index++)
    430c:	8a 81       	ldd	r24, Y+2	; 0x02
    430e:	8f 5f       	subi	r24, 0xFF	; 255
    4310:	8a 83       	std	Y+2, r24	; 0x02
    4312:	8a 81       	ldd	r24, Y+2	; 0x02
    4314:	28 2f       	mov	r18, r24
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	8b 81       	ldd	r24, Y+3	; 0x03
    431a:	9c 81       	ldd	r25, Y+4	; 0x04
    431c:	fc 01       	movw	r30, r24
    431e:	e2 0f       	add	r30, r18
    4320:	f3 1f       	adc	r31, r19
    4322:	80 81       	ld	r24, Z
    4324:	88 23       	and	r24, r24
    4326:	09 f0       	breq	.+2      	; 0x432a <Util_String_vRemoveSpaces+0xb0>
    4328:	b4 cf       	rjmp	.-152    	; 0x4292 <Util_String_vRemoveSpaces+0x18>
					u8String[Local_u8Index2] = u8String[Local_u8Index2 + 1];
				}
			}
		}
	}
}
    432a:	0f 90       	pop	r0
    432c:	0f 90       	pop	r0
    432e:	0f 90       	pop	r0
    4330:	0f 90       	pop	r0
    4332:	cf 91       	pop	r28
    4334:	df 91       	pop	r29
    4336:	08 95       	ret

00004338 <Util_String_xComp>:


uint8 Util_String_xComp(const uint8 *Copy_String1 ,const uint8 *Copy_String2 )
{
    4338:	df 93       	push	r29
    433a:	cf 93       	push	r28
    433c:	00 d0       	rcall	.+0      	; 0x433e <Util_String_xComp+0x6>
    433e:	00 d0       	rcall	.+0      	; 0x4340 <Util_String_xComp+0x8>
    4340:	cd b7       	in	r28, 0x3d	; 61
    4342:	de b7       	in	r29, 0x3e	; 62
    4344:	9a 83       	std	Y+2, r25	; 0x02
    4346:	89 83       	std	Y+1, r24	; 0x01
    4348:	7c 83       	std	Y+4, r23	; 0x04
    434a:	6b 83       	std	Y+3, r22	; 0x03
    434c:	12 c0       	rjmp	.+36     	; 0x4372 <Util_String_xComp+0x3a>
	while(*Copy_String1)
	{
		if(*Copy_String1 != *Copy_String2)
    434e:	e9 81       	ldd	r30, Y+1	; 0x01
    4350:	fa 81       	ldd	r31, Y+2	; 0x02
    4352:	90 81       	ld	r25, Z
    4354:	eb 81       	ldd	r30, Y+3	; 0x03
    4356:	fc 81       	ldd	r31, Y+4	; 0x04
    4358:	80 81       	ld	r24, Z
    435a:	98 17       	cp	r25, r24
    435c:	79 f4       	brne	.+30     	; 0x437c <Util_String_xComp+0x44>
		{
			break;
		}
		Copy_String1++;
    435e:	89 81       	ldd	r24, Y+1	; 0x01
    4360:	9a 81       	ldd	r25, Y+2	; 0x02
    4362:	01 96       	adiw	r24, 0x01	; 1
    4364:	9a 83       	std	Y+2, r25	; 0x02
    4366:	89 83       	std	Y+1, r24	; 0x01
		Copy_String2++;
    4368:	8b 81       	ldd	r24, Y+3	; 0x03
    436a:	9c 81       	ldd	r25, Y+4	; 0x04
    436c:	01 96       	adiw	r24, 0x01	; 1
    436e:	9c 83       	std	Y+4, r25	; 0x04
    4370:	8b 83       	std	Y+3, r24	; 0x03
}


uint8 Util_String_xComp(const uint8 *Copy_String1 ,const uint8 *Copy_String2 )
{
	while(*Copy_String1)
    4372:	e9 81       	ldd	r30, Y+1	; 0x01
    4374:	fa 81       	ldd	r31, Y+2	; 0x02
    4376:	80 81       	ld	r24, Z
    4378:	88 23       	and	r24, r24
    437a:	49 f7       	brne	.-46     	; 0x434e <Util_String_xComp+0x16>
			break;
		}
		Copy_String1++;
		Copy_String2++;
	}
	return *(const uint8*)Copy_String1 - *(const uint8*)Copy_String2;
    437c:	e9 81       	ldd	r30, Y+1	; 0x01
    437e:	fa 81       	ldd	r31, Y+2	; 0x02
    4380:	90 81       	ld	r25, Z
    4382:	eb 81       	ldd	r30, Y+3	; 0x03
    4384:	fc 81       	ldd	r31, Y+4	; 0x04
    4386:	80 81       	ld	r24, Z
    4388:	29 2f       	mov	r18, r25
    438a:	28 1b       	sub	r18, r24
    438c:	82 2f       	mov	r24, r18
}
    438e:	0f 90       	pop	r0
    4390:	0f 90       	pop	r0
    4392:	0f 90       	pop	r0
    4394:	0f 90       	pop	r0
    4396:	cf 91       	pop	r28
    4398:	df 91       	pop	r29
    439a:	08 95       	ret

0000439c <main>:
#include "Alarm_interface.h"
#include "LDR_interface.h"
#include "Display_interface.h"
#include "Util_String_interface.h"
int main(void)
{
    439c:	df 93       	push	r29
    439e:	cf 93       	push	r28
    43a0:	cd b7       	in	r28, 0x3d	; 61
    43a2:	de b7       	in	r29, 0x3e	; 62
    43a4:	65 97       	sbiw	r28, 0x15	; 21
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	f8 94       	cli
    43aa:	de bf       	out	0x3e, r29	; 62
    43ac:	0f be       	out	0x3f, r0	; 63
    43ae:	cd bf       	out	0x3d, r28	; 61
	/* Initialize USART */
	USART_ConfigType USART_DATA;
	USART_DATA.BaudRate	=	9600;
    43b0:	80 e8       	ldi	r24, 0x80	; 128
    43b2:	95 e2       	ldi	r25, 0x25	; 37
    43b4:	9a 83       	std	Y+2, r25	; 0x02
    43b6:	89 83       	std	Y+1, r24	; 0x01
	USART_DATA.DataSize	=	USART_EIGHT_BITS;
    43b8:	83 e0       	ldi	r24, 0x03	; 3
    43ba:	8c 83       	std	Y+4, r24	; 0x04
	USART_DATA.Parity	=	USART_PARITY_OFF;
    43bc:	1d 82       	std	Y+5, r1	; 0x05
	USART_DATA.StopBit	=	USART_ONE_STOP_BIT;
    43be:	1e 82       	std	Y+6, r1	; 0x06
	USART_DATA.State	=	USART_TRANSMITER_RECIEVER;
    43c0:	82 e0       	ldi	r24, 0x02	; 2
    43c2:	8f 83       	std	Y+7, r24	; 0x07

	USART_xInit(USART1,&USART_DATA);
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	9e 01       	movw	r18, r28
    43c8:	2f 5f       	subi	r18, 0xFF	; 255
    43ca:	3f 4f       	sbci	r19, 0xFF	; 255
    43cc:	b9 01       	movw	r22, r18
    43ce:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <USART_xInit>

	ADC_Typedef ADC_DATA;

	/* Initialize ADC */
	GPIO_vInitPortPin(GPIOA,GPIO_PIN_0,GPIO_IN);
    43d2:	81 e4       	ldi	r24, 0x41	; 65
    43d4:	60 e0       	ldi	r22, 0x00	; 0
    43d6:	40 e0       	ldi	r20, 0x00	; 0
    43d8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GPIO_vInitPortPin>

	ADC_DATA.ADC_xAdjustState 	= ADC_LEFT_ADJUST;
    43dc:	1d 86       	std	Y+13, r1	; 0x0d
	ADC_DATA.ADC_xState 		= ADC_ENABLE;
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	89 8b       	std	Y+17, r24	; 0x11
	ADC_DATA.ADC_xPrescaler 	= ADC_PRESCALER_128;
    43e2:	87 e0       	ldi	r24, 0x07	; 7
    43e4:	8b 87       	std	Y+11, r24	; 0x0b
	ADC_DATA.ADC_xVoltRef 		= ADC_AVCC_EX_CAP;
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	8c 87       	std	Y+12, r24	; 0x0c
	ADC_DATA.ADC_xInterruptState= ADC_DISABLE_INTERRUPT;
    43ea:	1e 86       	std	Y+14, r1	; 0x0e
	ADC_DATA.ADC_xTriggerState	= ADC_ENABLE_AUTO_TRIGGER;
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	8f 87       	std	Y+15, r24	; 0x0f
	ADC_DATA.ADC_xTriggerSource = ADC_TRSRC_FREE_RUNNING_MODE;
    43f0:	18 8a       	std	Y+16, r1	; 0x10

	ADC_xInit(&ADC_DATA);
    43f2:	ce 01       	movw	r24, r28
    43f4:	0a 96       	adiw	r24, 0x0a	; 10
    43f6:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_xInit>

	/*Initialize PWM*/
	PWM_Typedef PWM_DATA;
	PWM_DATA.Mode		=	TIMER1_WGM_FPWM_ICR;
    43fa:	8a e0       	ldi	r24, 0x0A	; 10
    43fc:	8b 8b       	std	Y+19, r24	; 0x13
	PWM_DATA.COM_Mode	=	Clr_OC1A_OC1B_CompMatchNonInvert;
    43fe:	82 e0       	ldi	r24, 0x02	; 2
    4400:	8a 8b       	std	Y+18, r24	; 0x12
	PWM_DATA.Channel	=	PWM_CH_1;
    4402:	1c 8a       	std	Y+20, r1	; 0x14
	PWM_DATA.Prescaler	=	PWM_Prescaler_256;
    4404:	84 e0       	ldi	r24, 0x04	; 4
    4406:	8d 8b       	std	Y+21, r24	; 0x15
	PWM_vInit(&PWM_DATA);
    4408:	ce 01       	movw	r24, r28
    440a:	42 96       	adiw	r24, 0x12	; 18
    440c:	0e 94 cb 14 	call	0x2996	; 0x2996 <PWM_vInit>
	PWM_vSetFPWM_Freq(50);
    4410:	82 e3       	ldi	r24, 0x32	; 50
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	0e 94 50 19 	call	0x32a0	; 0x32a0 <PWM_vSetFPWM_Freq>

	/* Initialize temperature sensor */
	TempS_vInit();
    4418:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <TempS_vInit>
	/* Initialize LDR */
	LDR_vInit();
    441c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <LDR_vInit>

	/* Initialize Alarm */
	Alarm_xInit(ALARM_1,ALARM_OFF);
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	60 e0       	ldi	r22, 0x00	; 0
    4424:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Alarm_xInit>

	/* Initialize Home settings */
	Home_vInit();
    4428:	0e 94 3d 10 	call	0x207a	; 0x207a <Home_vInit>

	while(1)
	{
		if(Home_xEnter() == E_OK)
    442c:	0e 94 4c 10 	call	0x2098	; 0x2098 <Home_xEnter>
    4430:	81 30       	cpi	r24, 0x01	; 1
    4432:	e1 f7       	brne	.-8      	; 0x442c <main+0x90>
		{
			while(Home_xOptionHandle() == E_OK);
    4434:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <Home_xOptionHandle>
    4438:	81 30       	cpi	r24, 0x01	; 1
    443a:	e1 f3       	breq	.-8      	; 0x4434 <main+0x98>
    443c:	f7 cf       	rjmp	.-18     	; 0x442c <main+0x90>

0000443e <__mulsi3>:
    443e:	62 9f       	mul	r22, r18
    4440:	d0 01       	movw	r26, r0
    4442:	73 9f       	mul	r23, r19
    4444:	f0 01       	movw	r30, r0
    4446:	82 9f       	mul	r24, r18
    4448:	e0 0d       	add	r30, r0
    444a:	f1 1d       	adc	r31, r1
    444c:	64 9f       	mul	r22, r20
    444e:	e0 0d       	add	r30, r0
    4450:	f1 1d       	adc	r31, r1
    4452:	92 9f       	mul	r25, r18
    4454:	f0 0d       	add	r31, r0
    4456:	83 9f       	mul	r24, r19
    4458:	f0 0d       	add	r31, r0
    445a:	74 9f       	mul	r23, r20
    445c:	f0 0d       	add	r31, r0
    445e:	65 9f       	mul	r22, r21
    4460:	f0 0d       	add	r31, r0
    4462:	99 27       	eor	r25, r25
    4464:	72 9f       	mul	r23, r18
    4466:	b0 0d       	add	r27, r0
    4468:	e1 1d       	adc	r30, r1
    446a:	f9 1f       	adc	r31, r25
    446c:	63 9f       	mul	r22, r19
    446e:	b0 0d       	add	r27, r0
    4470:	e1 1d       	adc	r30, r1
    4472:	f9 1f       	adc	r31, r25
    4474:	bd 01       	movw	r22, r26
    4476:	cf 01       	movw	r24, r30
    4478:	11 24       	eor	r1, r1
    447a:	08 95       	ret

0000447c <__udivmodsi4>:
    447c:	a1 e2       	ldi	r26, 0x21	; 33
    447e:	1a 2e       	mov	r1, r26
    4480:	aa 1b       	sub	r26, r26
    4482:	bb 1b       	sub	r27, r27
    4484:	fd 01       	movw	r30, r26
    4486:	0d c0       	rjmp	.+26     	; 0x44a2 <__udivmodsi4_ep>

00004488 <__udivmodsi4_loop>:
    4488:	aa 1f       	adc	r26, r26
    448a:	bb 1f       	adc	r27, r27
    448c:	ee 1f       	adc	r30, r30
    448e:	ff 1f       	adc	r31, r31
    4490:	a2 17       	cp	r26, r18
    4492:	b3 07       	cpc	r27, r19
    4494:	e4 07       	cpc	r30, r20
    4496:	f5 07       	cpc	r31, r21
    4498:	20 f0       	brcs	.+8      	; 0x44a2 <__udivmodsi4_ep>
    449a:	a2 1b       	sub	r26, r18
    449c:	b3 0b       	sbc	r27, r19
    449e:	e4 0b       	sbc	r30, r20
    44a0:	f5 0b       	sbc	r31, r21

000044a2 <__udivmodsi4_ep>:
    44a2:	66 1f       	adc	r22, r22
    44a4:	77 1f       	adc	r23, r23
    44a6:	88 1f       	adc	r24, r24
    44a8:	99 1f       	adc	r25, r25
    44aa:	1a 94       	dec	r1
    44ac:	69 f7       	brne	.-38     	; 0x4488 <__udivmodsi4_loop>
    44ae:	60 95       	com	r22
    44b0:	70 95       	com	r23
    44b2:	80 95       	com	r24
    44b4:	90 95       	com	r25
    44b6:	9b 01       	movw	r18, r22
    44b8:	ac 01       	movw	r20, r24
    44ba:	bd 01       	movw	r22, r26
    44bc:	cf 01       	movw	r24, r30
    44be:	08 95       	ret

000044c0 <__divmodsi4>:
    44c0:	97 fb       	bst	r25, 7
    44c2:	09 2e       	mov	r0, r25
    44c4:	05 26       	eor	r0, r21
    44c6:	0e d0       	rcall	.+28     	; 0x44e4 <__divmodsi4_neg1>
    44c8:	57 fd       	sbrc	r21, 7
    44ca:	04 d0       	rcall	.+8      	; 0x44d4 <__divmodsi4_neg2>
    44cc:	d7 df       	rcall	.-82     	; 0x447c <__udivmodsi4>
    44ce:	0a d0       	rcall	.+20     	; 0x44e4 <__divmodsi4_neg1>
    44d0:	00 1c       	adc	r0, r0
    44d2:	38 f4       	brcc	.+14     	; 0x44e2 <__divmodsi4_exit>

000044d4 <__divmodsi4_neg2>:
    44d4:	50 95       	com	r21
    44d6:	40 95       	com	r20
    44d8:	30 95       	com	r19
    44da:	21 95       	neg	r18
    44dc:	3f 4f       	sbci	r19, 0xFF	; 255
    44de:	4f 4f       	sbci	r20, 0xFF	; 255
    44e0:	5f 4f       	sbci	r21, 0xFF	; 255

000044e2 <__divmodsi4_exit>:
    44e2:	08 95       	ret

000044e4 <__divmodsi4_neg1>:
    44e4:	f6 f7       	brtc	.-4      	; 0x44e2 <__divmodsi4_exit>
    44e6:	90 95       	com	r25
    44e8:	80 95       	com	r24
    44ea:	70 95       	com	r23
    44ec:	61 95       	neg	r22
    44ee:	7f 4f       	sbci	r23, 0xFF	; 255
    44f0:	8f 4f       	sbci	r24, 0xFF	; 255
    44f2:	9f 4f       	sbci	r25, 0xFF	; 255
    44f4:	08 95       	ret

000044f6 <__prologue_saves__>:
    44f6:	2f 92       	push	r2
    44f8:	3f 92       	push	r3
    44fa:	4f 92       	push	r4
    44fc:	5f 92       	push	r5
    44fe:	6f 92       	push	r6
    4500:	7f 92       	push	r7
    4502:	8f 92       	push	r8
    4504:	9f 92       	push	r9
    4506:	af 92       	push	r10
    4508:	bf 92       	push	r11
    450a:	cf 92       	push	r12
    450c:	df 92       	push	r13
    450e:	ef 92       	push	r14
    4510:	ff 92       	push	r15
    4512:	0f 93       	push	r16
    4514:	1f 93       	push	r17
    4516:	cf 93       	push	r28
    4518:	df 93       	push	r29
    451a:	cd b7       	in	r28, 0x3d	; 61
    451c:	de b7       	in	r29, 0x3e	; 62
    451e:	ca 1b       	sub	r28, r26
    4520:	db 0b       	sbc	r29, r27
    4522:	0f b6       	in	r0, 0x3f	; 63
    4524:	f8 94       	cli
    4526:	de bf       	out	0x3e, r29	; 62
    4528:	0f be       	out	0x3f, r0	; 63
    452a:	cd bf       	out	0x3d, r28	; 61
    452c:	09 94       	ijmp

0000452e <__epilogue_restores__>:
    452e:	2a 88       	ldd	r2, Y+18	; 0x12
    4530:	39 88       	ldd	r3, Y+17	; 0x11
    4532:	48 88       	ldd	r4, Y+16	; 0x10
    4534:	5f 84       	ldd	r5, Y+15	; 0x0f
    4536:	6e 84       	ldd	r6, Y+14	; 0x0e
    4538:	7d 84       	ldd	r7, Y+13	; 0x0d
    453a:	8c 84       	ldd	r8, Y+12	; 0x0c
    453c:	9b 84       	ldd	r9, Y+11	; 0x0b
    453e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4540:	b9 84       	ldd	r11, Y+9	; 0x09
    4542:	c8 84       	ldd	r12, Y+8	; 0x08
    4544:	df 80       	ldd	r13, Y+7	; 0x07
    4546:	ee 80       	ldd	r14, Y+6	; 0x06
    4548:	fd 80       	ldd	r15, Y+5	; 0x05
    454a:	0c 81       	ldd	r16, Y+4	; 0x04
    454c:	1b 81       	ldd	r17, Y+3	; 0x03
    454e:	aa 81       	ldd	r26, Y+2	; 0x02
    4550:	b9 81       	ldd	r27, Y+1	; 0x01
    4552:	ce 0f       	add	r28, r30
    4554:	d1 1d       	adc	r29, r1
    4556:	0f b6       	in	r0, 0x3f	; 63
    4558:	f8 94       	cli
    455a:	de bf       	out	0x3e, r29	; 62
    455c:	0f be       	out	0x3f, r0	; 63
    455e:	cd bf       	out	0x3d, r28	; 61
    4560:	ed 01       	movw	r28, r26
    4562:	08 95       	ret

00004564 <strlen>:
    4564:	fc 01       	movw	r30, r24
    4566:	01 90       	ld	r0, Z+
    4568:	00 20       	and	r0, r0
    456a:	e9 f7       	brne	.-6      	; 0x4566 <strlen+0x2>
    456c:	80 95       	com	r24
    456e:	90 95       	com	r25
    4570:	8e 0f       	add	r24, r30
    4572:	9f 1f       	adc	r25, r31
    4574:	08 95       	ret

00004576 <vsprintf>:
    4576:	ae e0       	ldi	r26, 0x0E	; 14
    4578:	b0 e0       	ldi	r27, 0x00	; 0
    457a:	e1 ec       	ldi	r30, 0xC1	; 193
    457c:	f2 e2       	ldi	r31, 0x22	; 34
    457e:	0c 94 89 22 	jmp	0x4512	; 0x4512 <__prologue_saves__+0x1c>
    4582:	8c 01       	movw	r16, r24
    4584:	86 e0       	ldi	r24, 0x06	; 6
    4586:	8c 83       	std	Y+4, r24	; 0x04
    4588:	1a 83       	std	Y+2, r17	; 0x02
    458a:	09 83       	std	Y+1, r16	; 0x01
    458c:	8f ef       	ldi	r24, 0xFF	; 255
    458e:	9f e7       	ldi	r25, 0x7F	; 127
    4590:	9e 83       	std	Y+6, r25	; 0x06
    4592:	8d 83       	std	Y+5, r24	; 0x05
    4594:	ce 01       	movw	r24, r28
    4596:	01 96       	adiw	r24, 0x01	; 1
    4598:	0e 94 d7 22 	call	0x45ae	; 0x45ae <vfprintf>
    459c:	ef 81       	ldd	r30, Y+7	; 0x07
    459e:	f8 85       	ldd	r31, Y+8	; 0x08
    45a0:	e0 0f       	add	r30, r16
    45a2:	f1 1f       	adc	r31, r17
    45a4:	10 82       	st	Z, r1
    45a6:	2e 96       	adiw	r28, 0x0e	; 14
    45a8:	e4 e0       	ldi	r30, 0x04	; 4
    45aa:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__epilogue_restores__+0x1c>

000045ae <vfprintf>:
    45ae:	ab e0       	ldi	r26, 0x0B	; 11
    45b0:	b0 e0       	ldi	r27, 0x00	; 0
    45b2:	ed ed       	ldi	r30, 0xDD	; 221
    45b4:	f2 e2       	ldi	r31, 0x22	; 34
    45b6:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__prologue_saves__>
    45ba:	3c 01       	movw	r6, r24
    45bc:	2b 01       	movw	r4, r22
    45be:	5a 01       	movw	r10, r20
    45c0:	fc 01       	movw	r30, r24
    45c2:	17 82       	std	Z+7, r1	; 0x07
    45c4:	16 82       	std	Z+6, r1	; 0x06
    45c6:	83 81       	ldd	r24, Z+3	; 0x03
    45c8:	81 fd       	sbrc	r24, 1
    45ca:	03 c0       	rjmp	.+6      	; 0x45d2 <vfprintf+0x24>
    45cc:	6f ef       	ldi	r22, 0xFF	; 255
    45ce:	7f ef       	ldi	r23, 0xFF	; 255
    45d0:	c6 c1       	rjmp	.+908    	; 0x495e <vfprintf+0x3b0>
    45d2:	9a e0       	ldi	r25, 0x0A	; 10
    45d4:	89 2e       	mov	r8, r25
    45d6:	1e 01       	movw	r2, r28
    45d8:	08 94       	sec
    45da:	21 1c       	adc	r2, r1
    45dc:	31 1c       	adc	r3, r1
    45de:	f3 01       	movw	r30, r6
    45e0:	23 81       	ldd	r18, Z+3	; 0x03
    45e2:	f2 01       	movw	r30, r4
    45e4:	23 fd       	sbrc	r18, 3
    45e6:	85 91       	lpm	r24, Z+
    45e8:	23 ff       	sbrs	r18, 3
    45ea:	81 91       	ld	r24, Z+
    45ec:	2f 01       	movw	r4, r30
    45ee:	88 23       	and	r24, r24
    45f0:	09 f4       	brne	.+2      	; 0x45f4 <vfprintf+0x46>
    45f2:	b2 c1       	rjmp	.+868    	; 0x4958 <vfprintf+0x3aa>
    45f4:	85 32       	cpi	r24, 0x25	; 37
    45f6:	39 f4       	brne	.+14     	; 0x4606 <vfprintf+0x58>
    45f8:	23 fd       	sbrc	r18, 3
    45fa:	85 91       	lpm	r24, Z+
    45fc:	23 ff       	sbrs	r18, 3
    45fe:	81 91       	ld	r24, Z+
    4600:	2f 01       	movw	r4, r30
    4602:	85 32       	cpi	r24, 0x25	; 37
    4604:	29 f4       	brne	.+10     	; 0x4610 <vfprintf+0x62>
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	b3 01       	movw	r22, r6
    460a:	0e 94 ca 24 	call	0x4994	; 0x4994 <fputc>
    460e:	e7 cf       	rjmp	.-50     	; 0x45de <vfprintf+0x30>
    4610:	98 2f       	mov	r25, r24
    4612:	ff 24       	eor	r15, r15
    4614:	ee 24       	eor	r14, r14
    4616:	99 24       	eor	r9, r9
    4618:	ff e1       	ldi	r31, 0x1F	; 31
    461a:	ff 15       	cp	r31, r15
    461c:	d0 f0       	brcs	.+52     	; 0x4652 <vfprintf+0xa4>
    461e:	9b 32       	cpi	r25, 0x2B	; 43
    4620:	69 f0       	breq	.+26     	; 0x463c <vfprintf+0x8e>
    4622:	9c 32       	cpi	r25, 0x2C	; 44
    4624:	28 f4       	brcc	.+10     	; 0x4630 <vfprintf+0x82>
    4626:	90 32       	cpi	r25, 0x20	; 32
    4628:	59 f0       	breq	.+22     	; 0x4640 <vfprintf+0x92>
    462a:	93 32       	cpi	r25, 0x23	; 35
    462c:	91 f4       	brne	.+36     	; 0x4652 <vfprintf+0xa4>
    462e:	0e c0       	rjmp	.+28     	; 0x464c <vfprintf+0x9e>
    4630:	9d 32       	cpi	r25, 0x2D	; 45
    4632:	49 f0       	breq	.+18     	; 0x4646 <vfprintf+0x98>
    4634:	90 33       	cpi	r25, 0x30	; 48
    4636:	69 f4       	brne	.+26     	; 0x4652 <vfprintf+0xa4>
    4638:	41 e0       	ldi	r20, 0x01	; 1
    463a:	24 c0       	rjmp	.+72     	; 0x4684 <vfprintf+0xd6>
    463c:	52 e0       	ldi	r21, 0x02	; 2
    463e:	f5 2a       	or	r15, r21
    4640:	84 e0       	ldi	r24, 0x04	; 4
    4642:	f8 2a       	or	r15, r24
    4644:	28 c0       	rjmp	.+80     	; 0x4696 <vfprintf+0xe8>
    4646:	98 e0       	ldi	r25, 0x08	; 8
    4648:	f9 2a       	or	r15, r25
    464a:	25 c0       	rjmp	.+74     	; 0x4696 <vfprintf+0xe8>
    464c:	e0 e1       	ldi	r30, 0x10	; 16
    464e:	fe 2a       	or	r15, r30
    4650:	22 c0       	rjmp	.+68     	; 0x4696 <vfprintf+0xe8>
    4652:	f7 fc       	sbrc	r15, 7
    4654:	29 c0       	rjmp	.+82     	; 0x46a8 <vfprintf+0xfa>
    4656:	89 2f       	mov	r24, r25
    4658:	80 53       	subi	r24, 0x30	; 48
    465a:	8a 30       	cpi	r24, 0x0A	; 10
    465c:	70 f4       	brcc	.+28     	; 0x467a <vfprintf+0xcc>
    465e:	f6 fe       	sbrs	r15, 6
    4660:	05 c0       	rjmp	.+10     	; 0x466c <vfprintf+0xbe>
    4662:	98 9c       	mul	r9, r8
    4664:	90 2c       	mov	r9, r0
    4666:	11 24       	eor	r1, r1
    4668:	98 0e       	add	r9, r24
    466a:	15 c0       	rjmp	.+42     	; 0x4696 <vfprintf+0xe8>
    466c:	e8 9c       	mul	r14, r8
    466e:	e0 2c       	mov	r14, r0
    4670:	11 24       	eor	r1, r1
    4672:	e8 0e       	add	r14, r24
    4674:	f0 e2       	ldi	r31, 0x20	; 32
    4676:	ff 2a       	or	r15, r31
    4678:	0e c0       	rjmp	.+28     	; 0x4696 <vfprintf+0xe8>
    467a:	9e 32       	cpi	r25, 0x2E	; 46
    467c:	29 f4       	brne	.+10     	; 0x4688 <vfprintf+0xda>
    467e:	f6 fc       	sbrc	r15, 6
    4680:	6b c1       	rjmp	.+726    	; 0x4958 <vfprintf+0x3aa>
    4682:	40 e4       	ldi	r20, 0x40	; 64
    4684:	f4 2a       	or	r15, r20
    4686:	07 c0       	rjmp	.+14     	; 0x4696 <vfprintf+0xe8>
    4688:	9c 36       	cpi	r25, 0x6C	; 108
    468a:	19 f4       	brne	.+6      	; 0x4692 <vfprintf+0xe4>
    468c:	50 e8       	ldi	r21, 0x80	; 128
    468e:	f5 2a       	or	r15, r21
    4690:	02 c0       	rjmp	.+4      	; 0x4696 <vfprintf+0xe8>
    4692:	98 36       	cpi	r25, 0x68	; 104
    4694:	49 f4       	brne	.+18     	; 0x46a8 <vfprintf+0xfa>
    4696:	f2 01       	movw	r30, r4
    4698:	23 fd       	sbrc	r18, 3
    469a:	95 91       	lpm	r25, Z+
    469c:	23 ff       	sbrs	r18, 3
    469e:	91 91       	ld	r25, Z+
    46a0:	2f 01       	movw	r4, r30
    46a2:	99 23       	and	r25, r25
    46a4:	09 f0       	breq	.+2      	; 0x46a8 <vfprintf+0xfa>
    46a6:	b8 cf       	rjmp	.-144    	; 0x4618 <vfprintf+0x6a>
    46a8:	89 2f       	mov	r24, r25
    46aa:	85 54       	subi	r24, 0x45	; 69
    46ac:	83 30       	cpi	r24, 0x03	; 3
    46ae:	18 f0       	brcs	.+6      	; 0x46b6 <vfprintf+0x108>
    46b0:	80 52       	subi	r24, 0x20	; 32
    46b2:	83 30       	cpi	r24, 0x03	; 3
    46b4:	38 f4       	brcc	.+14     	; 0x46c4 <vfprintf+0x116>
    46b6:	44 e0       	ldi	r20, 0x04	; 4
    46b8:	50 e0       	ldi	r21, 0x00	; 0
    46ba:	a4 0e       	add	r10, r20
    46bc:	b5 1e       	adc	r11, r21
    46be:	5f e3       	ldi	r21, 0x3F	; 63
    46c0:	59 83       	std	Y+1, r21	; 0x01
    46c2:	0f c0       	rjmp	.+30     	; 0x46e2 <vfprintf+0x134>
    46c4:	93 36       	cpi	r25, 0x63	; 99
    46c6:	31 f0       	breq	.+12     	; 0x46d4 <vfprintf+0x126>
    46c8:	93 37       	cpi	r25, 0x73	; 115
    46ca:	79 f0       	breq	.+30     	; 0x46ea <vfprintf+0x13c>
    46cc:	93 35       	cpi	r25, 0x53	; 83
    46ce:	09 f0       	breq	.+2      	; 0x46d2 <vfprintf+0x124>
    46d0:	56 c0       	rjmp	.+172    	; 0x477e <vfprintf+0x1d0>
    46d2:	20 c0       	rjmp	.+64     	; 0x4714 <vfprintf+0x166>
    46d4:	f5 01       	movw	r30, r10
    46d6:	80 81       	ld	r24, Z
    46d8:	89 83       	std	Y+1, r24	; 0x01
    46da:	42 e0       	ldi	r20, 0x02	; 2
    46dc:	50 e0       	ldi	r21, 0x00	; 0
    46de:	a4 0e       	add	r10, r20
    46e0:	b5 1e       	adc	r11, r21
    46e2:	61 01       	movw	r12, r2
    46e4:	01 e0       	ldi	r16, 0x01	; 1
    46e6:	10 e0       	ldi	r17, 0x00	; 0
    46e8:	12 c0       	rjmp	.+36     	; 0x470e <vfprintf+0x160>
    46ea:	f5 01       	movw	r30, r10
    46ec:	c0 80       	ld	r12, Z
    46ee:	d1 80       	ldd	r13, Z+1	; 0x01
    46f0:	f6 fc       	sbrc	r15, 6
    46f2:	03 c0       	rjmp	.+6      	; 0x46fa <vfprintf+0x14c>
    46f4:	6f ef       	ldi	r22, 0xFF	; 255
    46f6:	7f ef       	ldi	r23, 0xFF	; 255
    46f8:	02 c0       	rjmp	.+4      	; 0x46fe <vfprintf+0x150>
    46fa:	69 2d       	mov	r22, r9
    46fc:	70 e0       	ldi	r23, 0x00	; 0
    46fe:	42 e0       	ldi	r20, 0x02	; 2
    4700:	50 e0       	ldi	r21, 0x00	; 0
    4702:	a4 0e       	add	r10, r20
    4704:	b5 1e       	adc	r11, r21
    4706:	c6 01       	movw	r24, r12
    4708:	0e 94 bf 24 	call	0x497e	; 0x497e <strnlen>
    470c:	8c 01       	movw	r16, r24
    470e:	5f e7       	ldi	r21, 0x7F	; 127
    4710:	f5 22       	and	r15, r21
    4712:	14 c0       	rjmp	.+40     	; 0x473c <vfprintf+0x18e>
    4714:	f5 01       	movw	r30, r10
    4716:	c0 80       	ld	r12, Z
    4718:	d1 80       	ldd	r13, Z+1	; 0x01
    471a:	f6 fc       	sbrc	r15, 6
    471c:	03 c0       	rjmp	.+6      	; 0x4724 <vfprintf+0x176>
    471e:	6f ef       	ldi	r22, 0xFF	; 255
    4720:	7f ef       	ldi	r23, 0xFF	; 255
    4722:	02 c0       	rjmp	.+4      	; 0x4728 <vfprintf+0x17a>
    4724:	69 2d       	mov	r22, r9
    4726:	70 e0       	ldi	r23, 0x00	; 0
    4728:	42 e0       	ldi	r20, 0x02	; 2
    472a:	50 e0       	ldi	r21, 0x00	; 0
    472c:	a4 0e       	add	r10, r20
    472e:	b5 1e       	adc	r11, r21
    4730:	c6 01       	movw	r24, r12
    4732:	0e 94 b4 24 	call	0x4968	; 0x4968 <strnlen_P>
    4736:	8c 01       	movw	r16, r24
    4738:	50 e8       	ldi	r21, 0x80	; 128
    473a:	f5 2a       	or	r15, r21
    473c:	f3 fe       	sbrs	r15, 3
    473e:	07 c0       	rjmp	.+14     	; 0x474e <vfprintf+0x1a0>
    4740:	1a c0       	rjmp	.+52     	; 0x4776 <vfprintf+0x1c8>
    4742:	80 e2       	ldi	r24, 0x20	; 32
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	b3 01       	movw	r22, r6
    4748:	0e 94 ca 24 	call	0x4994	; 0x4994 <fputc>
    474c:	ea 94       	dec	r14
    474e:	8e 2d       	mov	r24, r14
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	08 17       	cp	r16, r24
    4754:	19 07       	cpc	r17, r25
    4756:	a8 f3       	brcs	.-22     	; 0x4742 <vfprintf+0x194>
    4758:	0e c0       	rjmp	.+28     	; 0x4776 <vfprintf+0x1c8>
    475a:	f6 01       	movw	r30, r12
    475c:	f7 fc       	sbrc	r15, 7
    475e:	85 91       	lpm	r24, Z+
    4760:	f7 fe       	sbrs	r15, 7
    4762:	81 91       	ld	r24, Z+
    4764:	6f 01       	movw	r12, r30
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	b3 01       	movw	r22, r6
    476a:	0e 94 ca 24 	call	0x4994	; 0x4994 <fputc>
    476e:	e1 10       	cpse	r14, r1
    4770:	ea 94       	dec	r14
    4772:	01 50       	subi	r16, 0x01	; 1
    4774:	10 40       	sbci	r17, 0x00	; 0
    4776:	01 15       	cp	r16, r1
    4778:	11 05       	cpc	r17, r1
    477a:	79 f7       	brne	.-34     	; 0x475a <vfprintf+0x1ac>
    477c:	ea c0       	rjmp	.+468    	; 0x4952 <vfprintf+0x3a4>
    477e:	94 36       	cpi	r25, 0x64	; 100
    4780:	11 f0       	breq	.+4      	; 0x4786 <vfprintf+0x1d8>
    4782:	99 36       	cpi	r25, 0x69	; 105
    4784:	69 f5       	brne	.+90     	; 0x47e0 <vfprintf+0x232>
    4786:	f7 fe       	sbrs	r15, 7
    4788:	08 c0       	rjmp	.+16     	; 0x479a <vfprintf+0x1ec>
    478a:	f5 01       	movw	r30, r10
    478c:	20 81       	ld	r18, Z
    478e:	31 81       	ldd	r19, Z+1	; 0x01
    4790:	42 81       	ldd	r20, Z+2	; 0x02
    4792:	53 81       	ldd	r21, Z+3	; 0x03
    4794:	84 e0       	ldi	r24, 0x04	; 4
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	0a c0       	rjmp	.+20     	; 0x47ae <vfprintf+0x200>
    479a:	f5 01       	movw	r30, r10
    479c:	80 81       	ld	r24, Z
    479e:	91 81       	ldd	r25, Z+1	; 0x01
    47a0:	9c 01       	movw	r18, r24
    47a2:	44 27       	eor	r20, r20
    47a4:	37 fd       	sbrc	r19, 7
    47a6:	40 95       	com	r20
    47a8:	54 2f       	mov	r21, r20
    47aa:	82 e0       	ldi	r24, 0x02	; 2
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	a8 0e       	add	r10, r24
    47b0:	b9 1e       	adc	r11, r25
    47b2:	9f e6       	ldi	r25, 0x6F	; 111
    47b4:	f9 22       	and	r15, r25
    47b6:	57 ff       	sbrs	r21, 7
    47b8:	09 c0       	rjmp	.+18     	; 0x47cc <vfprintf+0x21e>
    47ba:	50 95       	com	r21
    47bc:	40 95       	com	r20
    47be:	30 95       	com	r19
    47c0:	21 95       	neg	r18
    47c2:	3f 4f       	sbci	r19, 0xFF	; 255
    47c4:	4f 4f       	sbci	r20, 0xFF	; 255
    47c6:	5f 4f       	sbci	r21, 0xFF	; 255
    47c8:	e0 e8       	ldi	r30, 0x80	; 128
    47ca:	fe 2a       	or	r15, r30
    47cc:	ca 01       	movw	r24, r20
    47ce:	b9 01       	movw	r22, r18
    47d0:	a1 01       	movw	r20, r2
    47d2:	2a e0       	ldi	r18, 0x0A	; 10
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__ultoa_invert>
    47da:	d8 2e       	mov	r13, r24
    47dc:	d2 18       	sub	r13, r2
    47de:	40 c0       	rjmp	.+128    	; 0x4860 <vfprintf+0x2b2>
    47e0:	95 37       	cpi	r25, 0x75	; 117
    47e2:	29 f4       	brne	.+10     	; 0x47ee <vfprintf+0x240>
    47e4:	1f 2d       	mov	r17, r15
    47e6:	1f 7e       	andi	r17, 0xEF	; 239
    47e8:	2a e0       	ldi	r18, 0x0A	; 10
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	1d c0       	rjmp	.+58     	; 0x4828 <vfprintf+0x27a>
    47ee:	1f 2d       	mov	r17, r15
    47f0:	19 7f       	andi	r17, 0xF9	; 249
    47f2:	9f 36       	cpi	r25, 0x6F	; 111
    47f4:	61 f0       	breq	.+24     	; 0x480e <vfprintf+0x260>
    47f6:	90 37       	cpi	r25, 0x70	; 112
    47f8:	20 f4       	brcc	.+8      	; 0x4802 <vfprintf+0x254>
    47fa:	98 35       	cpi	r25, 0x58	; 88
    47fc:	09 f0       	breq	.+2      	; 0x4800 <vfprintf+0x252>
    47fe:	ac c0       	rjmp	.+344    	; 0x4958 <vfprintf+0x3aa>
    4800:	0f c0       	rjmp	.+30     	; 0x4820 <vfprintf+0x272>
    4802:	90 37       	cpi	r25, 0x70	; 112
    4804:	39 f0       	breq	.+14     	; 0x4814 <vfprintf+0x266>
    4806:	98 37       	cpi	r25, 0x78	; 120
    4808:	09 f0       	breq	.+2      	; 0x480c <vfprintf+0x25e>
    480a:	a6 c0       	rjmp	.+332    	; 0x4958 <vfprintf+0x3aa>
    480c:	04 c0       	rjmp	.+8      	; 0x4816 <vfprintf+0x268>
    480e:	28 e0       	ldi	r18, 0x08	; 8
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	0a c0       	rjmp	.+20     	; 0x4828 <vfprintf+0x27a>
    4814:	10 61       	ori	r17, 0x10	; 16
    4816:	14 fd       	sbrc	r17, 4
    4818:	14 60       	ori	r17, 0x04	; 4
    481a:	20 e1       	ldi	r18, 0x10	; 16
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	04 c0       	rjmp	.+8      	; 0x4828 <vfprintf+0x27a>
    4820:	14 fd       	sbrc	r17, 4
    4822:	16 60       	ori	r17, 0x06	; 6
    4824:	20 e1       	ldi	r18, 0x10	; 16
    4826:	32 e0       	ldi	r19, 0x02	; 2
    4828:	17 ff       	sbrs	r17, 7
    482a:	08 c0       	rjmp	.+16     	; 0x483c <vfprintf+0x28e>
    482c:	f5 01       	movw	r30, r10
    482e:	60 81       	ld	r22, Z
    4830:	71 81       	ldd	r23, Z+1	; 0x01
    4832:	82 81       	ldd	r24, Z+2	; 0x02
    4834:	93 81       	ldd	r25, Z+3	; 0x03
    4836:	44 e0       	ldi	r20, 0x04	; 4
    4838:	50 e0       	ldi	r21, 0x00	; 0
    483a:	08 c0       	rjmp	.+16     	; 0x484c <vfprintf+0x29e>
    483c:	f5 01       	movw	r30, r10
    483e:	80 81       	ld	r24, Z
    4840:	91 81       	ldd	r25, Z+1	; 0x01
    4842:	bc 01       	movw	r22, r24
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	42 e0       	ldi	r20, 0x02	; 2
    484a:	50 e0       	ldi	r21, 0x00	; 0
    484c:	a4 0e       	add	r10, r20
    484e:	b5 1e       	adc	r11, r21
    4850:	a1 01       	movw	r20, r2
    4852:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__ultoa_invert>
    4856:	d8 2e       	mov	r13, r24
    4858:	d2 18       	sub	r13, r2
    485a:	8f e7       	ldi	r24, 0x7F	; 127
    485c:	f8 2e       	mov	r15, r24
    485e:	f1 22       	and	r15, r17
    4860:	f6 fe       	sbrs	r15, 6
    4862:	0b c0       	rjmp	.+22     	; 0x487a <vfprintf+0x2cc>
    4864:	5e ef       	ldi	r21, 0xFE	; 254
    4866:	f5 22       	and	r15, r21
    4868:	d9 14       	cp	r13, r9
    486a:	38 f4       	brcc	.+14     	; 0x487a <vfprintf+0x2cc>
    486c:	f4 fe       	sbrs	r15, 4
    486e:	07 c0       	rjmp	.+14     	; 0x487e <vfprintf+0x2d0>
    4870:	f2 fc       	sbrc	r15, 2
    4872:	05 c0       	rjmp	.+10     	; 0x487e <vfprintf+0x2d0>
    4874:	8f ee       	ldi	r24, 0xEF	; 239
    4876:	f8 22       	and	r15, r24
    4878:	02 c0       	rjmp	.+4      	; 0x487e <vfprintf+0x2d0>
    487a:	1d 2d       	mov	r17, r13
    487c:	01 c0       	rjmp	.+2      	; 0x4880 <vfprintf+0x2d2>
    487e:	19 2d       	mov	r17, r9
    4880:	f4 fe       	sbrs	r15, 4
    4882:	0d c0       	rjmp	.+26     	; 0x489e <vfprintf+0x2f0>
    4884:	fe 01       	movw	r30, r28
    4886:	ed 0d       	add	r30, r13
    4888:	f1 1d       	adc	r31, r1
    488a:	80 81       	ld	r24, Z
    488c:	80 33       	cpi	r24, 0x30	; 48
    488e:	19 f4       	brne	.+6      	; 0x4896 <vfprintf+0x2e8>
    4890:	99 ee       	ldi	r25, 0xE9	; 233
    4892:	f9 22       	and	r15, r25
    4894:	08 c0       	rjmp	.+16     	; 0x48a6 <vfprintf+0x2f8>
    4896:	1f 5f       	subi	r17, 0xFF	; 255
    4898:	f2 fe       	sbrs	r15, 2
    489a:	05 c0       	rjmp	.+10     	; 0x48a6 <vfprintf+0x2f8>
    489c:	03 c0       	rjmp	.+6      	; 0x48a4 <vfprintf+0x2f6>
    489e:	8f 2d       	mov	r24, r15
    48a0:	86 78       	andi	r24, 0x86	; 134
    48a2:	09 f0       	breq	.+2      	; 0x48a6 <vfprintf+0x2f8>
    48a4:	1f 5f       	subi	r17, 0xFF	; 255
    48a6:	0f 2d       	mov	r16, r15
    48a8:	f3 fc       	sbrc	r15, 3
    48aa:	14 c0       	rjmp	.+40     	; 0x48d4 <vfprintf+0x326>
    48ac:	f0 fe       	sbrs	r15, 0
    48ae:	0f c0       	rjmp	.+30     	; 0x48ce <vfprintf+0x320>
    48b0:	1e 15       	cp	r17, r14
    48b2:	10 f0       	brcs	.+4      	; 0x48b8 <vfprintf+0x30a>
    48b4:	9d 2c       	mov	r9, r13
    48b6:	0b c0       	rjmp	.+22     	; 0x48ce <vfprintf+0x320>
    48b8:	9d 2c       	mov	r9, r13
    48ba:	9e 0c       	add	r9, r14
    48bc:	91 1a       	sub	r9, r17
    48be:	1e 2d       	mov	r17, r14
    48c0:	06 c0       	rjmp	.+12     	; 0x48ce <vfprintf+0x320>
    48c2:	80 e2       	ldi	r24, 0x20	; 32
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	b3 01       	movw	r22, r6
    48c8:	0e 94 ca 24 	call	0x4994	; 0x4994 <fputc>
    48cc:	1f 5f       	subi	r17, 0xFF	; 255
    48ce:	1e 15       	cp	r17, r14
    48d0:	c0 f3       	brcs	.-16     	; 0x48c2 <vfprintf+0x314>
    48d2:	04 c0       	rjmp	.+8      	; 0x48dc <vfprintf+0x32e>
    48d4:	1e 15       	cp	r17, r14
    48d6:	10 f4       	brcc	.+4      	; 0x48dc <vfprintf+0x32e>
    48d8:	e1 1a       	sub	r14, r17
    48da:	01 c0       	rjmp	.+2      	; 0x48de <vfprintf+0x330>
    48dc:	ee 24       	eor	r14, r14
    48de:	04 ff       	sbrs	r16, 4
    48e0:	0f c0       	rjmp	.+30     	; 0x4900 <vfprintf+0x352>
    48e2:	80 e3       	ldi	r24, 0x30	; 48
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	b3 01       	movw	r22, r6
    48e8:	0e 94 ca 24 	call	0x4994	; 0x4994 <fputc>
    48ec:	02 ff       	sbrs	r16, 2
    48ee:	1d c0       	rjmp	.+58     	; 0x492a <vfprintf+0x37c>
    48f0:	01 fd       	sbrc	r16, 1
    48f2:	03 c0       	rjmp	.+6      	; 0x48fa <vfprintf+0x34c>
    48f4:	88 e7       	ldi	r24, 0x78	; 120
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	0e c0       	rjmp	.+28     	; 0x4916 <vfprintf+0x368>
    48fa:	88 e5       	ldi	r24, 0x58	; 88
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	0b c0       	rjmp	.+22     	; 0x4916 <vfprintf+0x368>
    4900:	80 2f       	mov	r24, r16
    4902:	86 78       	andi	r24, 0x86	; 134
    4904:	91 f0       	breq	.+36     	; 0x492a <vfprintf+0x37c>
    4906:	01 ff       	sbrs	r16, 1
    4908:	02 c0       	rjmp	.+4      	; 0x490e <vfprintf+0x360>
    490a:	8b e2       	ldi	r24, 0x2B	; 43
    490c:	01 c0       	rjmp	.+2      	; 0x4910 <vfprintf+0x362>
    490e:	80 e2       	ldi	r24, 0x20	; 32
    4910:	f7 fc       	sbrc	r15, 7
    4912:	8d e2       	ldi	r24, 0x2D	; 45
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	b3 01       	movw	r22, r6
    4918:	0e 94 ca 24 	call	0x4994	; 0x4994 <fputc>
    491c:	06 c0       	rjmp	.+12     	; 0x492a <vfprintf+0x37c>
    491e:	80 e3       	ldi	r24, 0x30	; 48
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	b3 01       	movw	r22, r6
    4924:	0e 94 ca 24 	call	0x4994	; 0x4994 <fputc>
    4928:	9a 94       	dec	r9
    492a:	d9 14       	cp	r13, r9
    492c:	c0 f3       	brcs	.-16     	; 0x491e <vfprintf+0x370>
    492e:	da 94       	dec	r13
    4930:	f1 01       	movw	r30, r2
    4932:	ed 0d       	add	r30, r13
    4934:	f1 1d       	adc	r31, r1
    4936:	80 81       	ld	r24, Z
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	b3 01       	movw	r22, r6
    493c:	0e 94 ca 24 	call	0x4994	; 0x4994 <fputc>
    4940:	dd 20       	and	r13, r13
    4942:	a9 f7       	brne	.-22     	; 0x492e <vfprintf+0x380>
    4944:	06 c0       	rjmp	.+12     	; 0x4952 <vfprintf+0x3a4>
    4946:	80 e2       	ldi	r24, 0x20	; 32
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	b3 01       	movw	r22, r6
    494c:	0e 94 ca 24 	call	0x4994	; 0x4994 <fputc>
    4950:	ea 94       	dec	r14
    4952:	ee 20       	and	r14, r14
    4954:	c1 f7       	brne	.-16     	; 0x4946 <vfprintf+0x398>
    4956:	43 ce       	rjmp	.-890    	; 0x45de <vfprintf+0x30>
    4958:	f3 01       	movw	r30, r6
    495a:	66 81       	ldd	r22, Z+6	; 0x06
    495c:	77 81       	ldd	r23, Z+7	; 0x07
    495e:	cb 01       	movw	r24, r22
    4960:	2b 96       	adiw	r28, 0x0b	; 11
    4962:	e2 e1       	ldi	r30, 0x12	; 18
    4964:	0c 94 97 22 	jmp	0x452e	; 0x452e <__epilogue_restores__>

00004968 <strnlen_P>:
    4968:	fc 01       	movw	r30, r24
    496a:	05 90       	lpm	r0, Z+
    496c:	61 50       	subi	r22, 0x01	; 1
    496e:	70 40       	sbci	r23, 0x00	; 0
    4970:	01 10       	cpse	r0, r1
    4972:	d8 f7       	brcc	.-10     	; 0x496a <strnlen_P+0x2>
    4974:	80 95       	com	r24
    4976:	90 95       	com	r25
    4978:	8e 0f       	add	r24, r30
    497a:	9f 1f       	adc	r25, r31
    497c:	08 95       	ret

0000497e <strnlen>:
    497e:	fc 01       	movw	r30, r24
    4980:	61 50       	subi	r22, 0x01	; 1
    4982:	70 40       	sbci	r23, 0x00	; 0
    4984:	01 90       	ld	r0, Z+
    4986:	01 10       	cpse	r0, r1
    4988:	d8 f7       	brcc	.-10     	; 0x4980 <strnlen+0x2>
    498a:	80 95       	com	r24
    498c:	90 95       	com	r25
    498e:	8e 0f       	add	r24, r30
    4990:	9f 1f       	adc	r25, r31
    4992:	08 95       	ret

00004994 <fputc>:
    4994:	0f 93       	push	r16
    4996:	1f 93       	push	r17
    4998:	cf 93       	push	r28
    499a:	df 93       	push	r29
    499c:	8c 01       	movw	r16, r24
    499e:	eb 01       	movw	r28, r22
    49a0:	8b 81       	ldd	r24, Y+3	; 0x03
    49a2:	81 ff       	sbrs	r24, 1
    49a4:	1b c0       	rjmp	.+54     	; 0x49dc <fputc+0x48>
    49a6:	82 ff       	sbrs	r24, 2
    49a8:	0d c0       	rjmp	.+26     	; 0x49c4 <fputc+0x30>
    49aa:	2e 81       	ldd	r18, Y+6	; 0x06
    49ac:	3f 81       	ldd	r19, Y+7	; 0x07
    49ae:	8c 81       	ldd	r24, Y+4	; 0x04
    49b0:	9d 81       	ldd	r25, Y+5	; 0x05
    49b2:	28 17       	cp	r18, r24
    49b4:	39 07       	cpc	r19, r25
    49b6:	64 f4       	brge	.+24     	; 0x49d0 <fputc+0x3c>
    49b8:	e8 81       	ld	r30, Y
    49ba:	f9 81       	ldd	r31, Y+1	; 0x01
    49bc:	01 93       	st	Z+, r16
    49be:	f9 83       	std	Y+1, r31	; 0x01
    49c0:	e8 83       	st	Y, r30
    49c2:	06 c0       	rjmp	.+12     	; 0x49d0 <fputc+0x3c>
    49c4:	e8 85       	ldd	r30, Y+8	; 0x08
    49c6:	f9 85       	ldd	r31, Y+9	; 0x09
    49c8:	80 2f       	mov	r24, r16
    49ca:	09 95       	icall
    49cc:	89 2b       	or	r24, r25
    49ce:	31 f4       	brne	.+12     	; 0x49dc <fputc+0x48>
    49d0:	8e 81       	ldd	r24, Y+6	; 0x06
    49d2:	9f 81       	ldd	r25, Y+7	; 0x07
    49d4:	01 96       	adiw	r24, 0x01	; 1
    49d6:	9f 83       	std	Y+7, r25	; 0x07
    49d8:	8e 83       	std	Y+6, r24	; 0x06
    49da:	02 c0       	rjmp	.+4      	; 0x49e0 <fputc+0x4c>
    49dc:	0f ef       	ldi	r16, 0xFF	; 255
    49de:	1f ef       	ldi	r17, 0xFF	; 255
    49e0:	c8 01       	movw	r24, r16
    49e2:	df 91       	pop	r29
    49e4:	cf 91       	pop	r28
    49e6:	1f 91       	pop	r17
    49e8:	0f 91       	pop	r16
    49ea:	08 95       	ret

000049ec <__ultoa_invert>:
    49ec:	fa 01       	movw	r30, r20
    49ee:	aa 27       	eor	r26, r26
    49f0:	28 30       	cpi	r18, 0x08	; 8
    49f2:	51 f1       	breq	.+84     	; 0x4a48 <__ultoa_invert+0x5c>
    49f4:	20 31       	cpi	r18, 0x10	; 16
    49f6:	81 f1       	breq	.+96     	; 0x4a58 <__ultoa_invert+0x6c>
    49f8:	e8 94       	clt
    49fa:	6f 93       	push	r22
    49fc:	6e 7f       	andi	r22, 0xFE	; 254
    49fe:	6e 5f       	subi	r22, 0xFE	; 254
    4a00:	7f 4f       	sbci	r23, 0xFF	; 255
    4a02:	8f 4f       	sbci	r24, 0xFF	; 255
    4a04:	9f 4f       	sbci	r25, 0xFF	; 255
    4a06:	af 4f       	sbci	r26, 0xFF	; 255
    4a08:	b1 e0       	ldi	r27, 0x01	; 1
    4a0a:	3e d0       	rcall	.+124    	; 0x4a88 <__ultoa_invert+0x9c>
    4a0c:	b4 e0       	ldi	r27, 0x04	; 4
    4a0e:	3c d0       	rcall	.+120    	; 0x4a88 <__ultoa_invert+0x9c>
    4a10:	67 0f       	add	r22, r23
    4a12:	78 1f       	adc	r23, r24
    4a14:	89 1f       	adc	r24, r25
    4a16:	9a 1f       	adc	r25, r26
    4a18:	a1 1d       	adc	r26, r1
    4a1a:	68 0f       	add	r22, r24
    4a1c:	79 1f       	adc	r23, r25
    4a1e:	8a 1f       	adc	r24, r26
    4a20:	91 1d       	adc	r25, r1
    4a22:	a1 1d       	adc	r26, r1
    4a24:	6a 0f       	add	r22, r26
    4a26:	71 1d       	adc	r23, r1
    4a28:	81 1d       	adc	r24, r1
    4a2a:	91 1d       	adc	r25, r1
    4a2c:	a1 1d       	adc	r26, r1
    4a2e:	20 d0       	rcall	.+64     	; 0x4a70 <__ultoa_invert+0x84>
    4a30:	09 f4       	brne	.+2      	; 0x4a34 <__ultoa_invert+0x48>
    4a32:	68 94       	set
    4a34:	3f 91       	pop	r19
    4a36:	2a e0       	ldi	r18, 0x0A	; 10
    4a38:	26 9f       	mul	r18, r22
    4a3a:	11 24       	eor	r1, r1
    4a3c:	30 19       	sub	r19, r0
    4a3e:	30 5d       	subi	r19, 0xD0	; 208
    4a40:	31 93       	st	Z+, r19
    4a42:	de f6       	brtc	.-74     	; 0x49fa <__ultoa_invert+0xe>
    4a44:	cf 01       	movw	r24, r30
    4a46:	08 95       	ret
    4a48:	46 2f       	mov	r20, r22
    4a4a:	47 70       	andi	r20, 0x07	; 7
    4a4c:	40 5d       	subi	r20, 0xD0	; 208
    4a4e:	41 93       	st	Z+, r20
    4a50:	b3 e0       	ldi	r27, 0x03	; 3
    4a52:	0f d0       	rcall	.+30     	; 0x4a72 <__ultoa_invert+0x86>
    4a54:	c9 f7       	brne	.-14     	; 0x4a48 <__ultoa_invert+0x5c>
    4a56:	f6 cf       	rjmp	.-20     	; 0x4a44 <__ultoa_invert+0x58>
    4a58:	46 2f       	mov	r20, r22
    4a5a:	4f 70       	andi	r20, 0x0F	; 15
    4a5c:	40 5d       	subi	r20, 0xD0	; 208
    4a5e:	4a 33       	cpi	r20, 0x3A	; 58
    4a60:	18 f0       	brcs	.+6      	; 0x4a68 <__ultoa_invert+0x7c>
    4a62:	49 5d       	subi	r20, 0xD9	; 217
    4a64:	31 fd       	sbrc	r19, 1
    4a66:	40 52       	subi	r20, 0x20	; 32
    4a68:	41 93       	st	Z+, r20
    4a6a:	02 d0       	rcall	.+4      	; 0x4a70 <__ultoa_invert+0x84>
    4a6c:	a9 f7       	brne	.-22     	; 0x4a58 <__ultoa_invert+0x6c>
    4a6e:	ea cf       	rjmp	.-44     	; 0x4a44 <__ultoa_invert+0x58>
    4a70:	b4 e0       	ldi	r27, 0x04	; 4
    4a72:	a6 95       	lsr	r26
    4a74:	97 95       	ror	r25
    4a76:	87 95       	ror	r24
    4a78:	77 95       	ror	r23
    4a7a:	67 95       	ror	r22
    4a7c:	ba 95       	dec	r27
    4a7e:	c9 f7       	brne	.-14     	; 0x4a72 <__ultoa_invert+0x86>
    4a80:	00 97       	sbiw	r24, 0x00	; 0
    4a82:	61 05       	cpc	r22, r1
    4a84:	71 05       	cpc	r23, r1
    4a86:	08 95       	ret
    4a88:	9b 01       	movw	r18, r22
    4a8a:	ac 01       	movw	r20, r24
    4a8c:	0a 2e       	mov	r0, r26
    4a8e:	06 94       	lsr	r0
    4a90:	57 95       	ror	r21
    4a92:	47 95       	ror	r20
    4a94:	37 95       	ror	r19
    4a96:	27 95       	ror	r18
    4a98:	ba 95       	dec	r27
    4a9a:	c9 f7       	brne	.-14     	; 0x4a8e <__ultoa_invert+0xa2>
    4a9c:	62 0f       	add	r22, r18
    4a9e:	73 1f       	adc	r23, r19
    4aa0:	84 1f       	adc	r24, r20
    4aa2:	95 1f       	adc	r25, r21
    4aa4:	a0 1d       	adc	r26, r0
    4aa6:	08 95       	ret

00004aa8 <_exit>:
    4aa8:	f8 94       	cli

00004aaa <__stop_program>:
    4aaa:	ff cf       	rjmp	.-2      	; 0x4aaa <__stop_program>
