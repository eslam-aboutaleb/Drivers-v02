
SmartHome_LCD_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003f8  00800060  00005846  000058da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  00800458  00800458  00005cd2  2**0
                  ALLOC
  3 .stab         0000630c  00000000  00000000  00005cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000035b9  00000000  00000000  0000bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f599  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000f759  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000f96d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00011f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001344d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00014758  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00014938  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00014c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015659  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 35       	cpi	r26, 0x58	; 88
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a8 e5       	ldi	r26, 0x58	; 88
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 00 2b 	call	0x5600	; 0x5600 <main>
      8a:	0c 94 21 2c 	jmp	0x5842	; 0x5842 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d3 2b 	jmp	0x57a6	; 0x57a6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e3       	ldi	r26, 0x36	; 54
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ef 2b 	jmp	0x57de	; 0x57de <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fb 2b 	jmp	0x57f6	; 0x57f6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fb 2b 	jmp	0x57f6	; 0x57f6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d3 2b 	jmp	0x57a6	; 0x57a6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e3       	ldi	r24, 0x36	; 54
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ef 2b 	jmp	0x57de	; 0x57de <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e3       	ldi	r22, 0x36	; 54
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f7 2b 	jmp	0x57ee	; 0x57ee <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fb 2b 	jmp	0x57f6	; 0x57f6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fb 2b 	jmp	0x57f6	; 0x57f6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fb 2b 	jmp	0x57f6	; 0x57f6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 dc 2b 	jmp	0x57b8	; 0x57b8 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 f8 2b 	jmp	0x57f0	; 0x57f0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 e3 2b 	jmp	0x57c6	; 0x57c6 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ff 2b 	jmp	0x57fe	; 0x57fe <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 f7 2b 	jmp	0x57ee	; 0x57ee <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e2 5c       	subi	r30, 0xC2	; 194
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_xInit>:
/* ***************************************************************************** */
static void (*ADC_vCallBack)(uint16);

/* ***************************************************************************** */
Error_Status ADC_xInit(const ADC_Typedef *ADCx)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <ADC_xInit+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9b 83       	std	Y+3, r25	; 0x03
     ef8:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status Local_xErrorState	=	E_NOK;
     efa:	19 82       	std	Y+1, r1	; 0x01

	/* Configure reference voltage */
	Local_xErrorState	=	ADC_xRefVoltage(ADCx->ADC_xVoltRef);
     efc:	ea 81       	ldd	r30, Y+2	; 0x02
     efe:	fb 81       	ldd	r31, Y+3	; 0x03
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	0e 94 ba 07 	call	0xf74	; 0xf74 <ADC_xRefVoltage>
     f06:	89 83       	std	Y+1, r24	; 0x01
	/* Configure adjusting result state */
	Local_xErrorState	=	ADC_xAdjustResult(ADCx->ADC_xAdjustState);
     f08:	ea 81       	ldd	r30, Y+2	; 0x02
     f0a:	fb 81       	ldd	r31, Y+3	; 0x03
     f0c:	83 81       	ldd	r24, Z+3	; 0x03
     f0e:	0e 94 0d 08 	call	0x101a	; 0x101a <ADC_xAdjustResult>
     f12:	89 83       	std	Y+1, r24	; 0x01
	if(ADCx->ADC_xAdjustState == ADC_RIGHT_ADJUST)
     f14:	ea 81       	ldd	r30, Y+2	; 0x02
     f16:	fb 81       	ldd	r31, Y+3	; 0x03
     f18:	83 81       	ldd	r24, Z+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	21 f4       	brne	.+8      	; 0xf26 <ADC_xInit+0x3c>
	{
		ADC_xCurrentAdjustState = ADC_RIGHT_ADJUST;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 58 04 	sts	0x0458, r24
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <ADC_xInit+0x40>
	}
	else
	{
		ADC_xCurrentAdjustState = ADC_LEFT_ADJUST;
     f26:	10 92 58 04 	sts	0x0458, r1
	}
	/* Set ADC interrupt state */
	Local_xErrorState	=	ADC_xSetIntState(ADCx->ADC_xInterruptState);
     f2a:	ea 81       	ldd	r30, Y+2	; 0x02
     f2c:	fb 81       	ldd	r31, Y+3	; 0x03
     f2e:	84 81       	ldd	r24, Z+4	; 0x04
     f30:	0e 94 96 08 	call	0x112c	; 0x112c <ADC_xSetIntState>
     f34:	89 83       	std	Y+1, r24	; 0x01
	/* Set auto trigger state */
	Local_xErrorState	=	ADC_xSetAutoTrigger(ADCx->ADC_xTriggerState);
     f36:	ea 81       	ldd	r30, Y+2	; 0x02
     f38:	fb 81       	ldd	r31, Y+3	; 0x03
     f3a:	85 81       	ldd	r24, Z+5	; 0x05
     f3c:	0e 94 cf 08 	call	0x119e	; 0x119e <ADC_xSetAutoTrigger>
     f40:	89 83       	std	Y+1, r24	; 0x01
	/* Set PreScaler */
	Local_xErrorState	=	ADC_xSetPrescaler(ADCx->ADC_xPrescaler);
     f42:	ea 81       	ldd	r30, Y+2	; 0x02
     f44:	fb 81       	ldd	r31, Y+3	; 0x03
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	0e 94 01 09 	call	0x1202	; 0x1202 <ADC_xSetPrescaler>
     f4c:	89 83       	std	Y+1, r24	; 0x01
	/* Set ADC auto trigger source */
	Local_xErrorState	=	ADC_xSetTriggerSrc(ADCx->ADC_xTriggerSource);
     f4e:	ea 81       	ldd	r30, Y+2	; 0x02
     f50:	fb 81       	ldd	r31, Y+3	; 0x03
     f52:	86 81       	ldd	r24, Z+6	; 0x06
     f54:	0e 94 23 09 	call	0x1246	; 0x1246 <ADC_xSetTriggerSrc>
     f58:	89 83       	std	Y+1, r24	; 0x01
	/* Set initial ADC state */
	Local_xErrorState	=	ADC_xSetState(ADCx->ADC_xState);
     f5a:	ea 81       	ldd	r30, Y+2	; 0x02
     f5c:	fb 81       	ldd	r31, Y+3	; 0x03
     f5e:	87 81       	ldd	r24, Z+7	; 0x07
     f60:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ADC_xSetState>
     f64:	89 83       	std	Y+1, r24	; 0x01

	return Local_xErrorState;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
}
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <ADC_xRefVoltage>:

/* ***************************************************************************** */

static Error_Status ADC_xRefVoltage(ADC_VoltageRef_t Copy_xVoltRef)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <ADC_xRefVoltage+0x6>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <ADC_xRefVoltage+0x8>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xVoltRef)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	3c 83       	std	Y+4, r19	; 0x04
     f8a:	2b 83       	std	Y+3, r18	; 0x03
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	c1 f0       	breq	.+48     	; 0xfc6 <ADC_xRefVoltage+0x52>
     f96:	2b 81       	ldd	r18, Y+3	; 0x03
     f98:	3c 81       	ldd	r19, Y+4	; 0x04
     f9a:	22 30       	cpi	r18, 0x02	; 2
     f9c:	31 05       	cpc	r19, r1
     f9e:	11 f1       	breq	.+68     	; 0xfe4 <ADC_xRefVoltage+0x70>
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	69 f5       	brne	.+90     	; 0x1002 <ADC_xRefVoltage+0x8e>
	{
	case ADC_VREF_TURNED_OFF:
		CLEAR_BIT(ADMUX,REFS1);
     fa8:	a7 e2       	ldi	r26, 0x27	; 39
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e7 e2       	ldi	r30, 0x27	; 39
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 77       	andi	r24, 0x7F	; 127
     fb4:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,REFS0);
     fb6:	a7 e2       	ldi	r26, 0x27	; 39
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e7 e2       	ldi	r30, 0x27	; 39
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7b       	andi	r24, 0xBF	; 191
     fc2:	8c 93       	st	X, r24
     fc4:	20 c0       	rjmp	.+64     	; 0x1006 <ADC_xRefVoltage+0x92>
		break;
	case ADC_AVCC_EX_CAP:
		CLEAR_BIT(ADMUX,REFS1);
     fc6:	a7 e2       	ldi	r26, 0x27	; 39
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e7 e2       	ldi	r30, 0x27	; 39
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 77       	andi	r24, 0x7F	; 127
     fd2:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);
     fd4:	a7 e2       	ldi	r26, 0x27	; 39
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e7 e2       	ldi	r30, 0x27	; 39
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	80 64       	ori	r24, 0x40	; 64
     fe0:	8c 93       	st	X, r24
     fe2:	11 c0       	rjmp	.+34     	; 0x1006 <ADC_xRefVoltage+0x92>
		break;
	case ADC_INTERNAL_VOLTAGE_2_56:
		SET_BIT(ADMUX,REFS1);
     fe4:	a7 e2       	ldi	r26, 0x27	; 39
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e7 e2       	ldi	r30, 0x27	; 39
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	80 68       	ori	r24, 0x80	; 128
     ff0:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);
     ff2:	a7 e2       	ldi	r26, 0x27	; 39
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e7 e2       	ldi	r30, 0x27	; 39
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	8c 93       	st	X, r24
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <ADC_xRefVoltage+0x92>
		break;
	default:
		return E_NOK;
    1002:	1a 82       	std	Y+2, r1	; 0x02
    1004:	02 c0       	rjmp	.+4      	; 0x100a <ADC_xRefVoltage+0x96>
		break;
	}
	return E_OK;
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <ADC_xAdjustResult>:

/* ***************************************************************************** */

static Error_Status ADC_xAdjustResult(ADC_Adjust_t Copy_xAdjustState)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <ADC_xAdjustResult+0x6>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <ADC_xAdjustResult+0x8>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xAdjustState)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3c 83       	std	Y+4, r19	; 0x04
    1030:	2b 83       	std	Y+3, r18	; 0x03
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	31 f0       	breq	.+12     	; 0x1046 <ADC_xAdjustResult+0x2c>
    103a:	2b 81       	ldd	r18, Y+3	; 0x03
    103c:	3c 81       	ldd	r19, Y+4	; 0x04
    103e:	21 30       	cpi	r18, 0x01	; 1
    1040:	31 05       	cpc	r19, r1
    1042:	49 f0       	breq	.+18     	; 0x1056 <ADC_xAdjustResult+0x3c>
    1044:	10 c0       	rjmp	.+32     	; 0x1066 <ADC_xAdjustResult+0x4c>
	{
	case ADC_LEFT_ADJUST:
		SET_BIT(ADMUX,ADLAR);
    1046:	a7 e2       	ldi	r26, 0x27	; 39
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e7 e2       	ldi	r30, 0x27	; 39
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	80 62       	ori	r24, 0x20	; 32
    1052:	8c 93       	st	X, r24
    1054:	0a c0       	rjmp	.+20     	; 0x106a <ADC_xAdjustResult+0x50>
		break;
	case ADC_RIGHT_ADJUST:
		CLEAR_BIT(ADMUX,ADLAR);
    1056:	a7 e2       	ldi	r26, 0x27	; 39
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e7 e2       	ldi	r30, 0x27	; 39
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8f 7d       	andi	r24, 0xDF	; 223
    1062:	8c 93       	st	X, r24
    1064:	02 c0       	rjmp	.+4      	; 0x106a <ADC_xAdjustResult+0x50>
		break;
	default:
		return E_NOK;
    1066:	1a 82       	std	Y+2, r1	; 0x02
    1068:	02 c0       	rjmp	.+4      	; 0x106e <ADC_xAdjustResult+0x54>
		break;
	}
	return E_OK;
    106a:	31 e0       	ldi	r19, 0x01	; 1
    106c:	3a 83       	std	Y+2, r19	; 0x02
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <ADC_xSelectChannel>:

/* ***************************************************************************** */

Error_Status ADC_xSelectChannel(ADC_Ch_t Copy_xChannel)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <ADC_xSelectChannel+0x6>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	89 83       	std	Y+1, r24	; 0x01
	/* Check validity of the channel */
	if(E_NOK == ADC_IS_VALID_CH(Copy_xChannel))
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	80 32       	cpi	r24, 0x20	; 32
    108e:	10 f0       	brcs	.+4      	; 0x1094 <ADC_xSelectChannel+0x16>
	{
		return E_NOK;
    1090:	1a 82       	std	Y+2, r1	; 0x02
    1092:	14 c0       	rjmp	.+40     	; 0x10bc <ADC_xSelectChannel+0x3e>
	}

	/* Clear selection bits */
	Copy_xChannel &=0x07;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	87 70       	andi	r24, 0x07	; 7
    1098:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0;
    109a:	a7 e2       	ldi	r26, 0x27	; 39
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e7 e2       	ldi	r30, 0x27	; 39
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 7e       	andi	r24, 0xE0	; 224
    10a6:	8c 93       	st	X, r24
	/* Set channel bits */
	ADMUX |= (uint8)Copy_xChannel;
    10a8:	a7 e2       	ldi	r26, 0x27	; 39
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e7 e2       	ldi	r30, 0x27	; 39
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	90 81       	ld	r25, Z
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	89 2b       	or	r24, r25
    10b6:	8c 93       	st	X, r24
	return E_OK;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <ADC_xSetState>:

/* ***************************************************************************** */

Error_Status ADC_xSetState(ADC_State_t Copy_xState)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <ADC_xSetState+0x6>
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <ADC_xSetState+0x8>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xState)
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3c 83       	std	Y+4, r19	; 0x04
    10de:	2b 83       	std	Y+3, r18	; 0x03
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	31 f0       	breq	.+12     	; 0x10f4 <ADC_xSetState+0x2c>
    10e8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ea:	3c 81       	ldd	r19, Y+4	; 0x04
    10ec:	21 30       	cpi	r18, 0x01	; 1
    10ee:	31 05       	cpc	r19, r1
    10f0:	49 f0       	breq	.+18     	; 0x1104 <ADC_xSetState+0x3c>
    10f2:	10 c0       	rjmp	.+32     	; 0x1114 <ADC_xSetState+0x4c>
	{
	case ADC_DISABLE:
		CLEAR_BIT(ADCSRA,ADEN);
    10f4:	a6 e2       	ldi	r26, 0x26	; 38
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e6 e2       	ldi	r30, 0x26	; 38
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8f 77       	andi	r24, 0x7F	; 127
    1100:	8c 93       	st	X, r24
    1102:	0a c0       	rjmp	.+20     	; 0x1118 <ADC_xSetState+0x50>
		break;
	case ADC_ENABLE:
		SET_BIT(ADCSRA,ADEN);
    1104:	a6 e2       	ldi	r26, 0x26	; 38
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e6 e2       	ldi	r30, 0x26	; 38
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 68       	ori	r24, 0x80	; 128
    1110:	8c 93       	st	X, r24
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <ADC_xSetState+0x50>
		break;
	default:
		return E_NOK;
    1114:	1a 82       	std	Y+2, r1	; 0x02
    1116:	02 c0       	rjmp	.+4      	; 0x111c <ADC_xSetState+0x54>
		break;
	}
	return E_OK;
    1118:	31 e0       	ldi	r19, 0x01	; 1
    111a:	3a 83       	std	Y+2, r19	; 0x02
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <ADC_xSetIntState>:

/* ***************************************************************************** */

Error_Status ADC_xSetIntState(ADC_Int_t Copy_xState)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <ADC_xSetIntState+0x6>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <ADC_xSetIntState+0x8>
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_xState) {
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3c 83       	std	Y+4, r19	; 0x04
    1142:	2b 83       	std	Y+3, r18	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	31 f0       	breq	.+12     	; 0x1158 <ADC_xSetIntState+0x2c>
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	21 30       	cpi	r18, 0x01	; 1
    1152:	31 05       	cpc	r19, r1
    1154:	49 f0       	breq	.+18     	; 0x1168 <ADC_xSetIntState+0x3c>
    1156:	10 c0       	rjmp	.+32     	; 0x1178 <ADC_xSetIntState+0x4c>
	case ADC_DISABLE_INTERRUPT:
		CLEAR_BIT(ADCSRA,ADIE);
    1158:	a6 e2       	ldi	r26, 0x26	; 38
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e6 e2       	ldi	r30, 0x26	; 38
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	87 7f       	andi	r24, 0xF7	; 247
    1164:	8c 93       	st	X, r24
    1166:	0a c0       	rjmp	.+20     	; 0x117c <ADC_xSetIntState+0x50>
		break;
	case ADC_ENABLE_INTERRUPT:
		SET_BIT(ADCSRA,ADIE);
    1168:	a6 e2       	ldi	r26, 0x26	; 38
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e6 e2       	ldi	r30, 0x26	; 38
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 60       	ori	r24, 0x08	; 8
    1174:	8c 93       	st	X, r24
    1176:	02 c0       	rjmp	.+4      	; 0x117c <ADC_xSetIntState+0x50>
		break;
	default:
		return E_NOK;
    1178:	1a 82       	std	Y+2, r1	; 0x02
    117a:	09 c0       	rjmp	.+18     	; 0x118e <ADC_xSetIntState+0x62>
		break;
	}
	ADC_START_CONVERSION();
    117c:	a6 e2       	ldi	r26, 0x26	; 38
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e6 e2       	ldi	r30, 0x26	; 38
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	80 64       	ori	r24, 0x40	; 64
    1188:	8c 93       	st	X, r24
	return E_OK;
    118a:	31 e0       	ldi	r19, 0x01	; 1
    118c:	3a 83       	std	Y+2, r19	; 0x02
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <ADC_xSetAutoTrigger>:

/* ***************************************************************************** */

static Error_Status ADC_xSetAutoTrigger(ADC_AutoTrigger_t Copy_xTrigger)
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <ADC_xSetAutoTrigger+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <ADC_xSetAutoTrigger+0x8>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_xTrigger) {
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3c 83       	std	Y+4, r19	; 0x04
    11b4:	2b 83       	std	Y+3, r18	; 0x03
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	31 f0       	breq	.+12     	; 0x11ca <ADC_xSetAutoTrigger+0x2c>
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	3c 81       	ldd	r19, Y+4	; 0x04
    11c2:	21 30       	cpi	r18, 0x01	; 1
    11c4:	31 05       	cpc	r19, r1
    11c6:	49 f0       	breq	.+18     	; 0x11da <ADC_xSetAutoTrigger+0x3c>
    11c8:	10 c0       	rjmp	.+32     	; 0x11ea <ADC_xSetAutoTrigger+0x4c>
	case ADC_DISABLE_AUTO_TRIGGER:
		CLEAR_BIT(ADCSRA,ADATE);
    11ca:	a6 e2       	ldi	r26, 0x26	; 38
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e6 e2       	ldi	r30, 0x26	; 38
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	8f 7d       	andi	r24, 0xDF	; 223
    11d6:	8c 93       	st	X, r24
    11d8:	0a c0       	rjmp	.+20     	; 0x11ee <ADC_xSetAutoTrigger+0x50>
		break;
	case ADC_ENABLE_AUTO_TRIGGER:
		SET_BIT(ADCSRA,ADATE);
    11da:	a6 e2       	ldi	r26, 0x26	; 38
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e6 e2       	ldi	r30, 0x26	; 38
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 62       	ori	r24, 0x20	; 32
    11e6:	8c 93       	st	X, r24
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <ADC_xSetAutoTrigger+0x50>
		break;
	default:
		return E_NOK;
    11ea:	1a 82       	std	Y+2, r1	; 0x02
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <ADC_xSetAutoTrigger+0x54>
		break;
	}
	return E_OK;
    11ee:	31 e0       	ldi	r19, 0x01	; 1
    11f0:	3a 83       	std	Y+2, r19	; 0x02
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <ADC_xSetPrescaler>:

/* ***************************************************************************** */

static Error_Status ADC_xSetPrescaler(ADC_Prescaler_t Copy_xPrescaler)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <ADC_xSetPrescaler+0x6>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	89 83       	std	Y+1, r24	; 0x01
	if(E_NOK == ADC_IS_VALID_PRESCALER(Copy_xPrescaler))
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	88 30       	cpi	r24, 0x08	; 8
    1212:	10 f0       	brcs	.+4      	; 0x1218 <ADC_xSetPrescaler+0x16>
	{
		return E_NOK;
    1214:	1a 82       	std	Y+2, r1	; 0x02
    1216:	11 c0       	rjmp	.+34     	; 0x123a <ADC_xSetPrescaler+0x38>
	}
	/* Clear PreScaler bits */
	ADCSRA &= 0xF8;
    1218:	a6 e2       	ldi	r26, 0x26	; 38
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e6 e2       	ldi	r30, 0x26	; 38
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	88 7f       	andi	r24, 0xF8	; 248
    1224:	8c 93       	st	X, r24
	/* Set PreScaler */
	ADCSRA |= (uint8)Copy_xPrescaler;
    1226:	a6 e2       	ldi	r26, 0x26	; 38
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e6 e2       	ldi	r30, 0x26	; 38
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	90 81       	ld	r25, Z
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	89 2b       	or	r24, r25
    1234:	8c 93       	st	X, r24

	return E_OK;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	8a 83       	std	Y+2, r24	; 0x02
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <ADC_xSetTriggerSrc>:

/* ***************************************************************************** */

static Error_Status ADC_xSetTriggerSrc(ADC_TriggerSrc_t Copy_xSrc)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <ADC_xSetTriggerSrc+0x6>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	89 83       	std	Y+1, r24	; 0x01
	if(E_NOK == ADC_IS_VALID_TRGSRC(Copy_xSrc))
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	88 30       	cpi	r24, 0x08	; 8
    1256:	10 f0       	brcs	.+4      	; 0x125c <ADC_xSetTriggerSrc+0x16>
	{
		return E_NOK;
    1258:	1a 82       	std	Y+2, r1	; 0x02
    125a:	1c c0       	rjmp	.+56     	; 0x1294 <ADC_xSetTriggerSrc+0x4e>
	}
	/* Clear special function IO bits */
	SFIOR &= 0x0F;
    125c:	a0 e5       	ldi	r26, 0x50	; 80
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e0 e5       	ldi	r30, 0x50	; 80
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8f 70       	andi	r24, 0x0F	; 15
    1268:	8c 93       	st	X, r24
	/* Set special function IO bits */
	SFIOR |= (4<<(uint8)Copy_xSrc);
    126a:	a0 e5       	ldi	r26, 0x50	; 80
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e0 e5       	ldi	r30, 0x50	; 80
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <ADC_xSetTriggerSrc+0x42>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <ADC_xSetTriggerSrc+0x3e>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24

	return E_OK;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <ADC_xReadUpperRegSynch>:

/* ***************************************************************************** */
Error_Status ADC_xReadUpperRegSynch(ADC_Ch_t Copy_xADC_Chx,uint8 *u8RecvData)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <ADC_xReadUpperRegSynch+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <ADC_xReadUpperRegSynch+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	7c 83       	std	Y+4, r23	; 0x04
    12b0:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status Local_xErrorStatus	=	E_NOK;
    12b2:	19 82       	std	Y+1, r1	; 0x01
	/* Select ADC channel */
	Local_xErrorStatus	=	ADC_xSelectChannel(Copy_xADC_Chx);
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	0e 94 3f 08 	call	0x107e	; 0x107e <ADC_xSelectChannel>
    12ba:	89 83       	std	Y+1, r24	; 0x01
	/* Enable ADC */
	ADC_xSetState(ADC_ENABLE);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ADC_xSetState>
	/* Start ADC conversion */
	ADC_START_CONVERSION();
    12c2:	a6 e2       	ldi	r26, 0x26	; 38
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e6 e2       	ldi	r30, 0x26	; 38
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 64       	ori	r24, 0x40	; 64
    12ce:	8c 93       	st	X, r24
	/* Check ADC flag */
	ADC_CHECK_FLAG();
    12d0:	e6 e2       	ldi	r30, 0x26	; 38
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	82 95       	swap	r24
    12d8:	8f 70       	andi	r24, 0x0F	; 15
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	90 70       	andi	r25, 0x00	; 0
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	a9 f3       	breq	.-22     	; 0x12d0 <ADC_xReadUpperRegSynch+0x30>
	/* Clear ADC flag */
	ADC_CLEAR_FALG();
    12e6:	a6 e2       	ldi	r26, 0x26	; 38
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e6 e2       	ldi	r30, 0x26	; 38
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 61       	ori	r24, 0x10	; 16
    12f2:	8c 93       	st	X, r24
	/* Assign ADC data */
	*u8RecvData = ADCH;
    12f4:	e5 e2       	ldi	r30, 0x25	; 37
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	eb 81       	ldd	r30, Y+3	; 0x03
    12fc:	fc 81       	ldd	r31, Y+4	; 0x04
    12fe:	80 83       	st	Z, r24
	/* Disable ADC */
	ADC_xSetState(ADC_DISABLE);
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ADC_xSetState>

	return Local_xErrorStatus;
    1306:	89 81       	ldd	r24, Y+1	; 0x01

}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <ADC_xReadSynch>:
/* ***************************************************************************** */
Error_Status ADC_xReadSynch(ADC_Ch_t Copy_xADC_Chx,uint16 *u16RecvData)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	29 97       	sbiw	r28, 0x09	; 9
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	8e 83       	std	Y+6, r24	; 0x06
    132c:	78 87       	std	Y+8, r23	; 0x08
    132e:	6f 83       	std	Y+7, r22	; 0x07
	uint32 Local_u32TimeOutCounter	=	0;
    1330:	1a 82       	std	Y+2, r1	; 0x02
    1332:	1b 82       	std	Y+3, r1	; 0x03
    1334:	1c 82       	std	Y+4, r1	; 0x04
    1336:	1d 82       	std	Y+5, r1	; 0x05
	Error_Status Local_xErrorStatus	=	E_NOK;
    1338:	19 82       	std	Y+1, r1	; 0x01
	/* Select ADC channel */
	Local_xErrorStatus	=	ADC_xSelectChannel(Copy_xADC_Chx);
    133a:	8e 81       	ldd	r24, Y+6	; 0x06
    133c:	0e 94 3f 08 	call	0x107e	; 0x107e <ADC_xSelectChannel>
    1340:	89 83       	std	Y+1, r24	; 0x01
	/* Enable ADC */
	//ADC_xSetState(ADC_ENABLE);
	/* Start ADC conversion */
	ADC_START_CONVERSION();
    1342:	a6 e2       	ldi	r26, 0x26	; 38
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e6 e2       	ldi	r30, 0x26	; 38
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 64       	ori	r24, 0x40	; 64
    134e:	8c 93       	st	X, r24
    1350:	1d c0       	rjmp	.+58     	; 0x138c <ADC_xReadSynch+0x76>

	/* Check ADC flag */
	while(GET_BIT(ADCSRA,ADSC) == E_NOK)
	{
		Local_u32TimeOutCounter++;
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	ac 81       	ldd	r26, Y+4	; 0x04
    1358:	bd 81       	ldd	r27, Y+5	; 0x05
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	a1 1d       	adc	r26, r1
    135e:	b1 1d       	adc	r27, r1
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	9b 83       	std	Y+3, r25	; 0x03
    1364:	ac 83       	std	Y+4, r26	; 0x04
    1366:	bd 83       	std	Y+5, r27	; 0x05
		if(ADC_TIME_OUT	==	Local_u32TimeOutCounter)
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	9b 81       	ldd	r25, Y+3	; 0x03
    136c:	ac 81       	ldd	r26, Y+4	; 0x04
    136e:	bd 81       	ldd	r27, Y+5	; 0x05
    1370:	80 31       	cpi	r24, 0x10	; 16
    1372:	27 e2       	ldi	r18, 0x27	; 39
    1374:	92 07       	cpc	r25, r18
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	a2 07       	cpc	r26, r18
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	b2 07       	cpc	r27, r18
    137e:	31 f4       	brne	.+12     	; 0x138c <ADC_xReadSynch+0x76>
		{
			*u16RecvData	=	0;
    1380:	ef 81       	ldd	r30, Y+7	; 0x07
    1382:	f8 85       	ldd	r31, Y+8	; 0x08
    1384:	11 82       	std	Z+1, r1	; 0x01
    1386:	10 82       	st	Z, r1
			return E_NOK;
    1388:	19 86       	std	Y+9, r1	; 0x09
    138a:	43 c0       	rjmp	.+134    	; 0x1412 <ADC_xReadSynch+0xfc>
	//ADC_xSetState(ADC_ENABLE);
	/* Start ADC conversion */
	ADC_START_CONVERSION();

	/* Check ADC flag */
	while(GET_BIT(ADCSRA,ADSC) == E_NOK)
    138c:	e6 e2       	ldi	r30, 0x26	; 38
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	82 95       	swap	r24
    1394:	86 95       	lsr	r24
    1396:	86 95       	lsr	r24
    1398:	83 70       	andi	r24, 0x03	; 3
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	81 70       	andi	r24, 0x01	; 1
    13a0:	90 70       	andi	r25, 0x00	; 0
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	b1 f2       	breq	.-84     	; 0x1352 <ADC_xReadSynch+0x3c>
			*u16RecvData	=	0;
			return E_NOK;
		}
	}
	/* Clear ADC flag */
	ADC_CLEAR_FALG();
    13a6:	a6 e2       	ldi	r26, 0x26	; 38
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e6 e2       	ldi	r30, 0x26	; 38
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	80 61       	ori	r24, 0x10	; 16
    13b2:	8c 93       	st	X, r24
	/* Assign ADC data */
	if(ADC_GET_CURRENT_ADJUST_STATE() == ADC_RIGHT_ADJUST)
    13b4:	80 91 58 04 	lds	r24, 0x0458
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	49 f4       	brne	.+18     	; 0x13ce <ADC_xReadSynch+0xb8>
	{
		*u16RecvData =	ADCBUF_REG;
    13bc:	e4 e2       	ldi	r30, 0x24	; 36
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
    13c4:	ef 81       	ldd	r30, Y+7	; 0x07
    13c6:	f8 85       	ldd	r31, Y+8	; 0x08
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
    13cc:	20 c0       	rjmp	.+64     	; 0x140e <ADC_xReadSynch+0xf8>
	}

	else if(ADC_GET_CURRENT_ADJUST_STATE() == ADC_LEFT_ADJUST)
    13ce:	80 91 58 04 	lds	r24, 0x0458
    13d2:	88 23       	and	r24, r24
    13d4:	d9 f4       	brne	.+54     	; 0x140c <ADC_xReadSynch+0xf6>
	{
		*u16RecvData =	(ADCL >> 6);
    13d6:	e4 e2       	ldi	r30, 0x24	; 36
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	82 95       	swap	r24
    13de:	86 95       	lsr	r24
    13e0:	86 95       	lsr	r24
    13e2:	83 70       	andi	r24, 0x03	; 3
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	ef 81       	ldd	r30, Y+7	; 0x07
    13ea:	f8 85       	ldd	r31, Y+8	; 0x08
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
		*u16RecvData =	(ADCH << 2);
    13f0:	e5 e2       	ldi	r30, 0x25	; 37
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	ef 81       	ldd	r30, Y+7	; 0x07
    1404:	f8 85       	ldd	r31, Y+8	; 0x08
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	01 c0       	rjmp	.+2      	; 0x140e <ADC_xReadSynch+0xf8>
	}
	else
	{
		Local_xErrorStatus	=	E_NOK;
    140c:	19 82       	std	Y+1, r1	; 0x01
	}

	/* Disable ADC */
	//ADC_xSetState(ADC_DISABLE);

	return Local_xErrorStatus;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	89 87       	std	Y+9, r24	; 0x09
    1412:	89 85       	ldd	r24, Y+9	; 0x09
}
    1414:	29 96       	adiw	r28, 0x09	; 9
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <ADC_xReadASynch>:

/* ***************************************************************************** */

Error_Status ADC_xReadASynch(ADC_Ch_t Copy_xADC_Chx,void (*pvCallBack)(uint16))
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <ADC_xReadASynch+0x6>
    142c:	00 d0       	rcall	.+0      	; 0x142e <ADC_xReadASynch+0x8>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	8a 83       	std	Y+2, r24	; 0x02
    1434:	7c 83       	std	Y+4, r23	; 0x04
    1436:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status Local_xErrorStaus	=	E_NOK;
    1438:	19 82       	std	Y+1, r1	; 0x01
	/* Assign callback function */
	ADC_vCallBack		=	pvCallBack;
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	90 93 5a 04 	sts	0x045A, r25
    1442:	80 93 59 04 	sts	0x0459, r24
	/* Select ADC channel */
	Local_xErrorStaus	=	ADC_xSelectChannel(Copy_xADC_Chx);
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	0e 94 3f 08 	call	0x107e	; 0x107e <ADC_xSelectChannel>
    144c:	89 83       	std	Y+1, r24	; 0x01
	/* Enable ADC interrupt */
	Local_xErrorStaus	=	ADC_xSetIntState(ADC_ENABLE_INTERRUPT);
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	0e 94 96 08 	call	0x112c	; 0x112c <ADC_xSetIntState>
    1454:	89 83       	std	Y+1, r24	; 0x01
	/* Enable ADC */
	Local_xErrorStaus	=	ADC_xSetState(ADC_ENABLE);
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ADC_xSetState>
    145c:	89 83       	std	Y+1, r24	; 0x01
	/* Start ADC conversion */
	ADC_START_CONVERSION();
    145e:	a6 e2       	ldi	r26, 0x26	; 38
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e6 e2       	ldi	r30, 0x26	; 38
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	80 64       	ori	r24, 0x40	; 64
    146a:	8c 93       	st	X, r24

	return Local_xErrorStaus;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <__vector16>:

/* ***************************************************************************** */
void ADC_IRQ(void)
{
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <__vector16+0x28>
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	if(ADC_GET_CURRENT_ADJUST_STATE() == ADC_RIGHT_ADJUST)
    14a8:	80 91 58 04 	lds	r24, 0x0458
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	51 f4       	brne	.+20     	; 0x14c4 <__vector16+0x48>
	{
		ADC_vCallBack(ADCBUF_REG);
    14b0:	e0 91 59 04 	lds	r30, 0x0459
    14b4:	f0 91 5a 04 	lds	r31, 0x045A
    14b8:	a4 e2       	ldi	r26, 0x24	; 36
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	8d 91       	ld	r24, X+
    14be:	9c 91       	ld	r25, X
    14c0:	09 95       	icall
    14c2:	23 c0       	rjmp	.+70     	; 0x150a <__vector16+0x8e>
	}
	else if(ADC_GET_CURRENT_ADJUST_STATE() == ADC_LEFT_ADJUST)
    14c4:	80 91 58 04 	lds	r24, 0x0458
    14c8:	88 23       	and	r24, r24
    14ca:	f9 f4       	brne	.+62     	; 0x150a <__vector16+0x8e>
	{
		uint16 Local_u16RecvData	=	0;
    14cc:	1a 82       	std	Y+2, r1	; 0x02
    14ce:	19 82       	std	Y+1, r1	; 0x01

		Local_u16RecvData =	(ADCL >> 6);
    14d0:	e4 e2       	ldi	r30, 0x24	; 36
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	82 95       	swap	r24
    14d8:	86 95       	lsr	r24
    14da:	86 95       	lsr	r24
    14dc:	83 70       	andi	r24, 0x03	; 3
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
		Local_u16RecvData =	(ADCH << 2);
    14e6:	e5 e2       	ldi	r30, 0x25	; 37
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01

		ADC_vCallBack(Local_u16RecvData);
    14fc:	e0 91 59 04 	lds	r30, 0x0459
    1500:	f0 91 5a 04 	lds	r31, 0x045A
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	09 95       	icall
	}

	/* Start ADC conversion */
	ADC_START_CONVERSION();
    150a:	a6 e2       	ldi	r26, 0x26	; 38
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e6 e2       	ldi	r30, 0x26	; 38
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 64       	ori	r24, 0x40	; 64
    1516:	8c 93       	st	X, r24

	/* Clear ADC flag */
	ADC_CLEAR_FALG();
    1518:	a6 e2       	ldi	r26, 0x26	; 38
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e6 e2       	ldi	r30, 0x26	; 38
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 61       	ori	r24, 0x10	; 16
    1524:	8c 93       	st	X, r24
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	ff 91       	pop	r31
    1530:	ef 91       	pop	r30
    1532:	bf 91       	pop	r27
    1534:	af 91       	pop	r26
    1536:	9f 91       	pop	r25
    1538:	8f 91       	pop	r24
    153a:	7f 91       	pop	r23
    153c:	6f 91       	pop	r22
    153e:	5f 91       	pop	r21
    1540:	4f 91       	pop	r20
    1542:	3f 91       	pop	r19
    1544:	2f 91       	pop	r18
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	0f 90       	pop	r0
    154c:	1f 90       	pop	r1
    154e:	18 95       	reti

00001550 <Alarm_xInit>:

#include "Alarm_interface.h"
#include "Alarm_config.h"

Error_Status Alarm_xInit(Alarm_t Alarm, Alarm_State_t state)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <Alarm_xInit+0x6>
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	6a 83       	std	Y+2, r22	; 0x02
	/* Configure Alarm pins as output */
	switch (Alarm)
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	41 f4       	brne	.+16     	; 0x157a <Alarm_xInit+0x2a>
	{
	case ALARM_1:
		GPIO_vInitPortPin(ALARM_1_PORT_DR, ALARM_1_PIN, GPIO_OUT);
    156a:	81 e4       	ldi	r24, 0x41	; 65
    156c:	66 e0       	ldi	r22, 0x06	; 6
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
	default:
		/* No Thing */
		return E_NOK;
		break;
	}
	return E_OK;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	8b 83       	std	Y+3, r24	; 0x03
    1578:	01 c0       	rjmp	.+2      	; 0x157c <Alarm_xInit+0x2c>
		GPIO_vInitPortPin(ALARM_1_PORT_DR, ALARM_1_PIN, GPIO_OUT);
		break;

	default:
		/* No Thing */
		return E_NOK;
    157a:	1b 82       	std	Y+3, r1	; 0x03
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
	return E_OK;
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <Alarm_vToggle>:

void Alarm_vToggle(Alarm_t Alarm)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	0f 92       	push	r0
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	89 83       	std	Y+1, r24	; 0x01
	/* Toggle Alarm */
	if (Alarm_xGetState(Alarm) == ALARM_ON)
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <Alarm_xGetState>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	29 f4       	brne	.+10     	; 0x15aa <Alarm_vToggle+0x20>
	{
		Alarm_xSetState(Alarm, ALARM_OFF);
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Alarm_xSetState>
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <Alarm_vToggle+0x28>
	} else
	{
		Alarm_xSetState(Alarm, ALARM_ON);
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Alarm_xSetState>
	}
}
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <Alarm_xSetState>:

Error_Status Alarm_xSetState(Alarm_t Alarm, Alarm_State_t state)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <Alarm_xSetState+0x6>
    15c0:	0f 92       	push	r0
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	6a 83       	std	Y+2, r22	; 0x02
	/* Set led state */
	switch (Alarm)
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	41 f4       	brne	.+16     	; 0x15e4 <Alarm_xSetState+0x2a>
	{
	case ALARM_1:
		GPIO_vWritePortPin(ALARM_1_PORT_CR, ALARM_1_PIN, state);
    15d4:	81 e4       	ldi	r24, 0x41	; 65
    15d6:	66 e0       	ldi	r22, 0x06	; 6
    15d8:	4a 81       	ldd	r20, Y+2	; 0x02
    15da:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
	default:
		/* No Thing */
		return E_NOK;
		break;
	}
	return E_OK;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	8b 83       	std	Y+3, r24	; 0x03
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <Alarm_xSetState+0x2c>
	case ALARM_1:
		GPIO_vWritePortPin(ALARM_1_PORT_CR, ALARM_1_PIN, state);
		break;
	default:
		/* No Thing */
		return E_NOK;
    15e4:	1b 82       	std	Y+3, r1	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
	return E_OK;
}
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <Alarm_xGetState>:

Alarm_State_t Alarm_xGetState(Alarm_t Alarm)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <Alarm_xGetState+0x6>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
	Alarm_State_t ret = ALARM_OFF;
    1600:	19 82       	std	Y+1, r1	; 0x01

	/* Set Alarm state */
	switch (Alarm)
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	29 f4       	brne	.+10     	; 0x1616 <Alarm_xGetState+0x22>
	{
	case ALARM_1:
		ret = GPIO_xReadPortPin(ALARM_1_PORT_CR, ALARM_1_PIN);
    160c:	81 e4       	ldi	r24, 0x41	; 65
    160e:	66 e0       	ldi	r22, 0x06	; 6
    1610:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    1614:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		/* No Thing */
		break;
	}
	return ret;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <Display_vPrint>:
#include "Display_interface.h"
#define DISPLAY_MSG_MAX									80
static 	LCD_configType LCD_DATA;

void Display_vPrint(uint8 *Copy_u8String,uint8 Copy_u8line)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	27 97       	sbiw	r28, 0x07	; 7
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	6f 83       	std	Y+7, r22	; 0x07
	uint16 Length = 0;
    163c:	1c 82       	std	Y+4, r1	; 0x04
    163e:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u16Index = 0;
    1640:	1a 82       	std	Y+2, r1	; 0x02
    1642:	19 82       	std	Y+1, r1	; 0x01


	Length = strlen(Copy_u8String);
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	0e 94 18 2c 	call	0x5830	; 0x5830 <strlen>
    164c:	9c 83       	std	Y+4, r25	; 0x04
    164e:	8b 83       	std	Y+3, r24	; 0x03

	LCDAnimation_vMoveLine(Copy_u8String,Copy_u8line);
    1650:	8f 81       	ldd	r24, Y+7	; 0x07
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	b9 01       	movw	r22, r18
    165c:	0e 94 8f 18 	call	0x311e	; 0x311e <LCDAnimation_vMoveLine>
}
    1660:	27 96       	adiw	r28, 0x07	; 7
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <Display_vRecieveString>:


void Display_vRecieveString(uint8 *Copy_u8String)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	00 d0       	rcall	.+0      	; 0x1678 <Display_vRecieveString+0x6>
    1678:	00 d0       	rcall	.+0      	; 0x167a <Display_vRecieveString+0x8>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	9c 83       	std	Y+4, r25	; 0x04
    1680:	8b 83       	std	Y+3, r24	; 0x03
	uint8 u8RecvData;
	uint8 Local_u8Index = 0;
    1682:	19 82       	std	Y+1, r1	; 0x01
	memset(Copy_u8String,'\0',sizeof(Copy_u8String));
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	42 e0       	ldi	r20, 0x02	; 2
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	0e 94 0a 2c 	call	0x5814	; 0x5814 <memset>
	while(1)
	{
		u8RecvData = Keypad_xScan();
    1694:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <Keypad_xScan>
    1698:	8a 83       	std	Y+2, r24	; 0x02
		if(u8RecvData != E_NOK)
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	88 23       	and	r24, r24
    169e:	d1 f3       	breq	.-12     	; 0x1694 <Display_vRecieveString+0x22>
		{
			if(DISPLAY_ENTER_KEY==u8RecvData)
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	83 34       	cpi	r24, 0x43	; 67
    16a4:	f9 f0       	breq	.+62     	; 0x16e4 <Display_vRecieveString+0x72>
				break;
			}
			else
			{

				Copy_u8String[Local_u8Index] =  u8RecvData;
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	fc 01       	movw	r30, r24
    16b2:	e2 0f       	add	r30, r18
    16b4:	f3 1f       	adc	r31, r19
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	80 83       	st	Z, r24

				Local_u8Index++;
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	8f 5f       	subi	r24, 0xFF	; 255
    16be:	89 83       	std	Y+1, r24	; 0x01
				Copy_u8String[Local_u8Index] = '\0';
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	fc 01       	movw	r30, r24
    16cc:	e2 0f       	add	r30, r18
    16ce:	f3 1f       	adc	r31, r19
    16d0:	10 82       	st	Z, r1
				LCD_xGotoPosition(LCD_SECOND_LINE,0);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
				LCD_vSendString(Copy_u8String);
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
    16e2:	d8 cf       	rjmp	.-80     	; 0x1694 <Display_vRecieveString+0x22>
			}
		}

	}

}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <Display_vRecvChar>:

void Display_vRecvChar(uint8 *Copy_u8Char)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <Display_vRecvChar+0x6>
    16f8:	0f 92       	push	r0
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	9b 83       	std	Y+3, r25	; 0x03
    1700:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8RecvData;
	u8RecvData = Keypad_xScan();
    1702:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <Keypad_xScan>
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <Display_vRecvChar+0x1e>

	while(u8RecvData == E_NOK)
	{
		u8RecvData	=	Keypad_xScan();
    170a:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <Keypad_xScan>
    170e:	89 83       	std	Y+1, r24	; 0x01
void Display_vRecvChar(uint8 *Copy_u8Char)
{
	uint8 u8RecvData;
	u8RecvData = Keypad_xScan();

	while(u8RecvData == E_NOK)
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	88 23       	and	r24, r24
    1714:	d1 f3       	breq	.-12     	; 0x170a <Display_vRecvChar+0x18>
	{
		u8RecvData	=	Keypad_xScan();
	}

	*Copy_u8Char =  u8RecvData;
    1716:	ea 81       	ldd	r30, Y+2	; 0x02
    1718:	fb 81       	ldd	r31, Y+3	; 0x03
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	80 83       	st	Z, r24
	LCD_xGotoPosition(LCD_SECOND_LINE,0);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
	LCD_xSendByte(u8RecvData);
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <LCD_xSendByte>
}
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <ErrorM_vReport>:
#include "ErrorM_interface.h"

/* ***************************************************************************** */

void ErrorM_vReport( uint16 u16ModuleId,uint8 u8InstanceId,uint8 u8ApiId,uint8 u8ErrorId)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <ErrorM_vReport+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <ErrorM_vReport+0x8>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	6b 83       	std	Y+3, r22	; 0x03
    174c:	4c 83       	std	Y+4, r20	; 0x04
    174e:	2d 83       	std	Y+5, r18	; 0x05
		/* Halt the program */
		/* Print Error message */
	}

#endif
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <GPIO_vInit>:
#include "GPIO_interface.h"

/* ***************************************************************************** */

void GPIO_vInit(GPIO_ConfigType *xpGIPO_Config)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	00 d0       	rcall	.+0      	; 0x1766 <GPIO_vInit+0x6>
    1766:	00 d0       	rcall	.+0      	; 0x1768 <GPIO_vInit+0x8>
    1768:	0f 92       	push	r0
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	9b 83       	std	Y+3, r25	; 0x03
    1770:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8PinsIndex	=	0;
    1772:	19 82       	std	Y+1, r1	; 0x01

	for(Local_u8PinsIndex = 0;NULL != xpGIPO_Config; Local_u8PinsIndex++)
    1774:	19 82       	std	Y+1, r1	; 0x01
    1776:	8a c1       	rjmp	.+788    	; 0x1a8c <GPIO_vInit+0x32c>

		/*
		 * Check which port is needed and set the pin if the mode is GPIO_OUT
		 * and clear the pin if the mode is GPIO_IN
		 *                                                                     */
		switch(xpGIPO_Config->Pins[Local_u8PinsIndex].xPort)
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a 81       	ldd	r20, Y+2	; 0x02
    1780:	5b 81       	ldd	r21, Y+3	; 0x03
    1782:	c9 01       	movw	r24, r18
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	82 0f       	add	r24, r18
    178a:	93 1f       	adc	r25, r19
    178c:	fa 01       	movw	r30, r20
    178e:	e8 0f       	add	r30, r24
    1790:	f9 1f       	adc	r31, r25
    1792:	80 81       	ld	r24, Z
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3d 83       	std	Y+5, r19	; 0x05
    179a:	2c 83       	std	Y+4, r18	; 0x04
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	9d 81       	ldd	r25, Y+5	; 0x05
    17a0:	82 34       	cpi	r24, 0x42	; 66
    17a2:	91 05       	cpc	r25, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <GPIO_vInit+0x48>
    17a6:	6e c0       	rjmp	.+220    	; 0x1884 <GPIO_vInit+0x124>
    17a8:	2c 81       	ldd	r18, Y+4	; 0x04
    17aa:	3d 81       	ldd	r19, Y+5	; 0x05
    17ac:	23 34       	cpi	r18, 0x43	; 67
    17ae:	31 05       	cpc	r19, r1
    17b0:	34 f4       	brge	.+12     	; 0x17be <GPIO_vInit+0x5e>
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	81 34       	cpi	r24, 0x41	; 65
    17b8:	91 05       	cpc	r25, r1
    17ba:	71 f0       	breq	.+28     	; 0x17d8 <GPIO_vInit+0x78>
    17bc:	64 c1       	rjmp	.+712    	; 0x1a86 <GPIO_vInit+0x326>
    17be:	2c 81       	ldd	r18, Y+4	; 0x04
    17c0:	3d 81       	ldd	r19, Y+5	; 0x05
    17c2:	23 34       	cpi	r18, 0x43	; 67
    17c4:	31 05       	cpc	r19, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <GPIO_vInit+0x6a>
    17c8:	b3 c0       	rjmp	.+358    	; 0x1930 <GPIO_vInit+0x1d0>
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	9d 81       	ldd	r25, Y+5	; 0x05
    17ce:	84 34       	cpi	r24, 0x44	; 68
    17d0:	91 05       	cpc	r25, r1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <GPIO_vInit+0x76>
    17d4:	03 c1       	rjmp	.+518    	; 0x19dc <GPIO_vInit+0x27c>
    17d6:	57 c1       	rjmp	.+686    	; 0x1a86 <GPIO_vInit+0x326>
		{
		case GPIOA:
			if (GPIO_OUT == (xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Mode)) {
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a 81       	ldd	r20, Y+2	; 0x02
    17e0:	5b 81       	ldd	r21, Y+3	; 0x03
    17e2:	c9 01       	movw	r24, r18
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	82 0f       	add	r24, r18
    17ea:	93 1f       	adc	r25, r19
    17ec:	84 0f       	add	r24, r20
    17ee:	95 1f       	adc	r25, r21
    17f0:	fc 01       	movw	r30, r24
    17f2:	32 96       	adiw	r30, 0x02	; 2
    17f4:	80 81       	ld	r24, Z
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	11 f5       	brne	.+68     	; 0x183e <GPIO_vInit+0xde>
				SET_BIT(DDRA,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    17fa:	aa e3       	ldi	r26, 0x3A	; 58
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	ea e3       	ldi	r30, 0x3A	; 58
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	68 2f       	mov	r22, r24
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	4a 81       	ldd	r20, Y+2	; 0x02
    180e:	5b 81       	ldd	r21, Y+3	; 0x03
    1810:	c9 01       	movw	r24, r18
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	82 0f       	add	r24, r18
    1818:	93 1f       	adc	r25, r19
    181a:	84 0f       	add	r24, r20
    181c:	95 1f       	adc	r25, r21
    181e:	fc 01       	movw	r30, r24
    1820:	31 96       	adiw	r30, 0x01	; 1
    1822:	80 81       	ld	r24, Z
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 2e       	mov	r0, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <GPIO_vInit+0xd4>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <GPIO_vInit+0xd0>
    1838:	86 2b       	or	r24, r22
    183a:	8c 93       	st	X, r24
    183c:	24 c1       	rjmp	.+584    	; 0x1a86 <GPIO_vInit+0x326>
			}
			else {
				CLEAR_BIT(DDRA,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    183e:	aa e3       	ldi	r26, 0x3A	; 58
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	ea e3       	ldi	r30, 0x3A	; 58
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	68 2f       	mov	r22, r24
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a 81       	ldd	r20, Y+2	; 0x02
    1852:	5b 81       	ldd	r21, Y+3	; 0x03
    1854:	c9 01       	movw	r24, r18
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	82 0f       	add	r24, r18
    185c:	93 1f       	adc	r25, r19
    185e:	84 0f       	add	r24, r20
    1860:	95 1f       	adc	r25, r21
    1862:	fc 01       	movw	r30, r24
    1864:	31 96       	adiw	r30, 0x01	; 1
    1866:	80 81       	ld	r24, Z
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <GPIO_vInit+0x118>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <GPIO_vInit+0x114>
    187c:	80 95       	com	r24
    187e:	86 23       	and	r24, r22
    1880:	8c 93       	st	X, r24
    1882:	01 c1       	rjmp	.+514    	; 0x1a86 <GPIO_vInit+0x326>
			}
			break;
		case GPIOB:
			if (GPIO_OUT == (xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Mode)) {
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	4a 81       	ldd	r20, Y+2	; 0x02
    188c:	5b 81       	ldd	r21, Y+3	; 0x03
    188e:	c9 01       	movw	r24, r18
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	82 0f       	add	r24, r18
    1896:	93 1f       	adc	r25, r19
    1898:	84 0f       	add	r24, r20
    189a:	95 1f       	adc	r25, r21
    189c:	fc 01       	movw	r30, r24
    189e:	32 96       	adiw	r30, 0x02	; 2
    18a0:	80 81       	ld	r24, Z
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	11 f5       	brne	.+68     	; 0x18ea <GPIO_vInit+0x18a>
				SET_BIT(DDRB,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    18a6:	a7 e3       	ldi	r26, 0x37	; 55
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e7 e3       	ldi	r30, 0x37	; 55
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	68 2f       	mov	r22, r24
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	4a 81       	ldd	r20, Y+2	; 0x02
    18ba:	5b 81       	ldd	r21, Y+3	; 0x03
    18bc:	c9 01       	movw	r24, r18
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	82 0f       	add	r24, r18
    18c4:	93 1f       	adc	r25, r19
    18c6:	84 0f       	add	r24, r20
    18c8:	95 1f       	adc	r25, r21
    18ca:	fc 01       	movw	r30, r24
    18cc:	31 96       	adiw	r30, 0x01	; 1
    18ce:	80 81       	ld	r24, Z
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <GPIO_vInit+0x180>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <GPIO_vInit+0x17c>
    18e4:	86 2b       	or	r24, r22
    18e6:	8c 93       	st	X, r24
    18e8:	ce c0       	rjmp	.+412    	; 0x1a86 <GPIO_vInit+0x326>
			}
			else {
				CLEAR_BIT(DDRB,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    18ea:	a7 e3       	ldi	r26, 0x37	; 55
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e7 e3       	ldi	r30, 0x37	; 55
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	68 2f       	mov	r22, r24
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4a 81       	ldd	r20, Y+2	; 0x02
    18fe:	5b 81       	ldd	r21, Y+3	; 0x03
    1900:	c9 01       	movw	r24, r18
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	82 0f       	add	r24, r18
    1908:	93 1f       	adc	r25, r19
    190a:	84 0f       	add	r24, r20
    190c:	95 1f       	adc	r25, r21
    190e:	fc 01       	movw	r30, r24
    1910:	31 96       	adiw	r30, 0x01	; 1
    1912:	80 81       	ld	r24, Z
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <GPIO_vInit+0x1c4>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <GPIO_vInit+0x1c0>
    1928:	80 95       	com	r24
    192a:	86 23       	and	r24, r22
    192c:	8c 93       	st	X, r24
    192e:	ab c0       	rjmp	.+342    	; 0x1a86 <GPIO_vInit+0x326>
			}
			break;
		case GPIOC:
			if (GPIO_OUT == (xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Mode)) {
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4a 81       	ldd	r20, Y+2	; 0x02
    1938:	5b 81       	ldd	r21, Y+3	; 0x03
    193a:	c9 01       	movw	r24, r18
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	82 0f       	add	r24, r18
    1942:	93 1f       	adc	r25, r19
    1944:	84 0f       	add	r24, r20
    1946:	95 1f       	adc	r25, r21
    1948:	fc 01       	movw	r30, r24
    194a:	32 96       	adiw	r30, 0x02	; 2
    194c:	80 81       	ld	r24, Z
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	11 f5       	brne	.+68     	; 0x1996 <GPIO_vInit+0x236>
				SET_BIT(DDRC,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    1952:	a4 e3       	ldi	r26, 0x34	; 52
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e4 e3       	ldi	r30, 0x34	; 52
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	68 2f       	mov	r22, r24
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	4a 81       	ldd	r20, Y+2	; 0x02
    1966:	5b 81       	ldd	r21, Y+3	; 0x03
    1968:	c9 01       	movw	r24, r18
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	82 0f       	add	r24, r18
    1970:	93 1f       	adc	r25, r19
    1972:	84 0f       	add	r24, r20
    1974:	95 1f       	adc	r25, r21
    1976:	fc 01       	movw	r30, r24
    1978:	31 96       	adiw	r30, 0x01	; 1
    197a:	80 81       	ld	r24, Z
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <GPIO_vInit+0x22c>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <GPIO_vInit+0x228>
    1990:	86 2b       	or	r24, r22
    1992:	8c 93       	st	X, r24
    1994:	78 c0       	rjmp	.+240    	; 0x1a86 <GPIO_vInit+0x326>
			}
			else {
				CLEAR_BIT(DDRC,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    1996:	a4 e3       	ldi	r26, 0x34	; 52
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e4 e3       	ldi	r30, 0x34	; 52
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	68 2f       	mov	r22, r24
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a 81       	ldd	r20, Y+2	; 0x02
    19aa:	5b 81       	ldd	r21, Y+3	; 0x03
    19ac:	c9 01       	movw	r24, r18
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	82 0f       	add	r24, r18
    19b4:	93 1f       	adc	r25, r19
    19b6:	84 0f       	add	r24, r20
    19b8:	95 1f       	adc	r25, r21
    19ba:	fc 01       	movw	r30, r24
    19bc:	31 96       	adiw	r30, 0x01	; 1
    19be:	80 81       	ld	r24, Z
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <GPIO_vInit+0x270>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <GPIO_vInit+0x26c>
    19d4:	80 95       	com	r24
    19d6:	86 23       	and	r24, r22
    19d8:	8c 93       	st	X, r24
    19da:	55 c0       	rjmp	.+170    	; 0x1a86 <GPIO_vInit+0x326>
			}
			break;
		case GPIOD:
			if (GPIO_OUT == (xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Mode)) {
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	4a 81       	ldd	r20, Y+2	; 0x02
    19e4:	5b 81       	ldd	r21, Y+3	; 0x03
    19e6:	c9 01       	movw	r24, r18
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	82 0f       	add	r24, r18
    19ee:	93 1f       	adc	r25, r19
    19f0:	84 0f       	add	r24, r20
    19f2:	95 1f       	adc	r25, r21
    19f4:	fc 01       	movw	r30, r24
    19f6:	32 96       	adiw	r30, 0x02	; 2
    19f8:	80 81       	ld	r24, Z
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	11 f5       	brne	.+68     	; 0x1a42 <GPIO_vInit+0x2e2>
				SET_BIT(DDRD,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    19fe:	a1 e3       	ldi	r26, 0x31	; 49
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e1 e3       	ldi	r30, 0x31	; 49
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	68 2f       	mov	r22, r24
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	4a 81       	ldd	r20, Y+2	; 0x02
    1a12:	5b 81       	ldd	r21, Y+3	; 0x03
    1a14:	c9 01       	movw	r24, r18
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	82 0f       	add	r24, r18
    1a1c:	93 1f       	adc	r25, r19
    1a1e:	84 0f       	add	r24, r20
    1a20:	95 1f       	adc	r25, r21
    1a22:	fc 01       	movw	r30, r24
    1a24:	31 96       	adiw	r30, 0x01	; 1
    1a26:	80 81       	ld	r24, Z
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 2e       	mov	r0, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <GPIO_vInit+0x2d8>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	0a 94       	dec	r0
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <GPIO_vInit+0x2d4>
    1a3c:	86 2b       	or	r24, r22
    1a3e:	8c 93       	st	X, r24
    1a40:	22 c0       	rjmp	.+68     	; 0x1a86 <GPIO_vInit+0x326>
			}
			else {
				CLEAR_BIT(DDRD,(xpGIPO_Config->Pins[Local_u8PinsIndex].xPin_Num));
    1a42:	a1 e3       	ldi	r26, 0x31	; 49
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e1 e3       	ldi	r30, 0x31	; 49
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	68 2f       	mov	r22, r24
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a 81       	ldd	r20, Y+2	; 0x02
    1a56:	5b 81       	ldd	r21, Y+3	; 0x03
    1a58:	c9 01       	movw	r24, r18
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	82 0f       	add	r24, r18
    1a60:	93 1f       	adc	r25, r19
    1a62:	84 0f       	add	r24, r20
    1a64:	95 1f       	adc	r25, r21
    1a66:	fc 01       	movw	r30, r24
    1a68:	31 96       	adiw	r30, 0x01	; 1
    1a6a:	80 81       	ld	r24, Z
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 2e       	mov	r0, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <GPIO_vInit+0x31c>
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	0a 94       	dec	r0
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <GPIO_vInit+0x318>
    1a80:	80 95       	com	r24
    1a82:	86 23       	and	r24, r22
    1a84:	8c 93       	st	X, r24

void GPIO_vInit(GPIO_ConfigType *xpGIPO_Config)
{
	uint8 Local_u8PinsIndex	=	0;

	for(Local_u8PinsIndex = 0;NULL != xpGIPO_Config; Local_u8PinsIndex++)
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	8f 5f       	subi	r24, 0xFF	; 255
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <GPIO_vInit+0x336>
    1a94:	71 ce       	rjmp	.-798    	; 0x1778 <GPIO_vInit+0x18>
		default:
			break;

		}
	}
}
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <GPIO_vInitPortPin>:

/* ***************************************************************************** */

void GPIO_vInitPortPin(GPIO_Port_t Copy_xGPIOx,GPIO_Pin_t Copy_xPinx ,GPIO_PinMode_t Copy_xMode)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <GPIO_vInitPortPin+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <GPIO_vInitPortPin+0x8>
    1aae:	0f 92       	push	r0
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	6a 83       	std	Y+2, r22	; 0x02
    1ab8:	4b 83       	std	Y+3, r20	; 0x03
#endif
	/*
	 * Check which port is needed and set the pin if the mode is GPIO_OUT
	 * and clear the pin if the mode is GPIO_IN
	 *                                                                     */
	switch(Copy_xGPIOx) {
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3d 83       	std	Y+5, r19	; 0x05
    1ac2:	2c 83       	std	Y+4, r18	; 0x04
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac8:	82 34       	cpi	r24, 0x42	; 66
    1aca:	91 05       	cpc	r25, r1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <GPIO_vInitPortPin+0x2a>
    1ace:	44 c0       	rjmp	.+136    	; 0x1b58 <GPIO_vInitPortPin+0xb2>
    1ad0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad4:	23 34       	cpi	r18, 0x43	; 67
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	34 f4       	brge	.+12     	; 0x1ae6 <GPIO_vInitPortPin+0x40>
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	81 34       	cpi	r24, 0x41	; 65
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	71 f0       	breq	.+28     	; 0x1b00 <GPIO_vInitPortPin+0x5a>
    1ae4:	bc c0       	rjmp	.+376    	; 0x1c5e <GPIO_vInitPortPin+0x1b8>
    1ae6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aea:	23 34       	cpi	r18, 0x43	; 67
    1aec:	31 05       	cpc	r19, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <GPIO_vInitPortPin+0x4c>
    1af0:	5f c0       	rjmp	.+190    	; 0x1bb0 <GPIO_vInitPortPin+0x10a>
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	84 34       	cpi	r24, 0x44	; 68
    1af8:	91 05       	cpc	r25, r1
    1afa:	09 f4       	brne	.+2      	; 0x1afe <GPIO_vInitPortPin+0x58>
    1afc:	85 c0       	rjmp	.+266    	; 0x1c08 <GPIO_vInitPortPin+0x162>
    1afe:	af c0       	rjmp	.+350    	; 0x1c5e <GPIO_vInitPortPin+0x1b8>
	case GPIOA:
		if (Copy_xMode == GPIO_OUT) {
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	a1 f4       	brne	.+40     	; 0x1b2e <GPIO_vInitPortPin+0x88>
			SET_BIT(DDRA,Copy_xPinx);
    1b06:	aa e3       	ldi	r26, 0x3A	; 58
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	ea e3       	ldi	r30, 0x3A	; 58
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <GPIO_vInitPortPin+0x7e>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <GPIO_vInitPortPin+0x7a>
    1b28:	84 2b       	or	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	98 c0       	rjmp	.+304    	; 0x1c5e <GPIO_vInitPortPin+0x1b8>
		}
		else {
			CLEAR_BIT(DDRA,Copy_xPinx);
    1b2e:	aa e3       	ldi	r26, 0x3A	; 58
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ea e3       	ldi	r30, 0x3A	; 58
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <GPIO_vInitPortPin+0xa6>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <GPIO_vInitPortPin+0xa2>
    1b50:	80 95       	com	r24
    1b52:	84 23       	and	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	83 c0       	rjmp	.+262    	; 0x1c5e <GPIO_vInitPortPin+0x1b8>
		}
		break;
	case GPIOB:
		if (Copy_xMode == GPIO_OUT) {
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	a1 f4       	brne	.+40     	; 0x1b86 <GPIO_vInitPortPin+0xe0>
			SET_BIT(DDRB,Copy_xPinx);
    1b5e:	a7 e3       	ldi	r26, 0x37	; 55
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e7 e3       	ldi	r30, 0x37	; 55
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <GPIO_vInitPortPin+0xd6>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <GPIO_vInitPortPin+0xd2>
    1b80:	84 2b       	or	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	6c c0       	rjmp	.+216    	; 0x1c5e <GPIO_vInitPortPin+0x1b8>
		}
		else {
			CLEAR_BIT(DDRB,Copy_xPinx);
    1b86:	a7 e3       	ldi	r26, 0x37	; 55
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e7 e3       	ldi	r30, 0x37	; 55
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <GPIO_vInitPortPin+0xfe>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <GPIO_vInitPortPin+0xfa>
    1ba8:	80 95       	com	r24
    1baa:	84 23       	and	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	57 c0       	rjmp	.+174    	; 0x1c5e <GPIO_vInitPortPin+0x1b8>
		}
		break;
	case GPIOC:
		if (Copy_xMode == GPIO_OUT) {
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	a1 f4       	brne	.+40     	; 0x1bde <GPIO_vInitPortPin+0x138>
			SET_BIT(DDRC,Copy_xPinx);
    1bb6:	a4 e3       	ldi	r26, 0x34	; 52
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e4 e3       	ldi	r30, 0x34	; 52
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <GPIO_vInitPortPin+0x12e>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <GPIO_vInitPortPin+0x12a>
    1bd8:	84 2b       	or	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	40 c0       	rjmp	.+128    	; 0x1c5e <GPIO_vInitPortPin+0x1b8>
		}
		else {
			CLEAR_BIT(DDRC,Copy_xPinx);
    1bde:	a4 e3       	ldi	r26, 0x34	; 52
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e4 e3       	ldi	r30, 0x34	; 52
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <GPIO_vInitPortPin+0x156>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <GPIO_vInitPortPin+0x152>
    1c00:	80 95       	com	r24
    1c02:	84 23       	and	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	2b c0       	rjmp	.+86     	; 0x1c5e <GPIO_vInitPortPin+0x1b8>
		}
		break;
	case GPIOD:
		if (Copy_xMode == GPIO_OUT) {
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	a1 f4       	brne	.+40     	; 0x1c36 <GPIO_vInitPortPin+0x190>
			SET_BIT(DDRD,Copy_xPinx);
    1c0e:	a1 e3       	ldi	r26, 0x31	; 49
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e1 e3       	ldi	r30, 0x31	; 49
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <GPIO_vInitPortPin+0x186>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <GPIO_vInitPortPin+0x182>
    1c30:	84 2b       	or	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <GPIO_vInitPortPin+0x1b8>
		}
		else {
			CLEAR_BIT(DDRD,Copy_xPinx);
    1c36:	a1 e3       	ldi	r26, 0x31	; 49
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e1 e3       	ldi	r30, 0x31	; 49
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 2e       	mov	r0, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <GPIO_vInitPortPin+0x1ae>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <GPIO_vInitPortPin+0x1aa>
    1c58:	80 95       	com	r24
    1c5a:	84 23       	and	r24, r20
    1c5c:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <GPIO_vWritePortPin>:

/* ***************************************************************************** */

void GPIO_vWritePortPin(GPIO_Port_t Copy_xGPIOx ,GPIO_Pin_t Copy_xPinx ,GPIO_PinState_t Copy_xVal)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <GPIO_vWritePortPin+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <GPIO_vWritePortPin+0x8>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	6a 83       	std	Y+2, r22	; 0x02
    1c80:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 * Check which port is needed and set the pin if the mode is GPIO_HIGH
	 * and clear the pin if the mode is GPIO_LOW
	 *                                                                     */
	switch(Copy_xGPIOx) {
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	3d 83       	std	Y+5, r19	; 0x05
    1c8a:	2c 83       	std	Y+4, r18	; 0x04
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c90:	82 34       	cpi	r24, 0x42	; 66
    1c92:	91 05       	cpc	r25, r1
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <GPIO_vWritePortPin+0x2a>
    1c96:	44 c0       	rjmp	.+136    	; 0x1d20 <GPIO_vWritePortPin+0xb2>
    1c98:	2c 81       	ldd	r18, Y+4	; 0x04
    1c9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c9c:	23 34       	cpi	r18, 0x43	; 67
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	34 f4       	brge	.+12     	; 0x1cae <GPIO_vWritePortPin+0x40>
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca6:	81 34       	cpi	r24, 0x41	; 65
    1ca8:	91 05       	cpc	r25, r1
    1caa:	71 f0       	breq	.+28     	; 0x1cc8 <GPIO_vWritePortPin+0x5a>
    1cac:	bc c0       	rjmp	.+376    	; 0x1e26 <GPIO_vWritePortPin+0x1b8>
    1cae:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb2:	23 34       	cpi	r18, 0x43	; 67
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <GPIO_vWritePortPin+0x4c>
    1cb8:	5f c0       	rjmp	.+190    	; 0x1d78 <GPIO_vWritePortPin+0x10a>
    1cba:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbe:	84 34       	cpi	r24, 0x44	; 68
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <GPIO_vWritePortPin+0x58>
    1cc4:	85 c0       	rjmp	.+266    	; 0x1dd0 <GPIO_vWritePortPin+0x162>
    1cc6:	af c0       	rjmp	.+350    	; 0x1e26 <GPIO_vWritePortPin+0x1b8>
	case GPIOA:
		if (Copy_xVal == GPIO_HIGH) {
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	a1 f4       	brne	.+40     	; 0x1cf6 <GPIO_vWritePortPin+0x88>
			SET_BIT(PORTA,Copy_xPinx);
    1cce:	ab e3       	ldi	r26, 0x3B	; 59
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	eb e3       	ldi	r30, 0x3B	; 59
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <GPIO_vWritePortPin+0x7e>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <GPIO_vWritePortPin+0x7a>
    1cf0:	84 2b       	or	r24, r20
    1cf2:	8c 93       	st	X, r24
    1cf4:	98 c0       	rjmp	.+304    	; 0x1e26 <GPIO_vWritePortPin+0x1b8>
		}
		else {
			CLEAR_BIT(PORTA,Copy_xPinx);
    1cf6:	ab e3       	ldi	r26, 0x3B	; 59
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	eb e3       	ldi	r30, 0x3B	; 59
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <GPIO_vWritePortPin+0xa6>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <GPIO_vWritePortPin+0xa2>
    1d18:	80 95       	com	r24
    1d1a:	84 23       	and	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	83 c0       	rjmp	.+262    	; 0x1e26 <GPIO_vWritePortPin+0x1b8>
		}
		break;
	case GPIOB:
		if (Copy_xVal == GPIO_HIGH) {
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	a1 f4       	brne	.+40     	; 0x1d4e <GPIO_vWritePortPin+0xe0>
			SET_BIT(PORTB,Copy_xPinx);
    1d26:	a8 e3       	ldi	r26, 0x38	; 56
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e8 e3       	ldi	r30, 0x38	; 56
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <GPIO_vWritePortPin+0xd6>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <GPIO_vWritePortPin+0xd2>
    1d48:	84 2b       	or	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	6c c0       	rjmp	.+216    	; 0x1e26 <GPIO_vWritePortPin+0x1b8>
		}
		else {
			CLEAR_BIT(PORTB,Copy_xPinx);
    1d4e:	a8 e3       	ldi	r26, 0x38	; 56
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e8 e3       	ldi	r30, 0x38	; 56
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <GPIO_vWritePortPin+0xfe>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <GPIO_vWritePortPin+0xfa>
    1d70:	80 95       	com	r24
    1d72:	84 23       	and	r24, r20
    1d74:	8c 93       	st	X, r24
    1d76:	57 c0       	rjmp	.+174    	; 0x1e26 <GPIO_vWritePortPin+0x1b8>
		}
		break;
	case GPIOC:
		if (Copy_xVal == GPIO_HIGH) {
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	a1 f4       	brne	.+40     	; 0x1da6 <GPIO_vWritePortPin+0x138>
			SET_BIT(PORTC,Copy_xPinx);
    1d7e:	a5 e3       	ldi	r26, 0x35	; 53
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 e3       	ldi	r30, 0x35	; 53
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <GPIO_vWritePortPin+0x12e>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <GPIO_vWritePortPin+0x12a>
    1da0:	84 2b       	or	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	40 c0       	rjmp	.+128    	; 0x1e26 <GPIO_vWritePortPin+0x1b8>
		}
		else {
			CLEAR_BIT(PORTC,Copy_xPinx);
    1da6:	a5 e3       	ldi	r26, 0x35	; 53
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e5 e3       	ldi	r30, 0x35	; 53
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <GPIO_vWritePortPin+0x156>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <GPIO_vWritePortPin+0x152>
    1dc8:	80 95       	com	r24
    1dca:	84 23       	and	r24, r20
    1dcc:	8c 93       	st	X, r24
    1dce:	2b c0       	rjmp	.+86     	; 0x1e26 <GPIO_vWritePortPin+0x1b8>
		}
		break;
	case GPIOD:
		if (Copy_xVal == GPIO_HIGH) {
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	a1 f4       	brne	.+40     	; 0x1dfe <GPIO_vWritePortPin+0x190>
			SET_BIT(PORTD,Copy_xPinx);
    1dd6:	a2 e3       	ldi	r26, 0x32	; 50
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e2 e3       	ldi	r30, 0x32	; 50
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	48 2f       	mov	r20, r24
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 2e       	mov	r0, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <GPIO_vWritePortPin+0x186>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <GPIO_vWritePortPin+0x182>
    1df8:	84 2b       	or	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <GPIO_vWritePortPin+0x1b8>
		}
		else {
			CLEAR_BIT(PORTD,Copy_xPinx);
    1dfe:	a2 e3       	ldi	r26, 0x32	; 50
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e2 e3       	ldi	r30, 0x32	; 50
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 2e       	mov	r0, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <GPIO_vWritePortPin+0x1ae>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	0a 94       	dec	r0
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <GPIO_vWritePortPin+0x1aa>
    1e20:	80 95       	com	r24
    1e22:	84 23       	and	r24, r20
    1e24:	8c 93       	st	X, r24
	default:
		break;
	}


}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <GPIO_xReadPortPin>:

/* ***************************************************************************** */

GPIO_PinState_t GPIO_xReadPortPin(GPIO_Port_t Copy_xGPIOx ,GPIO_Pin_t Copy_xPinx)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <GPIO_xReadPortPin+0x6>
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <GPIO_xReadPortPin+0x8>
    1e3e:	0f 92       	push	r0
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	8a 83       	std	Y+2, r24	; 0x02
    1e46:	6b 83       	std	Y+3, r22	; 0x03
	}
#endif


	/* Get the state of the pin based on specific port and pin */
	GPIO_PinState_t Local_GPIO_xState = 0;
    1e48:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_xGPIOx) {
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	3d 83       	std	Y+5, r19	; 0x05
    1e52:	2c 83       	std	Y+4, r18	; 0x04
    1e54:	4c 81       	ldd	r20, Y+4	; 0x04
    1e56:	5d 81       	ldd	r21, Y+5	; 0x05
    1e58:	42 34       	cpi	r20, 0x42	; 66
    1e5a:	51 05       	cpc	r21, r1
    1e5c:	41 f1       	breq	.+80     	; 0x1eae <GPIO_xReadPortPin+0x78>
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	9d 81       	ldd	r25, Y+5	; 0x05
    1e62:	83 34       	cpi	r24, 0x43	; 67
    1e64:	91 05       	cpc	r25, r1
    1e66:	34 f4       	brge	.+12     	; 0x1e74 <GPIO_xReadPortPin+0x3e>
    1e68:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6c:	21 34       	cpi	r18, 0x41	; 65
    1e6e:	31 05       	cpc	r19, r1
    1e70:	61 f0       	breq	.+24     	; 0x1e8a <GPIO_xReadPortPin+0x54>
    1e72:	52 c0       	rjmp	.+164    	; 0x1f18 <GPIO_xReadPortPin+0xe2>
    1e74:	4c 81       	ldd	r20, Y+4	; 0x04
    1e76:	5d 81       	ldd	r21, Y+5	; 0x05
    1e78:	43 34       	cpi	r20, 0x43	; 67
    1e7a:	51 05       	cpc	r21, r1
    1e7c:	51 f1       	breq	.+84     	; 0x1ed2 <GPIO_xReadPortPin+0x9c>
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	9d 81       	ldd	r25, Y+5	; 0x05
    1e82:	84 34       	cpi	r24, 0x44	; 68
    1e84:	91 05       	cpc	r25, r1
    1e86:	b9 f1       	breq	.+110    	; 0x1ef6 <GPIO_xReadPortPin+0xc0>
    1e88:	47 c0       	rjmp	.+142    	; 0x1f18 <GPIO_xReadPortPin+0xe2>
	case GPIOA:
		Local_GPIO_xState = GET_BIT(PINA,Copy_xPinx);
    1e8a:	e9 e3       	ldi	r30, 0x39	; 57
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a9 01       	movw	r20, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <GPIO_xReadPortPin+0x6c>
    1e9e:	55 95       	asr	r21
    1ea0:	47 95       	ror	r20
    1ea2:	8a 95       	dec	r24
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <GPIO_xReadPortPin+0x68>
    1ea6:	ca 01       	movw	r24, r20
    1ea8:	81 70       	andi	r24, 0x01	; 1
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	35 c0       	rjmp	.+106    	; 0x1f18 <GPIO_xReadPortPin+0xe2>
		break;
	case GPIOB:
		Local_GPIO_xState = GET_BIT(PINB,Copy_xPinx);
    1eae:	e6 e3       	ldi	r30, 0x36	; 54
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a9 01       	movw	r20, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <GPIO_xReadPortPin+0x90>
    1ec2:	55 95       	asr	r21
    1ec4:	47 95       	ror	r20
    1ec6:	8a 95       	dec	r24
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <GPIO_xReadPortPin+0x8c>
    1eca:	ca 01       	movw	r24, r20
    1ecc:	81 70       	andi	r24, 0x01	; 1
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	23 c0       	rjmp	.+70     	; 0x1f18 <GPIO_xReadPortPin+0xe2>
		break;
	case GPIOC:
		Local_GPIO_xState = GET_BIT(PINC, Copy_xPinx);
    1ed2:	e3 e3       	ldi	r30, 0x33	; 51
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a9 01       	movw	r20, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <GPIO_xReadPortPin+0xb4>
    1ee6:	55 95       	asr	r21
    1ee8:	47 95       	ror	r20
    1eea:	8a 95       	dec	r24
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <GPIO_xReadPortPin+0xb0>
    1eee:	ca 01       	movw	r24, r20
    1ef0:	81 70       	andi	r24, 0x01	; 1
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	11 c0       	rjmp	.+34     	; 0x1f18 <GPIO_xReadPortPin+0xe2>
		break;
	case GPIOD:
		Local_GPIO_xState = GET_BIT(PIND,Copy_xPinx);
    1ef6:	e0 e3       	ldi	r30, 0x30	; 48
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a9 01       	movw	r20, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <GPIO_xReadPortPin+0xd8>
    1f0a:	55 95       	asr	r21
    1f0c:	47 95       	ror	r20
    1f0e:	8a 95       	dec	r24
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <GPIO_xReadPortPin+0xd4>
    1f12:	ca 01       	movw	r24, r20
    1f14:	81 70       	andi	r24, 0x01	; 1
    1f16:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	/* Return the state */
	return Local_GPIO_xState;
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <GPIO_xFlipPortPin>:

/* ***************************************************************************** */

GPIO_PinState_t GPIO_xFlipPortPin(GPIO_Port_t Copy_xGPIOx ,GPIO_Pin_t Copy_xPinx)
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	00 d0       	rcall	.+0      	; 0x1f30 <GPIO_xFlipPortPin+0x6>
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <GPIO_xFlipPortPin+0x8>
    1f32:	0f 92       	push	r0
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    1f3a:	6b 83       	std	Y+3, r22	; 0x03
		ErrorM_vReport(GPIO_MODULE_ID,GPIO_INSTANCE_ID,GPIO_FLIP_CHANNEL_SID,GPIO_E_PARAM_INVALID_CHANNEL_ID);
	}
#endif

	/* Toggle the pin if it is high turn it to low and vice versa */
	GPIO_PinState_t Local_xState = GPIO_xReadPortPin(Copy_xGPIOx,Copy_xPinx);
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	6b 81       	ldd	r22, Y+3	; 0x03
    1f40:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    1f44:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_xState)
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	3d 83       	std	Y+5, r19	; 0x05
    1f4e:	2c 83       	std	Y+4, r18	; 0x04
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	59 f0       	breq	.+22     	; 0x1f6e <GPIO_xFlipPortPin+0x44>
    1f58:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5c:	21 30       	cpi	r18, 0x01	; 1
    1f5e:	31 05       	cpc	r19, r1
    1f60:	59 f4       	brne	.+22     	; 0x1f78 <GPIO_xFlipPortPin+0x4e>
	{
	case GPIO_HIGH:
		GPIO_vWritePortPin(Copy_xGPIOx,Copy_xPinx,GPIO_LOW);
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	6b 81       	ldd	r22, Y+3	; 0x03
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
    1f6c:	05 c0       	rjmp	.+10     	; 0x1f78 <GPIO_xFlipPortPin+0x4e>
		break;
	case GPIO_LOW:
		GPIO_vWritePortPin(Copy_xGPIOx,Copy_xPinx,GPIO_HIGH);
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	6b 81       	ldd	r22, Y+3	; 0x03
    1f72:	41 e0       	ldi	r20, 0x01	; 1
    1f74:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		break;
	default:
		break;
	}
	/* Return the current state */
	Local_xState = ~ Local_xState;
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	80 95       	com	r24
    1f7c:	89 83       	std	Y+1, r24	; 0x01

	return Local_xState;
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <GPIO_vInitPort>:

/* ***************************************************************************** */

void GPIO_vInitPort(GPIO_Port_t Copy_xGPIOx ,GPIO_PortMode_t Copy_xMode)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <GPIO_vInitPort+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <GPIO_vInitPort+0x8>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	6a 83       	std	Y+2, r22	; 0x02
	{
		ErrorM_vReport(GPIO_MODULE_ID,GPIO_INSTANCE_ID,GPIO_INIT_PORT_SID,GPIO_E_PARAM_STATE);
	}
#endif
	/* Assign the mode to the port */
	switch(Copy_xGPIOx) {
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	3c 83       	std	Y+4, r19	; 0x04
    1fa8:	2b 83       	std	Y+3, r18	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	82 34       	cpi	r24, 0x42	; 66
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	d9 f0       	breq	.+54     	; 0x1fea <GPIO_vInitPort+0x5a>
    1fb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb8:	23 34       	cpi	r18, 0x43	; 67
    1fba:	31 05       	cpc	r19, r1
    1fbc:	34 f4       	brge	.+12     	; 0x1fca <GPIO_vInitPort+0x3a>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	81 34       	cpi	r24, 0x41	; 65
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	61 f0       	breq	.+24     	; 0x1fe0 <GPIO_vInitPort+0x50>
    1fc8:	1e c0       	rjmp	.+60     	; 0x2006 <GPIO_vInitPort+0x76>
    1fca:	2b 81       	ldd	r18, Y+3	; 0x03
    1fcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fce:	23 34       	cpi	r18, 0x43	; 67
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	81 f0       	breq	.+32     	; 0x1ff4 <GPIO_vInitPort+0x64>
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	84 34       	cpi	r24, 0x44	; 68
    1fda:	91 05       	cpc	r25, r1
    1fdc:	81 f0       	breq	.+32     	; 0x1ffe <GPIO_vInitPort+0x6e>
    1fde:	13 c0       	rjmp	.+38     	; 0x2006 <GPIO_vInitPort+0x76>
	case GPIOA:
		DDRA = Copy_xMode;
    1fe0:	ea e3       	ldi	r30, 0x3A	; 58
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	80 83       	st	Z, r24
    1fe8:	0e c0       	rjmp	.+28     	; 0x2006 <GPIO_vInitPort+0x76>
		break;
	case GPIOB:
		DDRB = Copy_xMode;
    1fea:	e7 e3       	ldi	r30, 0x37	; 55
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	80 83       	st	Z, r24
    1ff2:	09 c0       	rjmp	.+18     	; 0x2006 <GPIO_vInitPort+0x76>
		break;
	case GPIOC:
		DDRC = Copy_xMode;
    1ff4:	e4 e3       	ldi	r30, 0x34	; 52
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	80 83       	st	Z, r24
    1ffc:	04 c0       	rjmp	.+8      	; 0x2006 <GPIO_vInitPort+0x76>
		break;
	case GPIOD:
		DDRD = Copy_xMode;
    1ffe:	e1 e3       	ldi	r30, 0x31	; 49
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <GPIO_vWritePort>:

/* ***************************************************************************** */

void GPIO_vWritePort(GPIO_Port_t Copy_xGPIOx ,GPIO_PortState_t Copy_xVal)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	00 d0       	rcall	.+0      	; 0x201a <GPIO_vWritePort+0x6>
    201a:	00 d0       	rcall	.+0      	; 0x201c <GPIO_vWritePort+0x8>
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	6a 83       	std	Y+2, r22	; 0x02
		ErrorM_vReport(GPIO_MODULE_ID,GPIO_INSTANCE_ID,GPIO_WRITE_PORT_SID,GPIO_E_PARAM_STATE);
	}
#endif

	/* Assign the value to the port */
	switch(Copy_xGPIOx) {
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	3c 83       	std	Y+4, r19	; 0x04
    202c:	2b 83       	std	Y+3, r18	; 0x03
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	82 34       	cpi	r24, 0x42	; 66
    2034:	91 05       	cpc	r25, r1
    2036:	d9 f0       	breq	.+54     	; 0x206e <GPIO_vWritePort+0x5a>
    2038:	2b 81       	ldd	r18, Y+3	; 0x03
    203a:	3c 81       	ldd	r19, Y+4	; 0x04
    203c:	23 34       	cpi	r18, 0x43	; 67
    203e:	31 05       	cpc	r19, r1
    2040:	34 f4       	brge	.+12     	; 0x204e <GPIO_vWritePort+0x3a>
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	81 34       	cpi	r24, 0x41	; 65
    2048:	91 05       	cpc	r25, r1
    204a:	61 f0       	breq	.+24     	; 0x2064 <GPIO_vWritePort+0x50>
    204c:	1e c0       	rjmp	.+60     	; 0x208a <GPIO_vWritePort+0x76>
    204e:	2b 81       	ldd	r18, Y+3	; 0x03
    2050:	3c 81       	ldd	r19, Y+4	; 0x04
    2052:	23 34       	cpi	r18, 0x43	; 67
    2054:	31 05       	cpc	r19, r1
    2056:	81 f0       	breq	.+32     	; 0x2078 <GPIO_vWritePort+0x64>
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	84 34       	cpi	r24, 0x44	; 68
    205e:	91 05       	cpc	r25, r1
    2060:	81 f0       	breq	.+32     	; 0x2082 <GPIO_vWritePort+0x6e>
    2062:	13 c0       	rjmp	.+38     	; 0x208a <GPIO_vWritePort+0x76>
	case GPIOA:
		DDRA = Copy_xVal;
    2064:	ea e3       	ldi	r30, 0x3A	; 58
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	80 83       	st	Z, r24
    206c:	0e c0       	rjmp	.+28     	; 0x208a <GPIO_vWritePort+0x76>
		break;
	case GPIOB:
		DDRB = Copy_xVal;
    206e:	e7 e3       	ldi	r30, 0x37	; 55
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	80 83       	st	Z, r24
    2076:	09 c0       	rjmp	.+18     	; 0x208a <GPIO_vWritePort+0x76>
		break;
	case GPIOC:
		DDRC = Copy_xVal;
    2078:	e4 e3       	ldi	r30, 0x34	; 52
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	80 83       	st	Z, r24
    2080:	04 c0       	rjmp	.+8      	; 0x208a <GPIO_vWritePort+0x76>
		break;
	case GPIOD:
		DDRD = Copy_xVal;
    2082:	e1 e3       	ldi	r30, 0x31	; 49
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	80 83       	st	Z, r24
		break;
	default:
		break;
	}

}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <Home_vInit>:
#include "Home_config.h"


/* ***************************************************************************** */
void Home_vInit(void)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
	LED_xInit(HOME_LIGHT_LED,HOME_LIGHT_OFF);
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <LED_xInit>
	LED_xInit(HOME_LIGHT_LDR_SENSOR_LED,HOME_LIGHT_OFF);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <LED_xInit>
}
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <Home_xEnter>:

/* ***************************************************************************** */

Flag_Status Home_xEnter(void)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	c7 56       	subi	r28, 0x67	; 103
    20c0:	d0 40       	sbci	r29, 0x00	; 0
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8LoginTries 		=	0;
    20cc:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Name[NAME_LENGTH]			=	{[0 ... 49]='\0'};
    20ce:	82 e3       	ldi	r24, 0x32	; 50
    20d0:	fe 01       	movw	r30, r28
    20d2:	34 96       	adiw	r30, 0x04	; 4
    20d4:	df 01       	movw	r26, r30
    20d6:	98 2f       	mov	r25, r24
    20d8:	1d 92       	st	X+, r1
    20da:	9a 95       	dec	r25
    20dc:	e9 f7       	brne	.-6      	; 0x20d8 <Home_xEnter+0x22>
	uint8 Pass[PASS_LENGTH]			=	{0};
    20de:	82 e3       	ldi	r24, 0x32	; 50
    20e0:	fe 01       	movw	r30, r28
    20e2:	f6 96       	adiw	r30, 0x36	; 54
    20e4:	df 01       	movw	r26, r30
    20e6:	98 2f       	mov	r25, r24
    20e8:	1d 92       	st	X+, r1
    20ea:	9a 95       	dec	r25
    20ec:	e9 f7       	brne	.-6      	; 0x20e8 <Home_xEnter+0x32>
	Flag_Status Local_EntryFlag		=	E_NOK;
    20ee:	1a 82       	std	Y+2, r1	; 0x02
	Flag_Status Local_xRightPwFlag	=	E_NOK;
    20f0:	19 82       	std	Y+1, r1	; 0x01

	LCD_xGotoPosition(LCD_FIRST_LINE,0);
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
	LCD_vSendString("Enter user name");
    20fa:	80 e6       	ldi	r24, 0x60	; 96
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
	for(Local_u8LoginTries = 0;Local_u8LoginTries < HOME_LOGIN_TRIES;Local_u8LoginTries++)
    2102:	1b 82       	std	Y+3, r1	; 0x03
    2104:	2b c0       	rjmp	.+86     	; 0x215c <Home_xEnter+0xa6>
	{
		if(Local_u8LoginTries > 0)
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	88 23       	and	r24, r24
    210a:	29 f0       	breq	.+10     	; 0x2116 <Home_xEnter+0x60>
		{
			Display_vPrint("Try again",LCD_FIRST_LINE);
    210c:	80 e7       	ldi	r24, 0x70	; 112
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
		}
		Display_vRecieveString(&Name);
    2116:	ce 01       	movw	r24, r28
    2118:	04 96       	adiw	r24, 0x04	; 4
    211a:	0e 94 39 0b 	call	0x1672	; 0x1672 <Display_vRecieveString>

		if(Login_CheckUserName(&Name) == E_OK)
    211e:	ce 01       	movw	r24, r28
    2120:	04 96       	adiw	r24, 0x04	; 4
    2122:	0e 94 aa 20 	call	0x4154	; 0x4154 <Login_CheckUserName>
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	39 f4       	brne	.+14     	; 0x2138 <Home_xEnter+0x82>
		{
			Local_EntryFlag	=	E_OK;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	8a 83       	std	Y+2, r24	; 0x02
			Alarm_xSetState(ALARM_1,ALARM_OFF);
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Alarm_xSetState>
    2136:	15 c0       	rjmp	.+42     	; 0x2162 <Home_xEnter+0xac>
			break;
		}
		else
		{
			LCD_vClear();
    2138:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
			LCD_xGotoPosition(0,0);
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
			Display_vPrint("Wrong user",LCD_FIRST_LINE);
    2144:	8a e7       	ldi	r24, 0x7A	; 122
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
			LCD_xGotoPosition(0,1);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	61 e0       	ldi	r22, 0x01	; 1
    2152:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
	Flag_Status Local_EntryFlag		=	E_NOK;
	Flag_Status Local_xRightPwFlag	=	E_NOK;

	LCD_xGotoPosition(LCD_FIRST_LINE,0);
	LCD_vSendString("Enter user name");
	for(Local_u8LoginTries = 0;Local_u8LoginTries < HOME_LOGIN_TRIES;Local_u8LoginTries++)
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	8f 5f       	subi	r24, 0xFF	; 255
    215a:	8b 83       	std	Y+3, r24	; 0x03
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	83 30       	cpi	r24, 0x03	; 3
    2160:	90 f2       	brcs	.-92     	; 0x2106 <Home_xEnter+0x50>
			Display_vPrint("Wrong user",LCD_FIRST_LINE);
			LCD_xGotoPosition(0,1);
		}
	}

	LCD_vClear();
    2162:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
	if(Local_EntryFlag == E_OK)
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	49 f5       	brne	.+82     	; 0x21be <Home_xEnter+0x108>
	{
		LCD_vSendString("Enter pass");
    216c:	85 e8       	ldi	r24, 0x85	; 133
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
		for(Local_u8LoginTries = 0;Local_u8LoginTries < HOME_LOGIN_TRIES;Local_u8LoginTries++)
    2174:	1b 82       	std	Y+3, r1	; 0x03
    2176:	1f c0       	rjmp	.+62     	; 0x21b6 <Home_xEnter+0x100>
		{
			if(Local_u8LoginTries > 0)
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	88 23       	and	r24, r24
    217c:	29 f0       	breq	.+10     	; 0x2188 <Home_xEnter+0xd2>
			{
				Display_vPrint("Try again",LCD_FIRST_LINE);
    217e:	80 e7       	ldi	r24, 0x70	; 112
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>
			}
			Display_vRecieveString(Pass);
    2188:	ce 01       	movw	r24, r28
    218a:	c6 96       	adiw	r24, 0x36	; 54
    218c:	0e 94 39 0b 	call	0x1672	; 0x1672 <Display_vRecieveString>
			if(Login_CheckPass(Pass) == E_OK)
    2190:	ce 01       	movw	r24, r28
    2192:	c6 96       	adiw	r24, 0x36	; 54
    2194:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <Login_CheckPass>
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	19 f4       	brne	.+6      	; 0x21a2 <Home_xEnter+0xec>
			{
				Local_xRightPwFlag	=	E_OK;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	12 c0       	rjmp	.+36     	; 0x21c6 <Home_xEnter+0x110>
				break;
			}
			else
			{
				LCD_vClear();
    21a2:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
				Display_vPrint("Wrong password",LCD_FIRST_LINE);
    21a6:	80 e9       	ldi	r24, 0x90	; 144
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	0e 94 11 0b 	call	0x1622	; 0x1622 <Display_vPrint>

	LCD_vClear();
	if(Local_EntryFlag == E_OK)
	{
		LCD_vSendString("Enter pass");
		for(Local_u8LoginTries = 0;Local_u8LoginTries < HOME_LOGIN_TRIES;Local_u8LoginTries++)
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	8f 5f       	subi	r24, 0xFF	; 255
    21b4:	8b 83       	std	Y+3, r24	; 0x03
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	83 30       	cpi	r24, 0x03	; 3
    21ba:	f0 f2       	brcs	.-68     	; 0x2178 <Home_xEnter+0xc2>
    21bc:	04 c0       	rjmp	.+8      	; 0x21c6 <Home_xEnter+0x110>
			}
		}
	}
	else
	{
		Alarm_xSetState(ALARM_1,ALARM_ON);
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Alarm_xSetState>
	}
	if(Local_xRightPwFlag == E_NOK)
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	88 23       	and	r24, r24
    21ca:	21 f4       	brne	.+8      	; 0x21d4 <Home_xEnter+0x11e>
	{
		Alarm_xSetState(ALARM_1,ALARM_ON);
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Alarm_xSetState>
	}

	return Local_xRightPwFlag;
    21d4:	89 81       	ldd	r24, Y+1	; 0x01

}
    21d6:	c9 59       	subi	r28, 0x99	; 153
    21d8:	df 4f       	sbci	r29, 0xFF	; 255
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <Home_vPrintTemp>:

/* ***************************************************************************** */

void Home_vPrintTemp(void)
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	6c 97       	sbiw	r28, 0x1c	; 28
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
	LCD_vClear();
    21fe:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
	float32 Local_f32CurrentTemp	=	0;
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	a0 e0       	ldi	r26, 0x00	; 0
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	8f 87       	std	Y+15, r24	; 0x0f
    220c:	98 8b       	std	Y+16, r25	; 0x10
    220e:	a9 8b       	std	Y+17, r26	; 0x11
    2210:	ba 8b       	std	Y+18, r27	; 0x12
	uint8 u8TempBuf[TEMP_BUF_SIZE]	=	{0};
    2212:	8a e0       	ldi	r24, 0x0A	; 10
    2214:	fe 01       	movw	r30, r28
    2216:	73 96       	adiw	r30, 0x13	; 19
    2218:	df 01       	movw	r26, r30
    221a:	98 2f       	mov	r25, r24
    221c:	1d 92       	st	X+, r1
    221e:	9a 95       	dec	r25
    2220:	e9 f7       	brne	.-6      	; 0x221c <Home_vPrintTemp+0x32>
	/* Update temperature reading */
	TempS_vUpdate();
    2222:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <TempS_vUpdate>

	/* Read the current temperature */
	Local_f32CurrentTemp	=	TempS_f32GetTemp();
    2226:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <TempS_f32GetTemp>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	8f 87       	std	Y+15, r24	; 0x0f
    2230:	98 8b       	std	Y+16, r25	; 0x10
    2232:	a9 8b       	std	Y+17, r26	; 0x11
    2234:	ba 8b       	std	Y+18, r27	; 0x12
	Util_String_vFloatToStr(Local_f32CurrentTemp,u8TempBuf,TEMP_MAX_FLOAT_NUM);
    2236:	8f 85       	ldd	r24, Y+15	; 0x0f
    2238:	98 89       	ldd	r25, Y+16	; 0x10
    223a:	a9 89       	ldd	r26, Y+17	; 0x11
    223c:	ba 89       	ldd	r27, Y+18	; 0x12
    223e:	9e 01       	movw	r18, r28
    2240:	2d 5e       	subi	r18, 0xED	; 237
    2242:	3f 4f       	sbci	r19, 0xFF	; 255
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	a9 01       	movw	r20, r18
    224a:	22 e0       	ldi	r18, 0x02	; 2
    224c:	0e 94 a1 28 	call	0x5142	; 0x5142 <Util_String_vFloatToStr>
	LCD_xGotoPosition(0,0);
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
	LCD_vSendString("Temperature is");
    2258:	8f e9       	ldi	r24, 0x9F	; 159
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
	LCD_xGotoPosition(1,0);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
	LCD_vSendString(u8TempBuf);
    2268:	ce 01       	movw	r24, r28
    226a:	43 96       	adiw	r24, 0x13	; 19
    226c:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	aa e7       	ldi	r26, 0x7A	; 122
    2276:	b4 e4       	ldi	r27, 0x44	; 68
    2278:	8b 87       	std	Y+11, r24	; 0x0b
    227a:	9c 87       	std	Y+12, r25	; 0x0c
    227c:	ad 87       	std	Y+13, r26	; 0x0d
    227e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	6b 85       	ldd	r22, Y+11	; 0x0b
    2282:	7c 85       	ldd	r23, Y+12	; 0x0c
    2284:	8d 85       	ldd	r24, Y+13	; 0x0d
    2286:	9e 85       	ldd	r25, Y+14	; 0x0e
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a ef       	ldi	r20, 0xFA	; 250
    228e:	54 e4       	ldi	r21, 0x44	; 68
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8f 83       	std	Y+7, r24	; 0x07
    229a:	98 87       	std	Y+8, r25	; 0x08
    229c:	a9 87       	std	Y+9, r26	; 0x09
    229e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a0:	6f 81       	ldd	r22, Y+7	; 0x07
    22a2:	78 85       	ldd	r23, Y+8	; 0x08
    22a4:	89 85       	ldd	r24, Y+9	; 0x09
    22a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <Home_vPrintTemp+0xd8>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <Home_vPrintTemp+0x156>
	else if (__tmp > 65535)
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <Home_vPrintTemp+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	6b 85       	ldd	r22, Y+11	; 0x0b
    22dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22de:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9e 83       	std	Y+6, r25	; 0x06
    2300:	8d 83       	std	Y+5, r24	; 0x05
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <Home_vPrintTemp+0x138>
    2304:	88 ec       	ldi	r24, 0xC8	; 200
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9c 83       	std	Y+4, r25	; 0x04
    230a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <Home_vPrintTemp+0x126>
    2314:	9c 83       	std	Y+4, r25	; 0x04
    2316:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <Home_vPrintTemp+0x11a>
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <Home_vPrintTemp+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	6f 81       	ldd	r22, Y+7	; 0x07
    232e:	78 85       	ldd	r23, Y+8	; 0x08
    2330:	89 85       	ldd	r24, Y+9	; 0x09
    2332:	9a 85       	ldd	r25, Y+10	; 0x0a
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	9a 81       	ldd	r25, Y+2	; 0x02
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <Home_vPrintTemp+0x162>
    2350:	9a 83       	std	Y+2, r25	; 0x02
    2352:	89 83       	std	Y+1, r24	; 0x01
	HOME_DELAY_MS(1000);
}
    2354:	6c 96       	adiw	r28, 0x1c	; 28
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <Home_vOpenDoor>:

/* ***************************************************************************** */

void Home_vOpenDoor(void)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	60 97       	sbiw	r28, 0x10	; 16
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
	uint16 Local_u16Index = 0;
    237a:	18 8a       	std	Y+16, r1	; 0x10
    237c:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u16Index=0;Local_u16Index<HOME_DOOR_SERVO_MAX_MS;Local_u16Index+=100)
    237e:	18 8a       	std	Y+16, r1	; 0x10
    2380:	1f 86       	std	Y+15, r1	; 0x0f
    2382:	7d c0       	rjmp	.+250    	; 0x247e <Home_vOpenDoor+0x118>
	{
		PWM_xSet_TONus(Local_u16Index,HOME_DOOR_SERVO_CH);
    2384:	8f 85       	ldd	r24, Y+15	; 0x0f
    2386:	98 89       	ldd	r25, Y+16	; 0x10
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	0e 94 03 26 	call	0x4c06	; 0x4c06 <PWM_xSet_TONus>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a8 e4       	ldi	r26, 0x48	; 72
    2394:	b2 e4       	ldi	r27, 0x42	; 66
    2396:	8b 87       	std	Y+11, r24	; 0x0b
    2398:	9c 87       	std	Y+12, r25	; 0x0c
    239a:	ad 87       	std	Y+13, r26	; 0x0d
    239c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239e:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a ef       	ldi	r20, 0xFA	; 250
    23ac:	54 e4       	ldi	r21, 0x44	; 68
    23ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	8f 83       	std	Y+7, r24	; 0x07
    23b8:	98 87       	std	Y+8, r25	; 0x08
    23ba:	a9 87       	std	Y+9, r26	; 0x09
    23bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23be:	6f 81       	ldd	r22, Y+7	; 0x07
    23c0:	78 85       	ldd	r23, Y+8	; 0x08
    23c2:	89 85       	ldd	r24, Y+9	; 0x09
    23c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <Home_vOpenDoor+0x7a>
		__ticks = 1;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9e 83       	std	Y+6, r25	; 0x06
    23dc:	8d 83       	std	Y+5, r24	; 0x05
    23de:	3f c0       	rjmp	.+126    	; 0x245e <Home_vOpenDoor+0xf8>
	else if (__tmp > 65535)
    23e0:	6f 81       	ldd	r22, Y+7	; 0x07
    23e2:	78 85       	ldd	r23, Y+8	; 0x08
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	4c f5       	brge	.+82     	; 0x244a <Home_vOpenDoor+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <Home_vOpenDoor+0xda>
    2422:	88 ec       	ldi	r24, 0xC8	; 200
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9c 83       	std	Y+4, r25	; 0x04
    2428:	8b 83       	std	Y+3, r24	; 0x03
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <Home_vOpenDoor+0xc8>
    2432:	9c 83       	std	Y+4, r25	; 0x04
    2434:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	8d 81       	ldd	r24, Y+5	; 0x05
    2442:	9e 81       	ldd	r25, Y+6	; 0x06
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	69 f7       	brne	.-38     	; 0x2422 <Home_vOpenDoor+0xbc>
    2448:	14 c0       	rjmp	.+40     	; 0x2472 <Home_vOpenDoor+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244a:	6f 81       	ldd	r22, Y+7	; 0x07
    244c:	78 85       	ldd	r23, Y+8	; 0x08
    244e:	89 85       	ldd	r24, Y+9	; 0x09
    2450:	9a 85       	ldd	r25, Y+10	; 0x0a
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9e 83       	std	Y+6, r25	; 0x06
    245c:	8d 83       	std	Y+5, r24	; 0x05
    245e:	8d 81       	ldd	r24, Y+5	; 0x05
    2460:	9e 81       	ldd	r25, Y+6	; 0x06
    2462:	9a 83       	std	Y+2, r25	; 0x02
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <Home_vOpenDoor+0x104>
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
/* ***************************************************************************** */

void Home_vOpenDoor(void)
{
	uint16 Local_u16Index = 0;
	for(Local_u16Index=0;Local_u16Index<HOME_DOOR_SERVO_MAX_MS;Local_u16Index+=100)
    2472:	8f 85       	ldd	r24, Y+15	; 0x0f
    2474:	98 89       	ldd	r25, Y+16	; 0x10
    2476:	8c 59       	subi	r24, 0x9C	; 156
    2478:	9f 4f       	sbci	r25, 0xFF	; 255
    247a:	98 8b       	std	Y+16, r25	; 0x10
    247c:	8f 87       	std	Y+15, r24	; 0x0f
    247e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2480:	98 89       	ldd	r25, Y+16	; 0x10
    2482:	29 e0       	ldi	r18, 0x09	; 9
    2484:	84 3c       	cpi	r24, 0xC4	; 196
    2486:	92 07       	cpc	r25, r18
    2488:	08 f4       	brcc	.+2      	; 0x248c <Home_vOpenDoor+0x126>
    248a:	7c cf       	rjmp	.-264    	; 0x2384 <Home_vOpenDoor+0x1e>
	{
		PWM_xSet_TONus(Local_u16Index,HOME_DOOR_SERVO_CH);
		_delay_ms(50);
	}
}
    248c:	60 96       	adiw	r28, 0x10	; 16
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <Home_vCloseDoor>:

/* ***************************************************************************** */

void Home_vCloseDoor(void)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	60 97       	sbiw	r28, 0x10	; 16
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
	uint16 Local_u16Index = 0;
    24b2:	18 8a       	std	Y+16, r1	; 0x10
    24b4:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u16Index=HOME_DOOR_SERVO_MAX_MS;Local_u16Index>=1;Local_u16Index-=100)
    24b6:	84 ec       	ldi	r24, 0xC4	; 196
    24b8:	99 e0       	ldi	r25, 0x09	; 9
    24ba:	98 8b       	std	Y+16, r25	; 0x10
    24bc:	8f 87       	std	Y+15, r24	; 0x0f
    24be:	7d c0       	rjmp	.+250    	; 0x25ba <Home_vCloseDoor+0x11c>
	{
		PWM_xSet_TONus(Local_u16Index,HOME_DOOR_SERVO_CH);
    24c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c2:	98 89       	ldd	r25, Y+16	; 0x10
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	0e 94 03 26 	call	0x4c06	; 0x4c06 <PWM_xSet_TONus>
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	a8 e4       	ldi	r26, 0x48	; 72
    24d0:	b2 e4       	ldi	r27, 0x42	; 66
    24d2:	8b 87       	std	Y+11, r24	; 0x0b
    24d4:	9c 87       	std	Y+12, r25	; 0x0c
    24d6:	ad 87       	std	Y+13, r26	; 0x0d
    24d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24da:	6b 85       	ldd	r22, Y+11	; 0x0b
    24dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24de:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4a ef       	ldi	r20, 0xFA	; 250
    24e8:	54 e4       	ldi	r21, 0x44	; 68
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	8f 83       	std	Y+7, r24	; 0x07
    24f4:	98 87       	std	Y+8, r25	; 0x08
    24f6:	a9 87       	std	Y+9, r26	; 0x09
    24f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e8       	ldi	r20, 0x80	; 128
    2508:	5f e3       	ldi	r21, 0x3F	; 63
    250a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250e:	88 23       	and	r24, r24
    2510:	2c f4       	brge	.+10     	; 0x251c <Home_vCloseDoor+0x7e>
		__ticks = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	9e 83       	std	Y+6, r25	; 0x06
    2518:	8d 83       	std	Y+5, r24	; 0x05
    251a:	3f c0       	rjmp	.+126    	; 0x259a <Home_vCloseDoor+0xfc>
	else if (__tmp > 65535)
    251c:	6f 81       	ldd	r22, Y+7	; 0x07
    251e:	78 85       	ldd	r23, Y+8	; 0x08
    2520:	89 85       	ldd	r24, Y+9	; 0x09
    2522:	9a 85       	ldd	r25, Y+10	; 0x0a
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	3f ef       	ldi	r19, 0xFF	; 255
    2528:	4f e7       	ldi	r20, 0x7F	; 127
    252a:	57 e4       	ldi	r21, 0x47	; 71
    252c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2530:	18 16       	cp	r1, r24
    2532:	4c f5       	brge	.+82     	; 0x2586 <Home_vCloseDoor+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	6b 85       	ldd	r22, Y+11	; 0x0b
    2536:	7c 85       	ldd	r23, Y+12	; 0x0c
    2538:	8d 85       	ldd	r24, Y+13	; 0x0d
    253a:	9e 85       	ldd	r25, Y+14	; 0x0e
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e2       	ldi	r20, 0x20	; 32
    2542:	51 e4       	ldi	r21, 0x41	; 65
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
    255c:	0f c0       	rjmp	.+30     	; 0x257c <Home_vCloseDoor+0xde>
    255e:	88 ec       	ldi	r24, 0xC8	; 200
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9c 83       	std	Y+4, r25	; 0x04
    2564:	8b 83       	std	Y+3, r24	; 0x03
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	9c 81       	ldd	r25, Y+4	; 0x04
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <Home_vCloseDoor+0xcc>
    256e:	9c 83       	std	Y+4, r25	; 0x04
    2570:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	69 f7       	brne	.-38     	; 0x255e <Home_vCloseDoor+0xc0>
    2584:	14 c0       	rjmp	.+40     	; 0x25ae <Home_vCloseDoor+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2586:	6f 81       	ldd	r22, Y+7	; 0x07
    2588:	78 85       	ldd	r23, Y+8	; 0x08
    258a:	89 85       	ldd	r24, Y+9	; 0x09
    258c:	9a 85       	ldd	r25, Y+10	; 0x0a
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	9a 81       	ldd	r25, Y+2	; 0x02
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <Home_vCloseDoor+0x108>
    25aa:	9a 83       	std	Y+2, r25	; 0x02
    25ac:	89 83       	std	Y+1, r24	; 0x01
/* ***************************************************************************** */

void Home_vCloseDoor(void)
{
	uint16 Local_u16Index = 0;
	for(Local_u16Index=HOME_DOOR_SERVO_MAX_MS;Local_u16Index>=1;Local_u16Index-=100)
    25ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b0:	98 89       	ldd	r25, Y+16	; 0x10
    25b2:	84 56       	subi	r24, 0x64	; 100
    25b4:	90 40       	sbci	r25, 0x00	; 0
    25b6:	98 8b       	std	Y+16, r25	; 0x10
    25b8:	8f 87       	std	Y+15, r24	; 0x0f
    25ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    25bc:	98 89       	ldd	r25, Y+16	; 0x10
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <Home_vCloseDoor+0x126>
    25c2:	7e cf       	rjmp	.-260    	; 0x24c0 <Home_vCloseDoor+0x22>
	{
		PWM_xSet_TONus(Local_u16Index,HOME_DOOR_SERVO_CH);
		_delay_ms(50);
	}
}
    25c4:	60 96       	adiw	r28, 0x10	; 16
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <Home_vSetLight>:

/* ***************************************************************************** */

void Home_vSetLight(HomeLighState_t Copy_xLightState)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	0f 92       	push	r0
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	89 83       	std	Y+1, r24	; 0x01
	LED_xSetState(HOME_LIGHT_LED,Copy_xLightState);
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	69 81       	ldd	r22, Y+1	; 0x01
    25e6:	0e 94 4b 20 	call	0x4096	; 0x4096 <LED_xSetState>
}
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <Home_vWelcomMsg>:

/* ***************************************************************************** */

static void Home_vWelcomMsg(void)
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	6c 97       	sbiw	r28, 0x1c	; 28
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
	LCD_xGotoPosition(0,0);
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
	LCD_vSendString("Welcome, Choose option");
    260e:	8e ea       	ldi	r24, 0xAE	; 174
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	af e2       	ldi	r26, 0x2F	; 47
    261c:	b4 e4       	ldi	r27, 0x44	; 68
    261e:	89 8f       	std	Y+25, r24	; 0x19
    2620:	9a 8f       	std	Y+26, r25	; 0x1a
    2622:	ab 8f       	std	Y+27, r26	; 0x1b
    2624:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2626:	69 8d       	ldd	r22, Y+25	; 0x19
    2628:	7a 8d       	ldd	r23, Y+26	; 0x1a
    262a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a ef       	ldi	r20, 0xFA	; 250
    2634:	54 e4       	ldi	r21, 0x44	; 68
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8d 8b       	std	Y+21, r24	; 0x15
    2640:	9e 8b       	std	Y+22, r25	; 0x16
    2642:	af 8b       	std	Y+23, r26	; 0x17
    2644:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2646:	6d 89       	ldd	r22, Y+21	; 0x15
    2648:	7e 89       	ldd	r23, Y+22	; 0x16
    264a:	8f 89       	ldd	r24, Y+23	; 0x17
    264c:	98 8d       	ldd	r25, Y+24	; 0x18
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	2c f4       	brge	.+10     	; 0x2668 <Home_vWelcomMsg+0x76>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9c 8b       	std	Y+20, r25	; 0x14
    2664:	8b 8b       	std	Y+19, r24	; 0x13
    2666:	3f c0       	rjmp	.+126    	; 0x26e6 <Home_vWelcomMsg+0xf4>
	else if (__tmp > 65535)
    2668:	6d 89       	ldd	r22, Y+21	; 0x15
    266a:	7e 89       	ldd	r23, Y+22	; 0x16
    266c:	8f 89       	ldd	r24, Y+23	; 0x17
    266e:	98 8d       	ldd	r25, Y+24	; 0x18
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	3f ef       	ldi	r19, 0xFF	; 255
    2674:	4f e7       	ldi	r20, 0x7F	; 127
    2676:	57 e4       	ldi	r21, 0x47	; 71
    2678:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267c:	18 16       	cp	r1, r24
    267e:	4c f5       	brge	.+82     	; 0x26d2 <Home_vWelcomMsg+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	69 8d       	ldd	r22, Y+25	; 0x19
    2682:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2684:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2686:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9c 8b       	std	Y+20, r25	; 0x14
    26a6:	8b 8b       	std	Y+19, r24	; 0x13
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <Home_vWelcomMsg+0xd6>
    26aa:	88 ec       	ldi	r24, 0xC8	; 200
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9a 8b       	std	Y+18, r25	; 0x12
    26b0:	89 8b       	std	Y+17, r24	; 0x11
    26b2:	89 89       	ldd	r24, Y+17	; 0x11
    26b4:	9a 89       	ldd	r25, Y+18	; 0x12
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <Home_vWelcomMsg+0xc4>
    26ba:	9a 8b       	std	Y+18, r25	; 0x12
    26bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8b 89       	ldd	r24, Y+19	; 0x13
    26c0:	9c 89       	ldd	r25, Y+20	; 0x14
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9c 8b       	std	Y+20, r25	; 0x14
    26c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ca:	9c 89       	ldd	r25, Y+20	; 0x14
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <Home_vWelcomMsg+0xb8>
    26d0:	14 c0       	rjmp	.+40     	; 0x26fa <Home_vWelcomMsg+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	6d 89       	ldd	r22, Y+21	; 0x15
    26d4:	7e 89       	ldd	r23, Y+22	; 0x16
    26d6:	8f 89       	ldd	r24, Y+23	; 0x17
    26d8:	98 8d       	ldd	r25, Y+24	; 0x18
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9c 8b       	std	Y+20, r25	; 0x14
    26e4:	8b 8b       	std	Y+19, r24	; 0x13
    26e6:	8b 89       	ldd	r24, Y+19	; 0x13
    26e8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ea:	98 8b       	std	Y+16, r25	; 0x10
    26ec:	8f 87       	std	Y+15, r24	; 0x0f
    26ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f0:	98 89       	ldd	r25, Y+16	; 0x10
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <Home_vWelcomMsg+0x100>
    26f6:	98 8b       	std	Y+16, r25	; 0x10
    26f8:	8f 87       	std	Y+15, r24	; 0x0f
	HOME_DELAY_MS(700);
	LCD_xGotoPosition(0,0);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
	LCD_vSendString("1- control door");
    2702:	85 ec       	ldi	r24, 0xC5	; 197
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
	LCD_xGotoPosition(1,0);
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
	LCD_vSendString("2- toggle light");
    2712:	85 ed       	ldi	r24, 0xD5	; 213
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
	LCD_xGotoPosition(2,0);
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	60 e0       	ldi	r22, 0x00	; 0
    271e:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
	LCD_vSendString("3- Get temp ");
    2722:	85 ee       	ldi	r24, 0xE5	; 229
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
	LCD_xGotoPosition(3,0);
    272a:	83 e0       	ldi	r24, 0x03	; 3
    272c:	60 e0       	ldi	r22, 0x00	; 0
    272e:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
	LCD_vSendString("0- Exit menu ");
    2732:	82 ef       	ldi	r24, 0xF2	; 242
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	aa e7       	ldi	r26, 0x7A	; 122
    2740:	b4 e4       	ldi	r27, 0x44	; 68
    2742:	8b 87       	std	Y+11, r24	; 0x0b
    2744:	9c 87       	std	Y+12, r25	; 0x0c
    2746:	ad 87       	std	Y+13, r26	; 0x0d
    2748:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274a:	6b 85       	ldd	r22, Y+11	; 0x0b
    274c:	7c 85       	ldd	r23, Y+12	; 0x0c
    274e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2750:	9e 85       	ldd	r25, Y+14	; 0x0e
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4a ef       	ldi	r20, 0xFA	; 250
    2758:	54 e4       	ldi	r21, 0x44	; 68
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	8f 83       	std	Y+7, r24	; 0x07
    2764:	98 87       	std	Y+8, r25	; 0x08
    2766:	a9 87       	std	Y+9, r26	; 0x09
    2768:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    276a:	6f 81       	ldd	r22, Y+7	; 0x07
    276c:	78 85       	ldd	r23, Y+8	; 0x08
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	9a 85       	ldd	r25, Y+10	; 0x0a
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    277e:	88 23       	and	r24, r24
    2780:	2c f4       	brge	.+10     	; 0x278c <Home_vWelcomMsg+0x19a>
		__ticks = 1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
    278a:	3f c0       	rjmp	.+126    	; 0x280a <Home_vWelcomMsg+0x218>
	else if (__tmp > 65535)
    278c:	6f 81       	ldd	r22, Y+7	; 0x07
    278e:	78 85       	ldd	r23, Y+8	; 0x08
    2790:	89 85       	ldd	r24, Y+9	; 0x09
    2792:	9a 85       	ldd	r25, Y+10	; 0x0a
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	4c f5       	brge	.+82     	; 0x27f6 <Home_vWelcomMsg+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e2       	ldi	r20, 0x20	; 32
    27b2:	51 e4       	ldi	r21, 0x41	; 65
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	0f c0       	rjmp	.+30     	; 0x27ec <Home_vWelcomMsg+0x1fa>
    27ce:	88 ec       	ldi	r24, 0xC8	; 200
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9c 83       	std	Y+4, r25	; 0x04
    27d4:	8b 83       	std	Y+3, r24	; 0x03
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <Home_vWelcomMsg+0x1e8>
    27de:	9c 83       	std	Y+4, r25	; 0x04
    27e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	9e 83       	std	Y+6, r25	; 0x06
    27ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	8d 81       	ldd	r24, Y+5	; 0x05
    27ee:	9e 81       	ldd	r25, Y+6	; 0x06
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	69 f7       	brne	.-38     	; 0x27ce <Home_vWelcomMsg+0x1dc>
    27f4:	14 c0       	rjmp	.+40     	; 0x281e <Home_vWelcomMsg+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f6:	6f 81       	ldd	r22, Y+7	; 0x07
    27f8:	78 85       	ldd	r23, Y+8	; 0x08
    27fa:	89 85       	ldd	r24, Y+9	; 0x09
    27fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	9a 83       	std	Y+2, r25	; 0x02
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <Home_vWelcomMsg+0x224>
    281a:	9a 83       	std	Y+2, r25	; 0x02
    281c:	89 83       	std	Y+1, r24	; 0x01
	HOME_DELAY_MS(1000);
	LCD_vClear();
    281e:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
}
    2822:	6c 96       	adiw	r28, 0x1c	; 28
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <Home_xOptionHandle>:

/* ***************************************************************************** */

Flag_Status Home_xOptionHandle(void)
{
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	00 d0       	rcall	.+0      	; 0x283a <Home_xOptionHandle+0x6>
    283a:	00 d0       	rcall	.+0      	; 0x283c <Home_xOptionHandle+0x8>
    283c:	00 d0       	rcall	.+0      	; 0x283e <Home_xOptionHandle+0xa>
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
	static HomeLighState_t Local_xLedState	=	HOME_LIGHT_OFF;
	static HomeDoorState_t Local_xDoorState	=	HOME_DOOR_CLOSED;
	Flag_Status Local_xFlag					=	E_OK;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_xRecvData	=	E_NOK;
    2846:	1a 82       	std	Y+2, r1	; 0x02

	LCD_vClear();
    2848:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
	Home_vWelcomMsg();
    284c:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Home_vWelcomMsg>

	Display_vRecvChar(&Local_xRecvData);
    2850:	ce 01       	movw	r24, r28
    2852:	02 96       	adiw	r24, 0x02	; 2
    2854:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <Display_vRecvChar>


	Home_vUpdate();
    2858:	0e 94 94 14 	call	0x2928	; 0x2928 <Home_vUpdate>

	LCD_vClear();
    285c:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
	switch(Local_xRecvData)
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	3e 83       	std	Y+6, r19	; 0x06
    2868:	2d 83       	std	Y+5, r18	; 0x05
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
    286c:	9e 81       	ldd	r25, Y+6	; 0x06
    286e:	81 33       	cpi	r24, 0x31	; 49
    2870:	91 05       	cpc	r25, r1
    2872:	b9 f0       	breq	.+46     	; 0x28a2 <Home_xOptionHandle+0x6e>
    2874:	2d 81       	ldd	r18, Y+5	; 0x05
    2876:	3e 81       	ldd	r19, Y+6	; 0x06
    2878:	22 33       	cpi	r18, 0x32	; 50
    287a:	31 05       	cpc	r19, r1
    287c:	3c f4       	brge	.+14     	; 0x288c <Home_xOptionHandle+0x58>
    287e:	8d 81       	ldd	r24, Y+5	; 0x05
    2880:	9e 81       	ldd	r25, Y+6	; 0x06
    2882:	80 33       	cpi	r24, 0x30	; 48
    2884:	91 05       	cpc	r25, r1
    2886:	09 f4       	brne	.+2      	; 0x288a <Home_xOptionHandle+0x56>
    2888:	3e c0       	rjmp	.+124    	; 0x2906 <Home_xOptionHandle+0xd2>
    288a:	3f c0       	rjmp	.+126    	; 0x290a <Home_xOptionHandle+0xd6>
    288c:	2d 81       	ldd	r18, Y+5	; 0x05
    288e:	3e 81       	ldd	r19, Y+6	; 0x06
    2890:	22 33       	cpi	r18, 0x32	; 50
    2892:	31 05       	cpc	r19, r1
    2894:	11 f1       	breq	.+68     	; 0x28da <Home_xOptionHandle+0xa6>
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	83 33       	cpi	r24, 0x33	; 51
    289c:	91 05       	cpc	r25, r1
    289e:	81 f1       	breq	.+96     	; 0x2900 <Home_xOptionHandle+0xcc>
    28a0:	34 c0       	rjmp	.+104    	; 0x290a <Home_xOptionHandle+0xd6>
	{
	case HOME_DOOR_OP:
		if(HOME_DOOR_CLOSED	==	Local_xDoorState)
    28a2:	80 91 63 04 	lds	r24, 0x0463
    28a6:	88 23       	and	r24, r24
    28a8:	39 f4       	brne	.+14     	; 0x28b8 <Home_xOptionHandle+0x84>
		{
			LCD_vSendString("Opening door");
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	91 e0       	ldi	r25, 0x01	; 1
    28ae:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
			Home_vOpenDoor();
    28b2:	0e 94 b3 11 	call	0x2366	; 0x2366 <Home_vOpenDoor>
    28b6:	06 c0       	rjmp	.+12     	; 0x28c4 <Home_xOptionHandle+0x90>
		}
		else
		{
			LCD_vSendString("Closing door");
    28b8:	8d e0       	ldi	r24, 0x0D	; 13
    28ba:	91 e0       	ldi	r25, 0x01	; 1
    28bc:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
			Home_vCloseDoor();
    28c0:	0e 94 4f 12 	call	0x249e	; 0x249e <Home_vCloseDoor>
		}
		Local_xDoorState = (HOME_DOOR_CLOSED == Local_xDoorState)?HOME_DOOR_OPENED:HOME_DOOR_CLOSED;
    28c4:	80 91 63 04 	lds	r24, 0x0463
    28c8:	1c 82       	std	Y+4, r1	; 0x04
    28ca:	88 23       	and	r24, r24
    28cc:	11 f4       	brne	.+4      	; 0x28d2 <Home_xOptionHandle+0x9e>
    28ce:	91 e0       	ldi	r25, 0x01	; 1
    28d0:	9c 83       	std	Y+4, r25	; 0x04
    28d2:	2c 81       	ldd	r18, Y+4	; 0x04
    28d4:	20 93 63 04 	sts	0x0463, r18
    28d8:	1c c0       	rjmp	.+56     	; 0x2912 <Home_xOptionHandle+0xde>
		break;

	case HOME_LED_OP:
		Local_xLedState = (HOME_LIGHT_OFF == Local_xLedState)?HOME_LIGHT_ON:HOME_LIGHT_OFF;
    28da:	80 91 64 04 	lds	r24, 0x0464
    28de:	1b 82       	std	Y+3, r1	; 0x03
    28e0:	88 23       	and	r24, r24
    28e2:	11 f4       	brne	.+4      	; 0x28e8 <Home_xOptionHandle+0xb4>
    28e4:	31 e0       	ldi	r19, 0x01	; 1
    28e6:	3b 83       	std	Y+3, r19	; 0x03
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	80 93 64 04 	sts	0x0464, r24
		Home_vSetLight(Local_xLedState);
    28ee:	80 91 64 04 	lds	r24, 0x0464
    28f2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Home_vSetLight>
		LCD_vSendString("Toggling light");
    28f6:	8a e1       	ldi	r24, 0x1A	; 26
    28f8:	91 e0       	ldi	r25, 0x01	; 1
    28fa:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
    28fe:	09 c0       	rjmp	.+18     	; 0x2912 <Home_xOptionHandle+0xde>
		break;

	case HOME_TEMP_OP:
		Home_vPrintTemp();
    2900:	0e 94 f5 10 	call	0x21ea	; 0x21ea <Home_vPrintTemp>
    2904:	06 c0       	rjmp	.+12     	; 0x2912 <Home_xOptionHandle+0xde>
		break;
	case HOME_EXIT_MENU_OP:
		Local_xFlag = E_NOK;
    2906:	19 82       	std	Y+1, r1	; 0x01
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <Home_xOptionHandle+0xde>
		break;
	default:
		LCD_vSendString("Wrong choice");
    290a:	89 e2       	ldi	r24, 0x29	; 41
    290c:	91 e0       	ldi	r25, 0x01	; 1
    290e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
		break;
	}
	Local_xRecvData = 0;
    2912:	1a 82       	std	Y+2, r1	; 0x02
	return Local_xFlag;
    2914:	89 81       	ldd	r24, Y+1	; 0x01
}
    2916:	26 96       	adiw	r28, 0x06	; 6
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <Home_vUpdate>:

/* ***************************************************************************** */

void Home_vUpdate(void)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
	LDR_vUpdate();
    2930:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <LDR_vUpdate>

	if(LDR_u16GetVal() < HOME_LIGHT_MIN_INTENSITY)
    2934:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <LDR_u16GetVal>
    2938:	22 e0       	ldi	r18, 0x02	; 2
    293a:	8c 3b       	cpi	r24, 0xBC	; 188
    293c:	92 07       	cpc	r25, r18
    293e:	28 f4       	brcc	.+10     	; 0x294a <Home_vUpdate+0x22>
	{
		LED_xSetState(HOME_LIGHT_LDR_SENSOR_LED,LED_ON);
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	0e 94 4b 20 	call	0x4096	; 0x4096 <LED_xSetState>
    2948:	04 c0       	rjmp	.+8      	; 0x2952 <Home_vUpdate+0x2a>
	}
	else
	{
		LED_xSetState(HOME_LIGHT_LDR_SENSOR_LED,LED_OFF);
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	0e 94 4b 20 	call	0x4096	; 0x4096 <LED_xSetState>
	}
}
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <Keypad_vInit>:
/* ***************************************************************************** */
static uint8 Keypad_keys2D[KEYPAD_MATRX_ROWS_N][KEYPAD_MATRX_COLS_N] = KEYPAD_KEYS_2D;
/* ***************************************************************************** */

void Keypad_vInit(void)
{
    2958:	df 93       	push	r29
    295a:	cf 93       	push	r28
    295c:	00 d0       	rcall	.+0      	; 0x295e <Keypad_vInit+0x6>
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8ColIndex = 0;
    2962:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8RowIndex = 0;
    2964:	19 82       	std	Y+1, r1	; 0x01

	/* Initialize the row pins as output */
	for(Local_u8ColIndex=0;Local_u8ColIndex<KEYPAD_MATRX_COLS_N;Local_u8ColIndex++)
    2966:	1a 82       	std	Y+2, r1	; 0x02
    2968:	1a c0       	rjmp	.+52     	; 0x299e <Keypad_vInit+0x46>
	{
		GPIO_vInitPortPin(KeypadCols_Map[Local_u8ColIndex].Keypad_xPort,KeypadCols_Map[Local_u8ColIndex].Keypad_xPin,GPIO_OUT);
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	88 2f       	mov	r24, r24
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	fc 01       	movw	r30, r24
    2976:	ea 5b       	subi	r30, 0xBA	; 186
    2978:	fd 4f       	sbci	r31, 0xFD	; 253
    297a:	20 81       	ld	r18, Z
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	88 2f       	mov	r24, r24
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	fc 01       	movw	r30, r24
    2988:	e9 5b       	subi	r30, 0xB9	; 185
    298a:	fd 4f       	sbci	r31, 0xFD	; 253
    298c:	90 81       	ld	r25, Z
    298e:	82 2f       	mov	r24, r18
    2990:	69 2f       	mov	r22, r25
    2992:	41 e0       	ldi	r20, 0x01	; 1
    2994:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
{
	uint8 Local_u8ColIndex = 0;
	uint8 Local_u8RowIndex = 0;

	/* Initialize the row pins as output */
	for(Local_u8ColIndex=0;Local_u8ColIndex<KEYPAD_MATRX_COLS_N;Local_u8ColIndex++)
    2998:	8a 81       	ldd	r24, Y+2	; 0x02
    299a:	8f 5f       	subi	r24, 0xFF	; 255
    299c:	8a 83       	std	Y+2, r24	; 0x02
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	84 30       	cpi	r24, 0x04	; 4
    29a2:	18 f3       	brcs	.-58     	; 0x296a <Keypad_vInit+0x12>
	{
		GPIO_vInitPortPin(KeypadCols_Map[Local_u8ColIndex].Keypad_xPort,KeypadCols_Map[Local_u8ColIndex].Keypad_xPin,GPIO_OUT);
	}

	/* Initialize the row pins as input */
	for(Local_u8RowIndex=0;Local_u8RowIndex<KEYPAD_MATRX_ROWS_N;Local_u8RowIndex++)
    29a4:	19 82       	std	Y+1, r1	; 0x01
    29a6:	31 c0       	rjmp	.+98     	; 0x2a0a <Keypad_vInit+0xb2>
	{
		GPIO_vInitPortPin(KeypadRows_Map[Local_u8RowIndex].Keypad_xPort,KeypadRows_Map[Local_u8RowIndex].Keypad_xPin,GPIO_IN);
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	88 2f       	mov	r24, r24
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	fc 01       	movw	r30, r24
    29b4:	e2 5c       	subi	r30, 0xC2	; 194
    29b6:	fd 4f       	sbci	r31, 0xFD	; 253
    29b8:	20 81       	ld	r18, Z
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	88 2f       	mov	r24, r24
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	fc 01       	movw	r30, r24
    29c6:	e1 5c       	subi	r30, 0xC1	; 193
    29c8:	fd 4f       	sbci	r31, 0xFD	; 253
    29ca:	90 81       	ld	r25, Z
    29cc:	82 2f       	mov	r24, r18
    29ce:	69 2f       	mov	r22, r25
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
		GPIO_vWritePortPin(KeypadRows_Map[Local_u8RowIndex].Keypad_xPort,KeypadRows_Map[Local_u8RowIndex].Keypad_xPin,GPIO_HIGH);
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	fc 01       	movw	r30, r24
    29e2:	e2 5c       	subi	r30, 0xC2	; 194
    29e4:	fd 4f       	sbci	r31, 0xFD	; 253
    29e6:	20 81       	ld	r18, Z
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	88 2f       	mov	r24, r24
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	fc 01       	movw	r30, r24
    29f4:	e1 5c       	subi	r30, 0xC1	; 193
    29f6:	fd 4f       	sbci	r31, 0xFD	; 253
    29f8:	90 81       	ld	r25, Z
    29fa:	82 2f       	mov	r24, r18
    29fc:	69 2f       	mov	r22, r25
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
	{
		GPIO_vInitPortPin(KeypadCols_Map[Local_u8ColIndex].Keypad_xPort,KeypadCols_Map[Local_u8ColIndex].Keypad_xPin,GPIO_OUT);
	}

	/* Initialize the row pins as input */
	for(Local_u8RowIndex=0;Local_u8RowIndex<KEYPAD_MATRX_ROWS_N;Local_u8RowIndex++)
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	8f 5f       	subi	r24, 0xFF	; 255
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	84 30       	cpi	r24, 0x04	; 4
    2a0e:	60 f2       	brcs	.-104    	; 0x29a8 <Keypad_vInit+0x50>
	{
		GPIO_vInitPortPin(KeypadRows_Map[Local_u8RowIndex].Keypad_xPort,KeypadRows_Map[Local_u8RowIndex].Keypad_xPin,GPIO_IN);
		GPIO_vWritePortPin(KeypadRows_Map[Local_u8RowIndex].Keypad_xPort,KeypadRows_Map[Local_u8RowIndex].Keypad_xPin,GPIO_HIGH);
	}

}
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <Keypad_xScan>:

/* ***************************************************************************** */

uint8 Keypad_xScan(void)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <Keypad_xScan+0x6>
    2a20:	0f 92       	push	r0
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8ColIndex = 0;
    2a26:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8RowIndex = 0;
    2a28:	19 82       	std	Y+1, r1	; 0x01

	for(Local_u8ColIndex=0;Local_u8ColIndex<KEYPAD_MATRX_COLS_N;Local_u8ColIndex++)
    2a2a:	1a 82       	std	Y+2, r1	; 0x02
    2a2c:	7d c0       	rjmp	.+250    	; 0x2b28 <Keypad_xScan+0x10e>
	{
		GPIO_vWritePortPin(KeypadCols_Map[Local_u8ColIndex].Keypad_xPort,KeypadCols_Map[Local_u8ColIndex].Keypad_xPin,GPIO_LOW);
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	88 2f       	mov	r24, r24
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	88 0f       	add	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	fc 01       	movw	r30, r24
    2a3a:	ea 5b       	subi	r30, 0xBA	; 186
    2a3c:	fd 4f       	sbci	r31, 0xFD	; 253
    2a3e:	20 81       	ld	r18, Z
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	88 2f       	mov	r24, r24
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	88 0f       	add	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	e9 5b       	subi	r30, 0xB9	; 185
    2a4e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a50:	90 81       	ld	r25, Z
    2a52:	82 2f       	mov	r24, r18
    2a54:	69 2f       	mov	r22, r25
    2a56:	40 e0       	ldi	r20, 0x00	; 0
    2a58:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		for(Local_u8RowIndex=0;Local_u8RowIndex<KEYPAD_MATRX_ROWS_N;Local_u8RowIndex++)
    2a5c:	19 82       	std	Y+1, r1	; 0x01
    2a5e:	46 c0       	rjmp	.+140    	; 0x2aec <Keypad_xScan+0xd2>
		{

			if(GPIO_xReadPortPin(KeypadRows_Map[Local_u8RowIndex].Keypad_xPort,KeypadRows_Map[Local_u8RowIndex].Keypad_xPin) == GPIO_LOW)
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	88 2f       	mov	r24, r24
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	e2 5c       	subi	r30, 0xC2	; 194
    2a6e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a70:	20 81       	ld	r18, Z
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	88 2f       	mov	r24, r24
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	e1 5c       	subi	r30, 0xC1	; 193
    2a80:	fd 4f       	sbci	r31, 0xFD	; 253
    2a82:	90 81       	ld	r25, Z
    2a84:	82 2f       	mov	r24, r18
    2a86:	69 2f       	mov	r22, r25
    2a88:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    2a8c:	88 23       	and	r24, r24
    2a8e:	59 f5       	brne	.+86     	; 0x2ae6 <Keypad_xScan+0xcc>
			{
				while(GPIO_xReadPortPin(KeypadRows_Map[Local_u8RowIndex].Keypad_xPort,KeypadRows_Map[Local_u8RowIndex].Keypad_xPin) == GPIO_LOW);
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	88 2f       	mov	r24, r24
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	e2 5c       	subi	r30, 0xC2	; 194
    2a9e:	fd 4f       	sbci	r31, 0xFD	; 253
    2aa0:	20 81       	ld	r18, Z
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	88 0f       	add	r24, r24
    2aaa:	99 1f       	adc	r25, r25
    2aac:	fc 01       	movw	r30, r24
    2aae:	e1 5c       	subi	r30, 0xC1	; 193
    2ab0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab2:	90 81       	ld	r25, Z
    2ab4:	82 2f       	mov	r24, r18
    2ab6:	69 2f       	mov	r22, r25
    2ab8:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    2abc:	88 23       	and	r24, r24
    2abe:	41 f3       	breq	.-48     	; 0x2a90 <Keypad_xScan+0x76>
				return (Keypad_keys2D[Local_u8ColIndex][Local_u8RowIndex]);
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	ca 01       	movw	r24, r20
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	82 0f       	add	r24, r18
    2ad8:	93 1f       	adc	r25, r19
    2ada:	fc 01       	movw	r30, r24
    2adc:	e2 5b       	subi	r30, 0xB2	; 178
    2ade:	fd 4f       	sbci	r31, 0xFD	; 253
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8b 83       	std	Y+3, r24	; 0x03
    2ae4:	26 c0       	rjmp	.+76     	; 0x2b32 <Keypad_xScan+0x118>
	uint8 Local_u8RowIndex = 0;

	for(Local_u8ColIndex=0;Local_u8ColIndex<KEYPAD_MATRX_COLS_N;Local_u8ColIndex++)
	{
		GPIO_vWritePortPin(KeypadCols_Map[Local_u8ColIndex].Keypad_xPort,KeypadCols_Map[Local_u8ColIndex].Keypad_xPin,GPIO_LOW);
		for(Local_u8RowIndex=0;Local_u8RowIndex<KEYPAD_MATRX_ROWS_N;Local_u8RowIndex++)
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	8f 5f       	subi	r24, 0xFF	; 255
    2aea:	89 83       	std	Y+1, r24	; 0x01
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	84 30       	cpi	r24, 0x04	; 4
    2af0:	08 f4       	brcc	.+2      	; 0x2af4 <Keypad_xScan+0xda>
    2af2:	b6 cf       	rjmp	.-148    	; 0x2a60 <Keypad_xScan+0x46>
				while(GPIO_xReadPortPin(KeypadRows_Map[Local_u8RowIndex].Keypad_xPort,KeypadRows_Map[Local_u8RowIndex].Keypad_xPin) == GPIO_LOW);
				return (Keypad_keys2D[Local_u8ColIndex][Local_u8RowIndex]);
				return E_OK;
			}
		}
		GPIO_vWritePortPin(KeypadCols_Map[Local_u8ColIndex].Keypad_xPort,KeypadCols_Map[Local_u8ColIndex].Keypad_xPin,GPIO_HIGH);
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	fc 01       	movw	r30, r24
    2b00:	ea 5b       	subi	r30, 0xBA	; 186
    2b02:	fd 4f       	sbci	r31, 0xFD	; 253
    2b04:	20 81       	ld	r18, Z
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	88 2f       	mov	r24, r24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	fc 01       	movw	r30, r24
    2b12:	e9 5b       	subi	r30, 0xB9	; 185
    2b14:	fd 4f       	sbci	r31, 0xFD	; 253
    2b16:	90 81       	ld	r25, Z
    2b18:	82 2f       	mov	r24, r18
    2b1a:	69 2f       	mov	r22, r25
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
uint8 Keypad_xScan(void)
{
	uint8 Local_u8ColIndex = 0;
	uint8 Local_u8RowIndex = 0;

	for(Local_u8ColIndex=0;Local_u8ColIndex<KEYPAD_MATRX_COLS_N;Local_u8ColIndex++)
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	8f 5f       	subi	r24, 0xFF	; 255
    2b26:	8a 83       	std	Y+2, r24	; 0x02
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	84 30       	cpi	r24, 0x04	; 4
    2b2c:	08 f4       	brcc	.+2      	; 0x2b30 <Keypad_xScan+0x116>
    2b2e:	7f cf       	rjmp	.-258    	; 0x2a2e <Keypad_xScan+0x14>
				return E_OK;
			}
		}
		GPIO_vWritePortPin(KeypadCols_Map[Local_u8ColIndex].Keypad_xPort,KeypadCols_Map[Local_u8ColIndex].Keypad_xPin,GPIO_HIGH);
	}
	return E_NOK;
    2b30:	1b 82       	std	Y+3, r1	; 0x03
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <Keypad_xReadPressedBuf>:

/* ***************************************************************************** */

Error_Status Keypad_xReadPressedBuf(uint8* u8Recv_Data)
{
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	00 d0       	rcall	.+0      	; 0x2b46 <Keypad_xReadPressedBuf+0x6>
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <Keypad_xReadPressedBuf+0x8>
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    2b4c:	9b 83       	std	Y+3, r25	; 0x03
    2b4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Data = 0;
    2b50:	19 82       	std	Y+1, r1	; 0x01
	if(Queue_DeQueue(&Local_u8Data) == E_NOK)
    2b52:	ce 01       	movw	r24, r28
    2b54:	01 96       	adiw	r24, 0x01	; 1
    2b56:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <Queue_DeQueue>
    2b5a:	88 23       	and	r24, r24
    2b5c:	11 f4       	brne	.+4      	; 0x2b62 <Keypad_xReadPressedBuf+0x22>
	{
		return E_NOK;
    2b5e:	1c 82       	std	Y+4, r1	; 0x04
    2b60:	06 c0       	rjmp	.+12     	; 0x2b6e <Keypad_xReadPressedBuf+0x2e>
	}
	*u8Recv_Data = Local_u8Data;
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	ea 81       	ldd	r30, Y+2	; 0x02
    2b66:	fb 81       	ldd	r31, Y+3	; 0x03
    2b68:	80 83       	st	Z, r24
	return E_OK;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	8c 83       	std	Y+4, r24	; 0x04
    2b6e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <Keypad_Update>:

/* ***************************************************************************** */

void Keypad_Update(void)
{
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
	/* Application */
}
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <LCDAnimation_VUpDown>:
#include "LCD_config.h"
#include "LCDAnimation_interface.h"
#include "LCDAnimation_config.h"

void LCDAnimation_VUpDown(uint8 *Copy_u8String)
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	e5 97       	sbiw	r28, 0x35	; 53
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	de bf       	out	0x3e, r29	; 62
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	cd bf       	out	0x3d, r28	; 61
    2ba0:	9d ab       	std	Y+53, r25	; 0x35
    2ba2:	8c ab       	std	Y+52, r24	; 0x34
	uint8 Local_u8LinePosition		=	0;
    2ba4:	1f 8e       	std	Y+31, r1	; 0x1f
	static sint8 Local_s8Index		=	0;
	uint8 Local_u8BufIndex			=	0;
    2ba6:	1e 8e       	std	Y+30, r1	; 0x1e
	static Flag_Status Local_xReverseFlag	=	E_NOK;
	uint8 u8Buffer[20];

	strcpy((char*)u8Buffer,(char*)Copy_u8String);
    2ba8:	ce 01       	movw	r24, r28
    2baa:	80 96       	adiw	r24, 0x20	; 32
    2bac:	2c a9       	ldd	r18, Y+52	; 0x34
    2bae:	3d a9       	ldd	r19, Y+53	; 0x35
    2bb0:	b9 01       	movw	r22, r18
    2bb2:	0e 94 11 2c 	call	0x5822	; 0x5822 <strcpy>
	uint8 Local_u8StrLength			= strlen((char*)u8Buffer);
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	80 96       	adiw	r24, 0x20	; 32
    2bba:	0e 94 18 2c 	call	0x5830	; 0x5830 <strlen>
    2bbe:	8d 8f       	std	Y+29, r24	; 0x1d
	if(E_OK == Local_xReverseFlag)
    2bc0:	80 91 65 04 	lds	r24, 0x0465
    2bc4:	81 30       	cpi	r24, 0x01	; 1
    2bc6:	21 f4       	brne	.+8      	; 0x2bd0 <LCDAnimation_VUpDown+0x44>
	{
		Local_s8Index = LCD_N_COLS-1;
    2bc8:	8f e0       	ldi	r24, 0x0F	; 15
    2bca:	80 93 66 04 	sts	0x0466, r24
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <LCDAnimation_VUpDown+0x48>
	}
	else
	{
		Local_s8Index = 0;
    2bd0:	10 92 66 04 	sts	0x0466, r1
	}
	LCD_vClear();
    2bd4:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
	if(E_NOK == Local_xReverseFlag)
    2bd8:	80 91 65 04 	lds	r24, 0x0465
    2bdc:	88 23       	and	r24, r24
    2bde:	09 f0       	breq	.+2      	; 0x2be2 <LCDAnimation_VUpDown+0x56>
    2be0:	9e c0       	rjmp	.+316    	; 0x2d1e <LCDAnimation_VUpDown+0x192>
    2be2:	97 c0       	rjmp	.+302    	; 0x2d12 <LCDAnimation_VUpDown+0x186>
	{
		while(Local_s8Index < LCD_N_COLS)
		{
			LCD_xGotoPosition(Local_u8LinePosition,Local_s8Index);
    2be4:	80 91 66 04 	lds	r24, 0x0466
    2be8:	98 2f       	mov	r25, r24
    2bea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bec:	69 2f       	mov	r22, r25
    2bee:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
			LCD_xSendByte(u8Buffer[Local_u8BufIndex]);
    2bf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	80 96       	adiw	r24, 0x20	; 32
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	e2 0f       	add	r30, r18
    2c00:	f3 1f       	adc	r31, r19
    2c02:	80 81       	ld	r24, Z
    2c04:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <LCD_xSendByte>
			Local_u8BufIndex++;
    2c08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c0a:	8f 5f       	subi	r24, 0xFF	; 255
    2c0c:	8e 8f       	std	Y+30, r24	; 0x1e
			if(Local_u8BufIndex > Local_u8StrLength)
    2c0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c12:	89 17       	cp	r24, r25
    2c14:	18 f4       	brcc	.+6      	; 0x2c1c <LCDAnimation_VUpDown+0x90>
			{
				Local_u8BufIndex = 0;
    2c16:	1e 8e       	std	Y+30, r1	; 0x1e
				LCD_vClear();
    2c18:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
			}

			Local_s8Index++;
    2c1c:	80 91 66 04 	lds	r24, 0x0466
    2c20:	8f 5f       	subi	r24, 0xFF	; 255
    2c22:	80 93 66 04 	sts	0x0466, r24
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a8 e4       	ldi	r26, 0x48	; 72
    2c2c:	b3 e4       	ldi	r27, 0x43	; 67
    2c2e:	89 8f       	std	Y+25, r24	; 0x19
    2c30:	9a 8f       	std	Y+26, r25	; 0x1a
    2c32:	ab 8f       	std	Y+27, r26	; 0x1b
    2c34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c36:	69 8d       	ldd	r22, Y+25	; 0x19
    2c38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	4a ef       	ldi	r20, 0xFA	; 250
    2c44:	54 e4       	ldi	r21, 0x44	; 68
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	8d 8b       	std	Y+21, r24	; 0x15
    2c50:	9e 8b       	std	Y+22, r25	; 0x16
    2c52:	af 8b       	std	Y+23, r26	; 0x17
    2c54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c56:	6d 89       	ldd	r22, Y+21	; 0x15
    2c58:	7e 89       	ldd	r23, Y+22	; 0x16
    2c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e8       	ldi	r20, 0x80	; 128
    2c64:	5f e3       	ldi	r21, 0x3F	; 63
    2c66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c6a:	88 23       	and	r24, r24
    2c6c:	2c f4       	brge	.+10     	; 0x2c78 <LCDAnimation_VUpDown+0xec>
		__ticks = 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 8b       	std	Y+20, r25	; 0x14
    2c74:	8b 8b       	std	Y+19, r24	; 0x13
    2c76:	3f c0       	rjmp	.+126    	; 0x2cf6 <LCDAnimation_VUpDown+0x16a>
	else if (__tmp > 65535)
    2c78:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	3f ef       	ldi	r19, 0xFF	; 255
    2c84:	4f e7       	ldi	r20, 0x7F	; 127
    2c86:	57 e4       	ldi	r21, 0x47	; 71
    2c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c8c:	18 16       	cp	r1, r24
    2c8e:	4c f5       	brge	.+82     	; 0x2ce2 <LCDAnimation_VUpDown+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c90:	69 8d       	ldd	r22, Y+25	; 0x19
    2c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e2       	ldi	r20, 0x20	; 32
    2c9e:	51 e4       	ldi	r21, 0x41	; 65
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	9c 8b       	std	Y+20, r25	; 0x14
    2cb6:	8b 8b       	std	Y+19, r24	; 0x13
    2cb8:	0f c0       	rjmp	.+30     	; 0x2cd8 <LCDAnimation_VUpDown+0x14c>
    2cba:	88 ec       	ldi	r24, 0xC8	; 200
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	9a 8b       	std	Y+18, r25	; 0x12
    2cc0:	89 8b       	std	Y+17, r24	; 0x11
    2cc2:	89 89       	ldd	r24, Y+17	; 0x11
    2cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <LCDAnimation_VUpDown+0x13a>
    2cca:	9a 8b       	std	Y+18, r25	; 0x12
    2ccc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cce:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	9c 8b       	std	Y+20, r25	; 0x14
    2cd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cda:	9c 89       	ldd	r25, Y+20	; 0x14
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	69 f7       	brne	.-38     	; 0x2cba <LCDAnimation_VUpDown+0x12e>
    2ce0:	14 c0       	rjmp	.+40     	; 0x2d0a <LCDAnimation_VUpDown+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9c 8b       	std	Y+20, r25	; 0x14
    2cf4:	8b 8b       	std	Y+19, r24	; 0x13
    2cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfa:	98 8b       	std	Y+16, r25	; 0x10
    2cfc:	8f 87       	std	Y+15, r24	; 0x0f
    2cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d00:	98 89       	ldd	r25, Y+16	; 0x10
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <LCDAnimation_VUpDown+0x176>
    2d06:	98 8b       	std	Y+16, r25	; 0x10
    2d08:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_DELAY_MS(LCDANIMATION_UPDOWN_T_MS);
			TOG_BIT(Local_u8LinePosition,0);
    2d0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d0c:	91 e0       	ldi	r25, 0x01	; 1
    2d0e:	89 27       	eor	r24, r25
    2d10:	8f 8f       	std	Y+31, r24	; 0x1f
		Local_s8Index = 0;
	}
	LCD_vClear();
	if(E_NOK == Local_xReverseFlag)
	{
		while(Local_s8Index < LCD_N_COLS)
    2d12:	80 91 66 04 	lds	r24, 0x0466
    2d16:	80 31       	cpi	r24, 0x10	; 16
    2d18:	0c f4       	brge	.+2      	; 0x2d1c <LCDAnimation_VUpDown+0x190>
    2d1a:	64 cf       	rjmp	.-312    	; 0x2be4 <LCDAnimation_VUpDown+0x58>
    2d1c:	a2 c0       	rjmp	.+324    	; 0x2e62 <LCDAnimation_VUpDown+0x2d6>
			TOG_BIT(Local_u8LinePosition,0);
		}
	}
	else
	{
		Local_s8Index--;
    2d1e:	80 91 66 04 	lds	r24, 0x0466
    2d22:	81 50       	subi	r24, 0x01	; 1
    2d24:	80 93 66 04 	sts	0x0466, r24
    2d28:	97 c0       	rjmp	.+302    	; 0x2e58 <LCDAnimation_VUpDown+0x2cc>

		while(Local_s8Index >= 0)
		{
			LCD_xGotoPosition(Local_u8LinePosition,Local_s8Index);
    2d2a:	80 91 66 04 	lds	r24, 0x0466
    2d2e:	98 2f       	mov	r25, r24
    2d30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d32:	69 2f       	mov	r22, r25
    2d34:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
			LCD_xSendByte(u8Buffer[Local_u8BufIndex]);
    2d38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	ce 01       	movw	r24, r28
    2d40:	80 96       	adiw	r24, 0x20	; 32
    2d42:	fc 01       	movw	r30, r24
    2d44:	e2 0f       	add	r30, r18
    2d46:	f3 1f       	adc	r31, r19
    2d48:	80 81       	ld	r24, Z
    2d4a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <LCD_xSendByte>
			Local_u8BufIndex++;
    2d4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d50:	8f 5f       	subi	r24, 0xFF	; 255
    2d52:	8e 8f       	std	Y+30, r24	; 0x1e
			if(Local_u8BufIndex > Local_u8StrLength)
    2d54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d58:	89 17       	cp	r24, r25
    2d5a:	18 f4       	brcc	.+6      	; 0x2d62 <LCDAnimation_VUpDown+0x1d6>
			{
				Local_u8BufIndex = 0;
    2d5c:	1e 8e       	std	Y+30, r1	; 0x1e
				LCD_vClear();
    2d5e:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
			}

			Local_s8Index--;
    2d62:	80 91 66 04 	lds	r24, 0x0466
    2d66:	81 50       	subi	r24, 0x01	; 1
    2d68:	80 93 66 04 	sts	0x0466, r24
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	a8 e4       	ldi	r26, 0x48	; 72
    2d72:	b3 e4       	ldi	r27, 0x43	; 67
    2d74:	8b 87       	std	Y+11, r24	; 0x0b
    2d76:	9c 87       	std	Y+12, r25	; 0x0c
    2d78:	ad 87       	std	Y+13, r26	; 0x0d
    2d7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	4a ef       	ldi	r20, 0xFA	; 250
    2d8a:	54 e4       	ldi	r21, 0x44	; 68
    2d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	8f 83       	std	Y+7, r24	; 0x07
    2d96:	98 87       	std	Y+8, r25	; 0x08
    2d98:	a9 87       	std	Y+9, r26	; 0x09
    2d9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9e:	78 85       	ldd	r23, Y+8	; 0x08
    2da0:	89 85       	ldd	r24, Y+9	; 0x09
    2da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e8       	ldi	r20, 0x80	; 128
    2daa:	5f e3       	ldi	r21, 0x3F	; 63
    2dac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2db0:	88 23       	and	r24, r24
    2db2:	2c f4       	brge	.+10     	; 0x2dbe <LCDAnimation_VUpDown+0x232>
		__ticks = 1;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	9e 83       	std	Y+6, r25	; 0x06
    2dba:	8d 83       	std	Y+5, r24	; 0x05
    2dbc:	3f c0       	rjmp	.+126    	; 0x2e3c <LCDAnimation_VUpDown+0x2b0>
	else if (__tmp > 65535)
    2dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc0:	78 85       	ldd	r23, Y+8	; 0x08
    2dc2:	89 85       	ldd	r24, Y+9	; 0x09
    2dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	3f ef       	ldi	r19, 0xFF	; 255
    2dca:	4f e7       	ldi	r20, 0x7F	; 127
    2dcc:	57 e4       	ldi	r21, 0x47	; 71
    2dce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dd2:	18 16       	cp	r1, r24
    2dd4:	4c f5       	brge	.+82     	; 0x2e28 <LCDAnimation_VUpDown+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e2       	ldi	r20, 0x20	; 32
    2de4:	51 e4       	ldi	r21, 0x41	; 65
    2de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	bc 01       	movw	r22, r24
    2df0:	cd 01       	movw	r24, r26
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9e 83       	std	Y+6, r25	; 0x06
    2dfc:	8d 83       	std	Y+5, r24	; 0x05
    2dfe:	0f c0       	rjmp	.+30     	; 0x2e1e <LCDAnimation_VUpDown+0x292>
    2e00:	88 ec       	ldi	r24, 0xC8	; 200
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	9c 83       	std	Y+4, r25	; 0x04
    2e06:	8b 83       	std	Y+3, r24	; 0x03
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <LCDAnimation_VUpDown+0x280>
    2e10:	9c 83       	std	Y+4, r25	; 0x04
    2e12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e14:	8d 81       	ldd	r24, Y+5	; 0x05
    2e16:	9e 81       	ldd	r25, Y+6	; 0x06
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	9e 83       	std	Y+6, r25	; 0x06
    2e1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	9e 81       	ldd	r25, Y+6	; 0x06
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	69 f7       	brne	.-38     	; 0x2e00 <LCDAnimation_VUpDown+0x274>
    2e26:	14 c0       	rjmp	.+40     	; 0x2e50 <LCDAnimation_VUpDown+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e28:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2a:	78 85       	ldd	r23, Y+8	; 0x08
    2e2c:	89 85       	ldd	r24, Y+9	; 0x09
    2e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9e 83       	std	Y+6, r25	; 0x06
    2e3a:	8d 83       	std	Y+5, r24	; 0x05
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e40:	9a 83       	std	Y+2, r25	; 0x02
    2e42:	89 83       	std	Y+1, r24	; 0x01
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	9a 81       	ldd	r25, Y+2	; 0x02
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <LCDAnimation_VUpDown+0x2bc>
    2e4c:	9a 83       	std	Y+2, r25	; 0x02
    2e4e:	89 83       	std	Y+1, r24	; 0x01
			LCD_DELAY_MS(LCDANIMATION_UPDOWN_T_MS);
			TOG_BIT(Local_u8LinePosition,0);
    2e50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e52:	91 e0       	ldi	r25, 0x01	; 1
    2e54:	89 27       	eor	r24, r25
    2e56:	8f 8f       	std	Y+31, r24	; 0x1f
	}
	else
	{
		Local_s8Index--;

		while(Local_s8Index >= 0)
    2e58:	80 91 66 04 	lds	r24, 0x0466
    2e5c:	88 23       	and	r24, r24
    2e5e:	0c f0       	brlt	.+2      	; 0x2e62 <LCDAnimation_VUpDown+0x2d6>
    2e60:	64 cf       	rjmp	.-312    	; 0x2d2a <LCDAnimation_VUpDown+0x19e>
			Local_s8Index--;
			LCD_DELAY_MS(LCDANIMATION_UPDOWN_T_MS);
			TOG_BIT(Local_u8LinePosition,0);
		}
	}
	TOG_BIT(Local_xReverseFlag,0) ;
    2e62:	80 91 65 04 	lds	r24, 0x0465
    2e66:	91 e0       	ldi	r25, 0x01	; 1
    2e68:	89 27       	eor	r24, r25
    2e6a:	80 93 65 04 	sts	0x0465, r24
}
    2e6e:	e5 96       	adiw	r28, 0x35	; 53
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <LCDAnimation_vMove>:

void LCDAnimation_vMove(uint8 *Copy_pu8String)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	6f 97       	sbiw	r28, 0x1f	; 31
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	9f 8f       	std	Y+31, r25	; 0x1f
    2e96:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 Local_u8LinePosition		=	0;
    2e98:	1d 8e       	std	Y+29, r1	; 0x1d
	static sint8 Local_s8Index		=	0;
	static Flag_Status Local_xReverseFlag	=	E_NOK;

	if(E_OK == Local_xReverseFlag)
    2e9a:	80 91 67 04 	lds	r24, 0x0467
    2e9e:	81 30       	cpi	r24, 0x01	; 1
    2ea0:	21 f4       	brne	.+8      	; 0x2eaa <LCDAnimation_vMove+0x2a>
	{
		Local_s8Index = LCD_N_COLS-1;
    2ea2:	8f e0       	ldi	r24, 0x0F	; 15
    2ea4:	80 93 68 04 	sts	0x0468, r24
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <LCDAnimation_vMove+0x2e>
	}
	else
	{
		Local_s8Index = 0;
    2eaa:	10 92 68 04 	sts	0x0468, r1
	}
	LCD_vClear();
    2eae:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
	if(E_NOK == Local_xReverseFlag)
    2eb2:	80 91 67 04 	lds	r24, 0x0467
    2eb6:	88 23       	and	r24, r24
    2eb8:	09 f0       	breq	.+2      	; 0x2ebc <LCDAnimation_vMove+0x3c>
    2eba:	8f c0       	rjmp	.+286    	; 0x2fda <LCDAnimation_vMove+0x15a>
    2ebc:	88 c0       	rjmp	.+272    	; 0x2fce <LCDAnimation_vMove+0x14e>
	{
		while(Local_s8Index < LCD_N_COLS)
		{
			LCD_vClear();
    2ebe:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
			LCD_xGotoPosition(Local_u8LinePosition,Local_s8Index);
    2ec2:	80 91 68 04 	lds	r24, 0x0468
    2ec6:	98 2f       	mov	r25, r24
    2ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eca:	69 2f       	mov	r22, r25
    2ecc:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
			LCD_vSendString(Copy_pu8String);
    2ed0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ed2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ed4:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
			Local_s8Index++;
    2ed8:	80 91 68 04 	lds	r24, 0x0468
    2edc:	8f 5f       	subi	r24, 0xFF	; 255
    2ede:	80 93 68 04 	sts	0x0468, r24
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	a0 ea       	ldi	r26, 0xA0	; 160
    2ee8:	b1 e4       	ldi	r27, 0x41	; 65
    2eea:	89 8f       	std	Y+25, r24	; 0x19
    2eec:	9a 8f       	std	Y+26, r25	; 0x1a
    2eee:	ab 8f       	std	Y+27, r26	; 0x1b
    2ef0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ef4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ef6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ef8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a ef       	ldi	r20, 0xFA	; 250
    2f00:	54 e4       	ldi	r21, 0x44	; 68
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	8d 8b       	std	Y+21, r24	; 0x15
    2f0c:	9e 8b       	std	Y+22, r25	; 0x16
    2f0e:	af 8b       	std	Y+23, r26	; 0x17
    2f10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f12:	6d 89       	ldd	r22, Y+21	; 0x15
    2f14:	7e 89       	ldd	r23, Y+22	; 0x16
    2f16:	8f 89       	ldd	r24, Y+23	; 0x17
    2f18:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e8       	ldi	r20, 0x80	; 128
    2f20:	5f e3       	ldi	r21, 0x3F	; 63
    2f22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f26:	88 23       	and	r24, r24
    2f28:	2c f4       	brge	.+10     	; 0x2f34 <LCDAnimation_vMove+0xb4>
		__ticks = 1;
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	9c 8b       	std	Y+20, r25	; 0x14
    2f30:	8b 8b       	std	Y+19, r24	; 0x13
    2f32:	3f c0       	rjmp	.+126    	; 0x2fb2 <LCDAnimation_vMove+0x132>
	else if (__tmp > 65535)
    2f34:	6d 89       	ldd	r22, Y+21	; 0x15
    2f36:	7e 89       	ldd	r23, Y+22	; 0x16
    2f38:	8f 89       	ldd	r24, Y+23	; 0x17
    2f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	3f ef       	ldi	r19, 0xFF	; 255
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	57 e4       	ldi	r21, 0x47	; 71
    2f44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	4c f5       	brge	.+82     	; 0x2f9e <LCDAnimation_vMove+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e2       	ldi	r20, 0x20	; 32
    2f5a:	51 e4       	ldi	r21, 0x41	; 65
    2f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	9c 8b       	std	Y+20, r25	; 0x14
    2f72:	8b 8b       	std	Y+19, r24	; 0x13
    2f74:	0f c0       	rjmp	.+30     	; 0x2f94 <LCDAnimation_vMove+0x114>
    2f76:	88 ec       	ldi	r24, 0xC8	; 200
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9a 8b       	std	Y+18, r25	; 0x12
    2f7c:	89 8b       	std	Y+17, r24	; 0x11
    2f7e:	89 89       	ldd	r24, Y+17	; 0x11
    2f80:	9a 89       	ldd	r25, Y+18	; 0x12
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <LCDAnimation_vMove+0x102>
    2f86:	9a 8b       	std	Y+18, r25	; 0x12
    2f88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	9c 8b       	std	Y+20, r25	; 0x14
    2f92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f94:	8b 89       	ldd	r24, Y+19	; 0x13
    2f96:	9c 89       	ldd	r25, Y+20	; 0x14
    2f98:	00 97       	sbiw	r24, 0x00	; 0
    2f9a:	69 f7       	brne	.-38     	; 0x2f76 <LCDAnimation_vMove+0xf6>
    2f9c:	14 c0       	rjmp	.+40     	; 0x2fc6 <LCDAnimation_vMove+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	9c 8b       	std	Y+20, r25	; 0x14
    2fb0:	8b 8b       	std	Y+19, r24	; 0x13
    2fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fb6:	98 8b       	std	Y+16, r25	; 0x10
    2fb8:	8f 87       	std	Y+15, r24	; 0x0f
    2fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fbc:	98 89       	ldd	r25, Y+16	; 0x10
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <LCDAnimation_vMove+0x13e>
    2fc2:	98 8b       	std	Y+16, r25	; 0x10
    2fc4:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_DELAY_MS(LCDANIMATION_MOVE_T_MS);
			TOG_BIT(Local_u8LinePosition,0);
    2fc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fc8:	91 e0       	ldi	r25, 0x01	; 1
    2fca:	89 27       	eor	r24, r25
    2fcc:	8d 8f       	std	Y+29, r24	; 0x1d
		Local_s8Index = 0;
	}
	LCD_vClear();
	if(E_NOK == Local_xReverseFlag)
	{
		while(Local_s8Index < LCD_N_COLS)
    2fce:	80 91 68 04 	lds	r24, 0x0468
    2fd2:	80 31       	cpi	r24, 0x10	; 16
    2fd4:	0c f4       	brge	.+2      	; 0x2fd8 <LCDAnimation_vMove+0x158>
    2fd6:	73 cf       	rjmp	.-282    	; 0x2ebe <LCDAnimation_vMove+0x3e>
    2fd8:	93 c0       	rjmp	.+294    	; 0x3100 <LCDAnimation_vMove+0x280>
			TOG_BIT(Local_u8LinePosition,0);
		}
	}
	else
	{
		Local_s8Index--;
    2fda:	80 91 68 04 	lds	r24, 0x0468
    2fde:	81 50       	subi	r24, 0x01	; 1
    2fe0:	80 93 68 04 	sts	0x0468, r24
    2fe4:	88 c0       	rjmp	.+272    	; 0x30f6 <LCDAnimation_vMove+0x276>

		while(Local_s8Index >= 1)
		{
			LCD_vClear();
    2fe6:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
			LCD_xGotoPosition(Local_u8LinePosition,Local_s8Index);
    2fea:	80 91 68 04 	lds	r24, 0x0468
    2fee:	98 2f       	mov	r25, r24
    2ff0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ff2:	69 2f       	mov	r22, r25
    2ff4:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
			LCD_vSendString(Copy_pu8String);
    2ff8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ffa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ffc:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>

			Local_s8Index--;
    3000:	80 91 68 04 	lds	r24, 0x0468
    3004:	81 50       	subi	r24, 0x01	; 1
    3006:	80 93 68 04 	sts	0x0468, r24
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	a0 ea       	ldi	r26, 0xA0	; 160
    3010:	b1 e4       	ldi	r27, 0x41	; 65
    3012:	8b 87       	std	Y+11, r24	; 0x0b
    3014:	9c 87       	std	Y+12, r25	; 0x0c
    3016:	ad 87       	std	Y+13, r26	; 0x0d
    3018:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301a:	6b 85       	ldd	r22, Y+11	; 0x0b
    301c:	7c 85       	ldd	r23, Y+12	; 0x0c
    301e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3020:	9e 85       	ldd	r25, Y+14	; 0x0e
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	4a ef       	ldi	r20, 0xFA	; 250
    3028:	54 e4       	ldi	r21, 0x44	; 68
    302a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	8f 83       	std	Y+7, r24	; 0x07
    3034:	98 87       	std	Y+8, r25	; 0x08
    3036:	a9 87       	std	Y+9, r26	; 0x09
    3038:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    303a:	6f 81       	ldd	r22, Y+7	; 0x07
    303c:	78 85       	ldd	r23, Y+8	; 0x08
    303e:	89 85       	ldd	r24, Y+9	; 0x09
    3040:	9a 85       	ldd	r25, Y+10	; 0x0a
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e8       	ldi	r20, 0x80	; 128
    3048:	5f e3       	ldi	r21, 0x3F	; 63
    304a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    304e:	88 23       	and	r24, r24
    3050:	2c f4       	brge	.+10     	; 0x305c <LCDAnimation_vMove+0x1dc>
		__ticks = 1;
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	9e 83       	std	Y+6, r25	; 0x06
    3058:	8d 83       	std	Y+5, r24	; 0x05
    305a:	3f c0       	rjmp	.+126    	; 0x30da <LCDAnimation_vMove+0x25a>
	else if (__tmp > 65535)
    305c:	6f 81       	ldd	r22, Y+7	; 0x07
    305e:	78 85       	ldd	r23, Y+8	; 0x08
    3060:	89 85       	ldd	r24, Y+9	; 0x09
    3062:	9a 85       	ldd	r25, Y+10	; 0x0a
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	3f ef       	ldi	r19, 0xFF	; 255
    3068:	4f e7       	ldi	r20, 0x7F	; 127
    306a:	57 e4       	ldi	r21, 0x47	; 71
    306c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3070:	18 16       	cp	r1, r24
    3072:	4c f5       	brge	.+82     	; 0x30c6 <LCDAnimation_vMove+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3074:	6b 85       	ldd	r22, Y+11	; 0x0b
    3076:	7c 85       	ldd	r23, Y+12	; 0x0c
    3078:	8d 85       	ldd	r24, Y+13	; 0x0d
    307a:	9e 85       	ldd	r25, Y+14	; 0x0e
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e2       	ldi	r20, 0x20	; 32
    3082:	51 e4       	ldi	r21, 0x41	; 65
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	bc 01       	movw	r22, r24
    308e:	cd 01       	movw	r24, r26
    3090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	9e 83       	std	Y+6, r25	; 0x06
    309a:	8d 83       	std	Y+5, r24	; 0x05
    309c:	0f c0       	rjmp	.+30     	; 0x30bc <LCDAnimation_vMove+0x23c>
    309e:	88 ec       	ldi	r24, 0xC8	; 200
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	9c 83       	std	Y+4, r25	; 0x04
    30a4:	8b 83       	std	Y+3, r24	; 0x03
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
    30a8:	9c 81       	ldd	r25, Y+4	; 0x04
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <LCDAnimation_vMove+0x22a>
    30ae:	9c 83       	std	Y+4, r25	; 0x04
    30b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b2:	8d 81       	ldd	r24, Y+5	; 0x05
    30b4:	9e 81       	ldd	r25, Y+6	; 0x06
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	9e 83       	std	Y+6, r25	; 0x06
    30ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30bc:	8d 81       	ldd	r24, Y+5	; 0x05
    30be:	9e 81       	ldd	r25, Y+6	; 0x06
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	69 f7       	brne	.-38     	; 0x309e <LCDAnimation_vMove+0x21e>
    30c4:	14 c0       	rjmp	.+40     	; 0x30ee <LCDAnimation_vMove+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c6:	6f 81       	ldd	r22, Y+7	; 0x07
    30c8:	78 85       	ldd	r23, Y+8	; 0x08
    30ca:	89 85       	ldd	r24, Y+9	; 0x09
    30cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	9e 83       	std	Y+6, r25	; 0x06
    30d8:	8d 83       	std	Y+5, r24	; 0x05
    30da:	8d 81       	ldd	r24, Y+5	; 0x05
    30dc:	9e 81       	ldd	r25, Y+6	; 0x06
    30de:	9a 83       	std	Y+2, r25	; 0x02
    30e0:	89 83       	std	Y+1, r24	; 0x01
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	9a 81       	ldd	r25, Y+2	; 0x02
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <LCDAnimation_vMove+0x266>
    30ea:	9a 83       	std	Y+2, r25	; 0x02
    30ec:	89 83       	std	Y+1, r24	; 0x01
			LCD_DELAY_MS(LCDANIMATION_MOVE_T_MS);
			TOG_BIT(Local_u8LinePosition,0);
    30ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30f0:	91 e0       	ldi	r25, 0x01	; 1
    30f2:	89 27       	eor	r24, r25
    30f4:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	else
	{
		Local_s8Index--;

		while(Local_s8Index >= 1)
    30f6:	80 91 68 04 	lds	r24, 0x0468
    30fa:	18 16       	cp	r1, r24
    30fc:	0c f4       	brge	.+2      	; 0x3100 <LCDAnimation_vMove+0x280>
    30fe:	73 cf       	rjmp	.-282    	; 0x2fe6 <LCDAnimation_vMove+0x166>
			Local_s8Index--;
			LCD_DELAY_MS(LCDANIMATION_MOVE_T_MS);
			TOG_BIT(Local_u8LinePosition,0);
		}
	}
	TOG_BIT(Local_xReverseFlag,0) ;
    3100:	80 91 67 04 	lds	r24, 0x0467
    3104:	91 e0       	ldi	r25, 0x01	; 1
    3106:	89 27       	eor	r24, r25
    3108:	80 93 67 04 	sts	0x0467, r24
}
    310c:	6f 96       	adiw	r28, 0x1f	; 31
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	08 95       	ret

0000311e <LCDAnimation_vMoveLine>:


void LCDAnimation_vMoveLine(uint8 *Copy_Line,uint8 Copy_u8LinePosition)
{
    311e:	0f 93       	push	r16
    3120:	1f 93       	push	r17
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	c8 58       	subi	r28, 0x88	; 136
    312c:	d0 40       	sbci	r29, 0x00	; 0
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	fe 01       	movw	r30, r28
    313a:	ea 57       	subi	r30, 0x7A	; 122
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	91 83       	std	Z+1, r25	; 0x01
    3140:	80 83       	st	Z, r24
    3142:	fe 01       	movw	r30, r28
    3144:	e8 57       	subi	r30, 0x78	; 120
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	60 83       	st	Z, r22
	sint8 Local_s8Index		=	15;
    314a:	8f e0       	ldi	r24, 0x0F	; 15
    314c:	89 a3       	std	Y+33, r24	; 0x21
	uint8 Buf[100] = {0};
    314e:	84 e6       	ldi	r24, 0x64	; 100
    3150:	fe 01       	movw	r30, r28
    3152:	b2 96       	adiw	r30, 0x22	; 34
    3154:	df 01       	movw	r26, r30
    3156:	98 2f       	mov	r25, r24
    3158:	1d 92       	st	X+, r1
    315a:	9a 95       	dec	r25
    315c:	e9 f7       	brne	.-6      	; 0x3158 <LCDAnimation_vMoveLine+0x3a>
	uint8 Length = strlen(Copy_Line);
    315e:	fe 01       	movw	r30, r28
    3160:	ea 57       	subi	r30, 0x7A	; 122
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	80 81       	ld	r24, Z
    3166:	91 81       	ldd	r25, Z+1	; 0x01
    3168:	0e 94 18 2c 	call	0x5830	; 0x5830 <strlen>
    316c:	88 a3       	std	Y+32, r24	; 0x20
	uint8 Index = 0;
    316e:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 Index2 = 0;
    3170:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 Index3 = 0;
    3172:	1d 8e       	std	Y+29, r1	; 0x1d
    3174:	a0 c0       	rjmp	.+320    	; 0x32b6 <LCDAnimation_vMoveLine+0x198>
	while(Local_s8Index >= 0 )
	{
		LCD_vClear();
    3176:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
		LCD_xGotoPosition(Copy_u8LinePosition,Local_s8Index);
    317a:	99 a1       	ldd	r25, Y+33	; 0x21
    317c:	fe 01       	movw	r30, r28
    317e:	e8 57       	subi	r30, 0x78	; 120
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	80 81       	ld	r24, Z
    3184:	69 2f       	mov	r22, r25
    3186:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
		for(Index = 0; Copy_Line[Index]!='\0';Index++)
    318a:	1f 8e       	std	Y+31, r1	; 0x1f
    318c:	11 c0       	rjmp	.+34     	; 0x31b0 <LCDAnimation_vMoveLine+0x92>
		{
			LCD_xSendByte(Copy_Line[Index]);
    318e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3190:	28 2f       	mov	r18, r24
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	fe 01       	movw	r30, r28
    3196:	ea 57       	subi	r30, 0x7A	; 122
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 81       	ld	r24, Z
    319c:	91 81       	ldd	r25, Z+1	; 0x01
    319e:	fc 01       	movw	r30, r24
    31a0:	e2 0f       	add	r30, r18
    31a2:	f3 1f       	adc	r31, r19
    31a4:	80 81       	ld	r24, Z
    31a6:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <LCD_xSendByte>
	uint8 Index3 = 0;
	while(Local_s8Index >= 0 )
	{
		LCD_vClear();
		LCD_xGotoPosition(Copy_u8LinePosition,Local_s8Index);
		for(Index = 0; Copy_Line[Index]!='\0';Index++)
    31aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31ac:	8f 5f       	subi	r24, 0xFF	; 255
    31ae:	8f 8f       	std	Y+31, r24	; 0x1f
    31b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31b2:	28 2f       	mov	r18, r24
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	fe 01       	movw	r30, r28
    31b8:	ea 57       	subi	r30, 0x7A	; 122
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 81       	ld	r24, Z
    31be:	91 81       	ldd	r25, Z+1	; 0x01
    31c0:	fc 01       	movw	r30, r24
    31c2:	e2 0f       	add	r30, r18
    31c4:	f3 1f       	adc	r31, r19
    31c6:	80 81       	ld	r24, Z
    31c8:	88 23       	and	r24, r24
    31ca:	09 f7       	brne	.-62     	; 0x318e <LCDAnimation_vMoveLine+0x70>
		{
			LCD_xSendByte(Copy_Line[Index]);
		}
		Local_s8Index--;
    31cc:	89 a1       	ldd	r24, Y+33	; 0x21
    31ce:	81 50       	subi	r24, 0x01	; 1
    31d0:	89 a3       	std	Y+33, r24	; 0x21
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	a0 ea       	ldi	r26, 0xA0	; 160
    31d8:	b1 e4       	ldi	r27, 0x41	; 65
    31da:	89 8f       	std	Y+25, r24	; 0x19
    31dc:	9a 8f       	std	Y+26, r25	; 0x1a
    31de:	ab 8f       	std	Y+27, r26	; 0x1b
    31e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e2:	69 8d       	ldd	r22, Y+25	; 0x19
    31e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	4a ef       	ldi	r20, 0xFA	; 250
    31f0:	54 e4       	ldi	r21, 0x44	; 68
    31f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	8d 8b       	std	Y+21, r24	; 0x15
    31fc:	9e 8b       	std	Y+22, r25	; 0x16
    31fe:	af 8b       	std	Y+23, r26	; 0x17
    3200:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3202:	6d 89       	ldd	r22, Y+21	; 0x15
    3204:	7e 89       	ldd	r23, Y+22	; 0x16
    3206:	8f 89       	ldd	r24, Y+23	; 0x17
    3208:	98 8d       	ldd	r25, Y+24	; 0x18
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e8       	ldi	r20, 0x80	; 128
    3210:	5f e3       	ldi	r21, 0x3F	; 63
    3212:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3216:	88 23       	and	r24, r24
    3218:	2c f4       	brge	.+10     	; 0x3224 <LCDAnimation_vMoveLine+0x106>
		__ticks = 1;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	9c 8b       	std	Y+20, r25	; 0x14
    3220:	8b 8b       	std	Y+19, r24	; 0x13
    3222:	3f c0       	rjmp	.+126    	; 0x32a2 <LCDAnimation_vMoveLine+0x184>
	else if (__tmp > 65535)
    3224:	6d 89       	ldd	r22, Y+21	; 0x15
    3226:	7e 89       	ldd	r23, Y+22	; 0x16
    3228:	8f 89       	ldd	r24, Y+23	; 0x17
    322a:	98 8d       	ldd	r25, Y+24	; 0x18
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	3f ef       	ldi	r19, 0xFF	; 255
    3230:	4f e7       	ldi	r20, 0x7F	; 127
    3232:	57 e4       	ldi	r21, 0x47	; 71
    3234:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3238:	18 16       	cp	r1, r24
    323a:	4c f5       	brge	.+82     	; 0x328e <LCDAnimation_vMoveLine+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323c:	69 8d       	ldd	r22, Y+25	; 0x19
    323e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3240:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3242:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e2       	ldi	r20, 0x20	; 32
    324a:	51 e4       	ldi	r21, 0x41	; 65
    324c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	bc 01       	movw	r22, r24
    3256:	cd 01       	movw	r24, r26
    3258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	9c 8b       	std	Y+20, r25	; 0x14
    3262:	8b 8b       	std	Y+19, r24	; 0x13
    3264:	0f c0       	rjmp	.+30     	; 0x3284 <LCDAnimation_vMoveLine+0x166>
    3266:	88 ec       	ldi	r24, 0xC8	; 200
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	9a 8b       	std	Y+18, r25	; 0x12
    326c:	89 8b       	std	Y+17, r24	; 0x11
    326e:	89 89       	ldd	r24, Y+17	; 0x11
    3270:	9a 89       	ldd	r25, Y+18	; 0x12
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	f1 f7       	brne	.-4      	; 0x3272 <LCDAnimation_vMoveLine+0x154>
    3276:	9a 8b       	std	Y+18, r25	; 0x12
    3278:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327a:	8b 89       	ldd	r24, Y+19	; 0x13
    327c:	9c 89       	ldd	r25, Y+20	; 0x14
    327e:	01 97       	sbiw	r24, 0x01	; 1
    3280:	9c 8b       	std	Y+20, r25	; 0x14
    3282:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3284:	8b 89       	ldd	r24, Y+19	; 0x13
    3286:	9c 89       	ldd	r25, Y+20	; 0x14
    3288:	00 97       	sbiw	r24, 0x00	; 0
    328a:	69 f7       	brne	.-38     	; 0x3266 <LCDAnimation_vMoveLine+0x148>
    328c:	14 c0       	rjmp	.+40     	; 0x32b6 <LCDAnimation_vMoveLine+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328e:	6d 89       	ldd	r22, Y+21	; 0x15
    3290:	7e 89       	ldd	r23, Y+22	; 0x16
    3292:	8f 89       	ldd	r24, Y+23	; 0x17
    3294:	98 8d       	ldd	r25, Y+24	; 0x18
    3296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	9c 8b       	std	Y+20, r25	; 0x14
    32a0:	8b 8b       	std	Y+19, r24	; 0x13
    32a2:	8b 89       	ldd	r24, Y+19	; 0x13
    32a4:	9c 89       	ldd	r25, Y+20	; 0x14
    32a6:	98 8b       	std	Y+16, r25	; 0x10
    32a8:	8f 87       	std	Y+15, r24	; 0x0f
    32aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ac:	98 89       	ldd	r25, Y+16	; 0x10
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <LCDAnimation_vMoveLine+0x190>
    32b2:	98 8b       	std	Y+16, r25	; 0x10
    32b4:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 Buf[100] = {0};
	uint8 Length = strlen(Copy_Line);
	uint8 Index = 0;
	uint8 Index2 = 0;
	uint8 Index3 = 0;
	while(Local_s8Index >= 0 )
    32b6:	89 a1       	ldd	r24, Y+33	; 0x21
    32b8:	88 23       	and	r24, r24
    32ba:	0c f0       	brlt	.+2      	; 0x32be <LCDAnimation_vMoveLine+0x1a0>
    32bc:	5c cf       	rjmp	.-328    	; 0x3176 <LCDAnimation_vMoveLine+0x58>
		}
		Local_s8Index--;

		LCD_DELAY_MS(LCDANIMATION_MOVE_T_MS);
	}
	strcpy(Buf,Copy_Line);
    32be:	ce 01       	movw	r24, r28
    32c0:	82 96       	adiw	r24, 0x22	; 34
    32c2:	fe 01       	movw	r30, r28
    32c4:	ea 57       	subi	r30, 0x7A	; 122
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	20 81       	ld	r18, Z
    32ca:	31 81       	ldd	r19, Z+1	; 0x01
    32cc:	b9 01       	movw	r22, r18
    32ce:	0e 94 11 2c 	call	0x5822	; 0x5822 <strcpy>
	for(Index3 = 0;Index3<=strlen(Buf);Index3++)
    32d2:	1d 8e       	std	Y+29, r1	; 0x1d
    32d4:	bc c0       	rjmp	.+376    	; 0x344e <LCDAnimation_vMoveLine+0x330>
	{
		LCD_vClear();
    32d6:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
		for(Index = 0;Buf[Index]!='\0';Index++)
    32da:	1f 8e       	std	Y+31, r1	; 0x1f
    32dc:	a7 c0       	rjmp	.+334    	; 0x342c <LCDAnimation_vMoveLine+0x30e>
		{
			LCD_vClear();
    32de:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
			for(Index2 = 0;Buf[Index2]!='\0';Index2++)
    32e2:	1e 8e       	std	Y+30, r1	; 0x1e
    32e4:	18 c0       	rjmp	.+48     	; 0x3316 <LCDAnimation_vMoveLine+0x1f8>
			{
				Buf[Index2] = Buf[Index2+1];
    32e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32e8:	48 2f       	mov	r20, r24
    32ea:	50 e0       	ldi	r21, 0x00	; 0
    32ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32ee:	88 2f       	mov	r24, r24
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	9c 01       	movw	r18, r24
    32f4:	2f 5f       	subi	r18, 0xFF	; 255
    32f6:	3f 4f       	sbci	r19, 0xFF	; 255
    32f8:	ce 01       	movw	r24, r28
    32fa:	82 96       	adiw	r24, 0x22	; 34
    32fc:	fc 01       	movw	r30, r24
    32fe:	e2 0f       	add	r30, r18
    3300:	f3 1f       	adc	r31, r19
    3302:	20 81       	ld	r18, Z
    3304:	ce 01       	movw	r24, r28
    3306:	82 96       	adiw	r24, 0x22	; 34
    3308:	fc 01       	movw	r30, r24
    330a:	e4 0f       	add	r30, r20
    330c:	f5 1f       	adc	r31, r21
    330e:	20 83       	st	Z, r18
	{
		LCD_vClear();
		for(Index = 0;Buf[Index]!='\0';Index++)
		{
			LCD_vClear();
			for(Index2 = 0;Buf[Index2]!='\0';Index2++)
    3310:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3312:	8f 5f       	subi	r24, 0xFF	; 255
    3314:	8e 8f       	std	Y+30, r24	; 0x1e
    3316:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	ce 01       	movw	r24, r28
    331e:	82 96       	adiw	r24, 0x22	; 34
    3320:	fc 01       	movw	r30, r24
    3322:	e2 0f       	add	r30, r18
    3324:	f3 1f       	adc	r31, r19
    3326:	80 81       	ld	r24, Z
    3328:	88 23       	and	r24, r24
    332a:	e9 f6       	brne	.-70     	; 0x32e6 <LCDAnimation_vMoveLine+0x1c8>
			{
				Buf[Index2] = Buf[Index2+1];
			}

			LCD_xGotoPosition(Copy_u8LinePosition,0);
    332c:	fe 01       	movw	r30, r28
    332e:	e8 57       	subi	r30, 0x78	; 120
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	80 81       	ld	r24, Z
    3334:	60 e0       	ldi	r22, 0x00	; 0
    3336:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_xGotoPosition>
			LCD_vSendString(Buf);
    333a:	ce 01       	movw	r24, r28
    333c:	82 96       	adiw	r24, 0x22	; 34
    333e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	a0 ea       	ldi	r26, 0xA0	; 160
    3348:	b1 e4       	ldi	r27, 0x41	; 65
    334a:	8b 87       	std	Y+11, r24	; 0x0b
    334c:	9c 87       	std	Y+12, r25	; 0x0c
    334e:	ad 87       	std	Y+13, r26	; 0x0d
    3350:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3352:	6b 85       	ldd	r22, Y+11	; 0x0b
    3354:	7c 85       	ldd	r23, Y+12	; 0x0c
    3356:	8d 85       	ldd	r24, Y+13	; 0x0d
    3358:	9e 85       	ldd	r25, Y+14	; 0x0e
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	4a ef       	ldi	r20, 0xFA	; 250
    3360:	54 e4       	ldi	r21, 0x44	; 68
    3362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	8f 83       	std	Y+7, r24	; 0x07
    336c:	98 87       	std	Y+8, r25	; 0x08
    336e:	a9 87       	std	Y+9, r26	; 0x09
    3370:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3372:	6f 81       	ldd	r22, Y+7	; 0x07
    3374:	78 85       	ldd	r23, Y+8	; 0x08
    3376:	89 85       	ldd	r24, Y+9	; 0x09
    3378:	9a 85       	ldd	r25, Y+10	; 0x0a
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e8       	ldi	r20, 0x80	; 128
    3380:	5f e3       	ldi	r21, 0x3F	; 63
    3382:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3386:	88 23       	and	r24, r24
    3388:	2c f4       	brge	.+10     	; 0x3394 <LCDAnimation_vMoveLine+0x276>
		__ticks = 1;
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	9e 83       	std	Y+6, r25	; 0x06
    3390:	8d 83       	std	Y+5, r24	; 0x05
    3392:	3f c0       	rjmp	.+126    	; 0x3412 <LCDAnimation_vMoveLine+0x2f4>
	else if (__tmp > 65535)
    3394:	6f 81       	ldd	r22, Y+7	; 0x07
    3396:	78 85       	ldd	r23, Y+8	; 0x08
    3398:	89 85       	ldd	r24, Y+9	; 0x09
    339a:	9a 85       	ldd	r25, Y+10	; 0x0a
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	3f ef       	ldi	r19, 0xFF	; 255
    33a0:	4f e7       	ldi	r20, 0x7F	; 127
    33a2:	57 e4       	ldi	r21, 0x47	; 71
    33a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a8:	18 16       	cp	r1, r24
    33aa:	4c f5       	brge	.+82     	; 0x33fe <LCDAnimation_vMoveLine+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	40 e2       	ldi	r20, 0x20	; 32
    33ba:	51 e4       	ldi	r21, 0x41	; 65
    33bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	bc 01       	movw	r22, r24
    33c6:	cd 01       	movw	r24, r26
    33c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	9e 83       	std	Y+6, r25	; 0x06
    33d2:	8d 83       	std	Y+5, r24	; 0x05
    33d4:	0f c0       	rjmp	.+30     	; 0x33f4 <LCDAnimation_vMoveLine+0x2d6>
    33d6:	88 ec       	ldi	r24, 0xC8	; 200
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	9c 83       	std	Y+4, r25	; 0x04
    33dc:	8b 83       	std	Y+3, r24	; 0x03
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	9c 81       	ldd	r25, Y+4	; 0x04
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <LCDAnimation_vMoveLine+0x2c4>
    33e6:	9c 83       	std	Y+4, r25	; 0x04
    33e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ea:	8d 81       	ldd	r24, Y+5	; 0x05
    33ec:	9e 81       	ldd	r25, Y+6	; 0x06
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	9e 83       	std	Y+6, r25	; 0x06
    33f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f4:	8d 81       	ldd	r24, Y+5	; 0x05
    33f6:	9e 81       	ldd	r25, Y+6	; 0x06
    33f8:	00 97       	sbiw	r24, 0x00	; 0
    33fa:	69 f7       	brne	.-38     	; 0x33d6 <LCDAnimation_vMoveLine+0x2b8>
    33fc:	14 c0       	rjmp	.+40     	; 0x3426 <LCDAnimation_vMoveLine+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3400:	78 85       	ldd	r23, Y+8	; 0x08
    3402:	89 85       	ldd	r24, Y+9	; 0x09
    3404:	9a 85       	ldd	r25, Y+10	; 0x0a
    3406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	9e 83       	std	Y+6, r25	; 0x06
    3410:	8d 83       	std	Y+5, r24	; 0x05
    3412:	8d 81       	ldd	r24, Y+5	; 0x05
    3414:	9e 81       	ldd	r25, Y+6	; 0x06
    3416:	9a 83       	std	Y+2, r25	; 0x02
    3418:	89 83       	std	Y+1, r24	; 0x01
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	9a 81       	ldd	r25, Y+2	; 0x02
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	f1 f7       	brne	.-4      	; 0x341e <LCDAnimation_vMoveLine+0x300>
    3422:	9a 83       	std	Y+2, r25	; 0x02
    3424:	89 83       	std	Y+1, r24	; 0x01
	}
	strcpy(Buf,Copy_Line);
	for(Index3 = 0;Index3<=strlen(Buf);Index3++)
	{
		LCD_vClear();
		for(Index = 0;Buf[Index]!='\0';Index++)
    3426:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3428:	8f 5f       	subi	r24, 0xFF	; 255
    342a:	8f 8f       	std	Y+31, r24	; 0x1f
    342c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    342e:	28 2f       	mov	r18, r24
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	ce 01       	movw	r24, r28
    3434:	82 96       	adiw	r24, 0x22	; 34
    3436:	fc 01       	movw	r30, r24
    3438:	e2 0f       	add	r30, r18
    343a:	f3 1f       	adc	r31, r19
    343c:	80 81       	ld	r24, Z
    343e:	88 23       	and	r24, r24
    3440:	09 f0       	breq	.+2      	; 0x3444 <LCDAnimation_vMoveLine+0x326>
    3442:	4d cf       	rjmp	.-358    	; 0x32de <LCDAnimation_vMoveLine+0x1c0>
			LCD_xGotoPosition(Copy_u8LinePosition,0);
			LCD_vSendString(Buf);
			LCD_DELAY_MS(LCDANIMATION_MOVE_T_MS);
		}

		LCD_vClear();
    3444:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>
		Local_s8Index--;

		LCD_DELAY_MS(LCDANIMATION_MOVE_T_MS);
	}
	strcpy(Buf,Copy_Line);
	for(Index3 = 0;Index3<=strlen(Buf);Index3++)
    3448:	8d 8d       	ldd	r24, Y+29	; 0x1d
    344a:	8f 5f       	subi	r24, 0xFF	; 255
    344c:	8d 8f       	std	Y+29, r24	; 0x1d
    344e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3450:	08 2f       	mov	r16, r24
    3452:	10 e0       	ldi	r17, 0x00	; 0
    3454:	ce 01       	movw	r24, r28
    3456:	82 96       	adiw	r24, 0x22	; 34
    3458:	0e 94 18 2c 	call	0x5830	; 0x5830 <strlen>
    345c:	80 17       	cp	r24, r16
    345e:	91 07       	cpc	r25, r17
    3460:	08 f0       	brcs	.+2      	; 0x3464 <LCDAnimation_vMoveLine+0x346>
    3462:	39 cf       	rjmp	.-398    	; 0x32d6 <LCDAnimation_vMoveLine+0x1b8>
		}

		LCD_vClear();
	}

}
    3464:	c8 57       	subi	r28, 0x78	; 120
    3466:	df 4f       	sbci	r29, 0xFF	; 255
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	1f 91       	pop	r17
    3478:	0f 91       	pop	r16
    347a:	08 95       	ret

0000347c <LCD_xInit>:
#define LCD_SET_CURRENT_WORD_LENGTH(u8WordLength)			u8LCD_WordLength = u8WordLength
#define LCD_U8GET_CURRENT_WORD_LENGTH()						u8LCD_WordLength
/* ***************************************************************************** */

Error_Status LCD_xInit(LCD_configType * ConfigTypePtr)
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
    3484:	2d 97       	sbiw	r28, 0x0d	; 13
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	9a 83       	std	Y+2, r25	; 0x02
    3492:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize control pins */
	GPIO_vInitPortPin(LCD_E_PIN_PORT,LCD_E_PIN,GPIO_OUT);
    3494:	84 e4       	ldi	r24, 0x44	; 68
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	41 e0       	ldi	r20, 0x01	; 1
    349a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
	GPIO_vInitPortPin(LCD_RS_PIN_PORT,LCD_RS_PIN,GPIO_OUT);
    349e:	84 e4       	ldi	r24, 0x44	; 68
    34a0:	62 e0       	ldi	r22, 0x02	; 2
    34a2:	41 e0       	ldi	r20, 0x01	; 1
    34a4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
	GPIO_vInitPortPin(LCD_RW_PIN_PORT,LCD_RW_PIN,GPIO_OUT);
    34a8:	84 e4       	ldi	r24, 0x44	; 68
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	41 e0       	ldi	r20, 0x01	; 1
    34ae:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>

	/* Set LCD RW pin high as reading mode to read the busy flag */
	GPIO_vWritePortPin(LCD_RW_PIN_PORT,LCD_RW_PIN,GPIO_HIGH);
    34b2:	84 e4       	ldi	r24, 0x44	; 68
    34b4:	61 e0       	ldi	r22, 0x01	; 1
    34b6:	41 e0       	ldi	r20, 0x01	; 1
    34b8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
	/* Clear LCD enable pin */
	GPIO_vWritePortPin(LCD_E_PIN_PORT,LCD_E_PIN,GPIO_LOW);
    34bc:	84 e4       	ldi	r24, 0x44	; 68
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	40 e0       	ldi	r20, 0x00	; 0
    34c2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>

	/* Check LCD operates at which word length mode */
	if(LCD_8_pins == ConfigTypePtr->WordLength)
    34c6:	e9 81       	ldd	r30, Y+1	; 0x01
    34c8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ca:	80 81       	ld	r24, Z
    34cc:	81 30       	cpi	r24, 0x01	; 1
    34ce:	61 f5       	brne	.+88     	; 0x3528 <LCD_xInit+0xac>
	{
		/* Set current word length flag as 8 pins mode */
		LCD_SET_CURRENT_WORD_LENGTH(LCD_8_pins);
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	80 93 69 04 	sts	0x0469, r24
		/* Initialize Data pins */
		GPIO_vInitPortPin(LCD_DATA_PIN0_PORT,LCD_DATA_PIN0,GPIO_OUT);
    34d6:	83 e4       	ldi	r24, 0x43	; 67
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	41 e0       	ldi	r20, 0x01	; 1
    34dc:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
		GPIO_vInitPortPin(LCD_DATA_PIN1_PORT,LCD_DATA_PIN1,GPIO_OUT);
    34e0:	83 e4       	ldi	r24, 0x43	; 67
    34e2:	61 e0       	ldi	r22, 0x01	; 1
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
		GPIO_vInitPortPin(LCD_DATA_PIN2_PORT,LCD_DATA_PIN2,GPIO_OUT);
    34ea:	83 e4       	ldi	r24, 0x43	; 67
    34ec:	62 e0       	ldi	r22, 0x02	; 2
    34ee:	41 e0       	ldi	r20, 0x01	; 1
    34f0:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
		GPIO_vInitPortPin(LCD_DATA_PIN3_PORT,LCD_DATA_PIN3,GPIO_OUT);
    34f4:	83 e4       	ldi	r24, 0x43	; 67
    34f6:	63 e0       	ldi	r22, 0x03	; 3
    34f8:	41 e0       	ldi	r20, 0x01	; 1
    34fa:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>

		GPIO_vInitPortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4,GPIO_OUT);
    34fe:	83 e4       	ldi	r24, 0x43	; 67
    3500:	64 e0       	ldi	r22, 0x04	; 4
    3502:	41 e0       	ldi	r20, 0x01	; 1
    3504:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
		GPIO_vInitPortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5,GPIO_OUT);
    3508:	83 e4       	ldi	r24, 0x43	; 67
    350a:	65 e0       	ldi	r22, 0x05	; 5
    350c:	41 e0       	ldi	r20, 0x01	; 1
    350e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
		GPIO_vInitPortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6,GPIO_OUT);
    3512:	83 e4       	ldi	r24, 0x43	; 67
    3514:	66 e0       	ldi	r22, 0x06	; 6
    3516:	41 e0       	ldi	r20, 0x01	; 1
    3518:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
		GPIO_vInitPortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7,GPIO_OUT);
    351c:	83 e4       	ldi	r24, 0x43	; 67
    351e:	67 e0       	ldi	r22, 0x07	; 7
    3520:	41 e0       	ldi	r20, 0x01	; 1
    3522:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
    3526:	1e c0       	rjmp	.+60     	; 0x3564 <LCD_xInit+0xe8>
	}
	else if (LCD_4_pins == ConfigTypePtr->WordLength)
    3528:	e9 81       	ldd	r30, Y+1	; 0x01
    352a:	fa 81       	ldd	r31, Y+2	; 0x02
    352c:	80 81       	ld	r24, Z
    352e:	88 23       	and	r24, r24
    3530:	b9 f4       	brne	.+46     	; 0x3560 <LCD_xInit+0xe4>
	{
		/* Set current word length flag as 4 pins mode */
		LCD_SET_CURRENT_WORD_LENGTH(LCD_4_pins);
    3532:	10 92 69 04 	sts	0x0469, r1
		/* Initialize Data pins */
		GPIO_vInitPortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4,GPIO_OUT);
    3536:	83 e4       	ldi	r24, 0x43	; 67
    3538:	64 e0       	ldi	r22, 0x04	; 4
    353a:	41 e0       	ldi	r20, 0x01	; 1
    353c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
		GPIO_vInitPortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5,GPIO_OUT);
    3540:	83 e4       	ldi	r24, 0x43	; 67
    3542:	65 e0       	ldi	r22, 0x05	; 5
    3544:	41 e0       	ldi	r20, 0x01	; 1
    3546:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
		GPIO_vInitPortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6,GPIO_OUT);
    354a:	83 e4       	ldi	r24, 0x43	; 67
    354c:	66 e0       	ldi	r22, 0x06	; 6
    354e:	41 e0       	ldi	r20, 0x01	; 1
    3550:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
		GPIO_vInitPortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7,GPIO_OUT);
    3554:	83 e4       	ldi	r24, 0x43	; 67
    3556:	67 e0       	ldi	r22, 0x07	; 7
    3558:	41 e0       	ldi	r20, 0x01	; 1
    355a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
    355e:	02 c0       	rjmp	.+4      	; 0x3564 <LCD_xInit+0xe8>
	}
	else
	{
		return E_NOK;
    3560:	1d 86       	std	Y+13, r1	; 0x0d
    3562:	6a c0       	rjmp	.+212    	; 0x3638 <LCD_xInit+0x1bc>
	/* Initialization sequence */
	/* Check if there is any operation is still running and wait until VDD rises */
	LCD_CHECK_BUSY_FLAG();

	/* Function set configurations */
	LCD_xSendComand(
    3564:	e9 81       	ldd	r30, Y+1	; 0x01
    3566:	fa 81       	ldd	r31, Y+2	; 0x02
    3568:	80 81       	ld	r24, Z
    356a:	81 30       	cpi	r24, 0x01	; 1
    356c:	19 f4       	brne	.+6      	; 0x3574 <LCD_xInit+0xf8>
    356e:	80 e3       	ldi	r24, 0x30	; 48
    3570:	8c 87       	std	Y+12, r24	; 0x0c
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <LCD_xInit+0xfc>
    3574:	90 e2       	ldi	r25, 0x20	; 32
    3576:	9c 87       	std	Y+12, r25	; 0x0c
    3578:	e9 81       	ldd	r30, Y+1	; 0x01
    357a:	fa 81       	ldd	r31, Y+2	; 0x02
    357c:	81 81       	ldd	r24, Z+1	; 0x01
    357e:	81 30       	cpi	r24, 0x01	; 1
    3580:	19 f4       	brne	.+6      	; 0x3588 <LCD_xInit+0x10c>
    3582:	88 e0       	ldi	r24, 0x08	; 8
    3584:	8b 87       	std	Y+11, r24	; 0x0b
    3586:	01 c0       	rjmp	.+2      	; 0x358a <LCD_xInit+0x10e>
    3588:	1b 86       	std	Y+11, r1	; 0x0b
    358a:	9c 85       	ldd	r25, Y+12	; 0x0c
    358c:	8b 85       	ldd	r24, Y+11	; 0x0b
    358e:	98 2b       	or	r25, r24
    3590:	9a 87       	std	Y+10, r25	; 0x0a
    3592:	e9 81       	ldd	r30, Y+1	; 0x01
    3594:	fa 81       	ldd	r31, Y+2	; 0x02
    3596:	82 81       	ldd	r24, Z+2	; 0x02
    3598:	81 30       	cpi	r24, 0x01	; 1
    359a:	19 f4       	brne	.+6      	; 0x35a2 <LCD_xInit+0x126>
    359c:	94 e0       	ldi	r25, 0x04	; 4
    359e:	99 87       	std	Y+9, r25	; 0x09
    35a0:	01 c0       	rjmp	.+2      	; 0x35a4 <LCD_xInit+0x128>
    35a2:	19 86       	std	Y+9, r1	; 0x09
    35a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35a6:	99 85       	ldd	r25, Y+9	; 0x09
    35a8:	89 2b       	or	r24, r25
    35aa:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>

	/* Check if there is any operation is still running */
	LCD_CHECK_BUSY_FLAG();

	/* Cursor and display control */
	LCD_xSendComand(
    35ae:	e9 81       	ldd	r30, Y+1	; 0x01
    35b0:	fa 81       	ldd	r31, Y+2	; 0x02
    35b2:	83 81       	ldd	r24, Z+3	; 0x03
    35b4:	81 30       	cpi	r24, 0x01	; 1
    35b6:	19 f4       	brne	.+6      	; 0x35be <LCD_xInit+0x142>
    35b8:	8c e0       	ldi	r24, 0x0C	; 12
    35ba:	88 87       	std	Y+8, r24	; 0x08
    35bc:	02 c0       	rjmp	.+4      	; 0x35c2 <LCD_xInit+0x146>
    35be:	98 e0       	ldi	r25, 0x08	; 8
    35c0:	98 87       	std	Y+8, r25	; 0x08
    35c2:	e9 81       	ldd	r30, Y+1	; 0x01
    35c4:	fa 81       	ldd	r31, Y+2	; 0x02
    35c6:	85 81       	ldd	r24, Z+5	; 0x05
    35c8:	81 30       	cpi	r24, 0x01	; 1
    35ca:	19 f4       	brne	.+6      	; 0x35d2 <LCD_xInit+0x156>
    35cc:	82 e0       	ldi	r24, 0x02	; 2
    35ce:	8f 83       	std	Y+7, r24	; 0x07
    35d0:	01 c0       	rjmp	.+2      	; 0x35d4 <LCD_xInit+0x158>
    35d2:	1f 82       	std	Y+7, r1	; 0x07
    35d4:	98 85       	ldd	r25, Y+8	; 0x08
    35d6:	8f 81       	ldd	r24, Y+7	; 0x07
    35d8:	98 2b       	or	r25, r24
    35da:	9e 83       	std	Y+6, r25	; 0x06
    35dc:	e9 81       	ldd	r30, Y+1	; 0x01
    35de:	fa 81       	ldd	r31, Y+2	; 0x02
    35e0:	84 81       	ldd	r24, Z+4	; 0x04
    35e2:	1d 82       	std	Y+5, r1	; 0x05
    35e4:	81 30       	cpi	r24, 0x01	; 1
    35e6:	11 f4       	brne	.+4      	; 0x35ec <LCD_xInit+0x170>
    35e8:	91 e0       	ldi	r25, 0x01	; 1
    35ea:	9d 83       	std	Y+5, r25	; 0x05
    35ec:	8e 81       	ldd	r24, Y+6	; 0x06
    35ee:	9d 81       	ldd	r25, Y+5	; 0x05
    35f0:	89 2b       	or	r24, r25
    35f2:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>

	/* Check if there is any operation is still running */
	LCD_CHECK_BUSY_FLAG();

	/* Clear the screen */
	LCD_xSendComand(LCD_CLR);
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>

	/* Check if there is any operation is still running */
	LCD_CHECK_BUSY_FLAG();
	/* Entry mode */
	LCD_xSendComand(
    35fc:	e9 81       	ldd	r30, Y+1	; 0x01
    35fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3600:	86 81       	ldd	r24, Z+6	; 0x06
    3602:	81 30       	cpi	r24, 0x01	; 1
    3604:	19 f4       	brne	.+6      	; 0x360c <LCD_xInit+0x190>
    3606:	84 e0       	ldi	r24, 0x04	; 4
    3608:	8c 83       	std	Y+4, r24	; 0x04
    360a:	02 c0       	rjmp	.+4      	; 0x3610 <LCD_xInit+0x194>
    360c:	96 e0       	ldi	r25, 0x06	; 6
    360e:	9c 83       	std	Y+4, r25	; 0x04
    3610:	e9 81       	ldd	r30, Y+1	; 0x01
    3612:	fa 81       	ldd	r31, Y+2	; 0x02
    3614:	87 81       	ldd	r24, Z+7	; 0x07
    3616:	1b 82       	std	Y+3, r1	; 0x03
    3618:	81 30       	cpi	r24, 0x01	; 1
    361a:	11 f4       	brne	.+4      	; 0x3620 <LCD_xInit+0x1a4>
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	8b 83       	std	Y+3, r24	; 0x03
    3620:	8c 81       	ldd	r24, Y+4	; 0x04
    3622:	9b 81       	ldd	r25, Y+3	; 0x03
    3624:	89 2b       	or	r24, r25
    3626:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>
			/* Configure display shifting state */
			|LCD_DISPLAY_SHIFT (ConfigTypePtr->DisplayShift)
	);

	/* Clear LCD RW pin to return to write mode */
	GPIO_vWritePortPin(LCD_RW_PIN_PORT,LCD_RW_PIN,GPIO_LOW);
    362a:	84 e4       	ldi	r24, 0x44	; 68
    362c:	61 e0       	ldi	r22, 0x01	; 1
    362e:	40 e0       	ldi	r20, 0x00	; 0
    3630:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>

	return E_OK;
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	8d 87       	std	Y+13, r24	; 0x0d
    3638:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    363a:	2d 96       	adiw	r28, 0x0d	; 13
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	cd bf       	out	0x3d, r28	; 61
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <LCD_xSendComand>:

/* ***************************************************************************** */

static Error_Status LCD_xSendComand(uint8 Copy_u8Command)
{
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	00 d0       	rcall	.+0      	; 0x3652 <LCD_xSendComand+0x6>
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
    3656:	89 83       	std	Y+1, r24	; 0x01
	/* Turn LCD to send data mode */
	GPIO_vWritePortPin(LCD_RS_PIN_PORT,LCD_RS_PIN,GPIO_LOW);
    3658:	84 e4       	ldi	r24, 0x44	; 68
    365a:	62 e0       	ldi	r22, 0x02	; 2
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
	GPIO_vWritePortPin(LCD_RW_PIN_PORT,LCD_RW_PIN,GPIO_LOW);
    3662:	84 e4       	ldi	r24, 0x44	; 68
    3664:	61 e0       	ldi	r22, 0x01	; 1
    3666:	40 e0       	ldi	r20, 0x00	; 0
    3668:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
	/* Send data to LCD port */
	if(LCD_8_pins == LCD_U8GET_CURRENT_WORD_LENGTH())
    366c:	80 91 69 04 	lds	r24, 0x0469
    3670:	81 30       	cpi	r24, 0x01	; 1
    3672:	31 f4       	brne	.+12     	; 0x3680 <LCD_xSendComand+0x34>
	{
		LCD_vLatch(Copy_u8Command,LCD_SEND_COMMAND,LCD_8_pins);
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	61 e0       	ldi	r22, 0x01	; 1
    3678:	41 e0       	ldi	r20, 0x01	; 1
    367a:	0e 94 85 1c 	call	0x390a	; 0x390a <LCD_vLatch>
    367e:	0c c0       	rjmp	.+24     	; 0x3698 <LCD_xSendComand+0x4c>
	}
	else if(LCD_4_pins == LCD_U8GET_CURRENT_WORD_LENGTH())
    3680:	80 91 69 04 	lds	r24, 0x0469
    3684:	88 23       	and	r24, r24
    3686:	31 f4       	brne	.+12     	; 0x3694 <LCD_xSendComand+0x48>
	{
		LCD_vLatch(Copy_u8Command,LCD_SEND_COMMAND,LCD_4_pins);
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	61 e0       	ldi	r22, 0x01	; 1
    368c:	40 e0       	ldi	r20, 0x00	; 0
    368e:	0e 94 85 1c 	call	0x390a	; 0x390a <LCD_vLatch>
    3692:	02 c0       	rjmp	.+4      	; 0x3698 <LCD_xSendComand+0x4c>
	}
	else
	{
		return E_NOK;
    3694:	1a 82       	std	Y+2, r1	; 0x02
    3696:	02 c0       	rjmp	.+4      	; 0x369c <LCD_xSendComand+0x50>
	}
	return E_OK;
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	8a 83       	std	Y+2, r24	; 0x02
    369c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	cf 91       	pop	r28
    36a4:	df 91       	pop	r29
    36a6:	08 95       	ret

000036a8 <LCD_xSendByte>:

/* ***************************************************************************** */
Error_Status LCD_xSendByte(uint8 Copy_u8Byte)
{
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	00 d0       	rcall	.+0      	; 0x36ae <LCD_xSendByte+0x6>
    36ae:	cd b7       	in	r28, 0x3d	; 61
    36b0:	de b7       	in	r29, 0x3e	; 62
    36b2:	89 83       	std	Y+1, r24	; 0x01
	/* Turn LCD to send data mode */
	GPIO_vWritePortPin(LCD_RS_PIN_PORT,LCD_RS_PIN,GPIO_HIGH);
    36b4:	84 e4       	ldi	r24, 0x44	; 68
    36b6:	62 e0       	ldi	r22, 0x02	; 2
    36b8:	41 e0       	ldi	r20, 0x01	; 1
    36ba:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
	GPIO_vWritePortPin(LCD_RW_PIN_PORT,LCD_RW_PIN,GPIO_LOW);
    36be:	84 e4       	ldi	r24, 0x44	; 68
    36c0:	61 e0       	ldi	r22, 0x01	; 1
    36c2:	40 e0       	ldi	r20, 0x00	; 0
    36c4:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
	if(LCD_8_pins == LCD_U8GET_CURRENT_WORD_LENGTH())
    36c8:	80 91 69 04 	lds	r24, 0x0469
    36cc:	81 30       	cpi	r24, 0x01	; 1
    36ce:	31 f4       	brne	.+12     	; 0x36dc <LCD_xSendByte+0x34>
	{
		LCD_vLatch(Copy_u8Byte,LCD_SEND_DATA,LCD_8_pins);
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	60 e0       	ldi	r22, 0x00	; 0
    36d4:	41 e0       	ldi	r20, 0x01	; 1
    36d6:	0e 94 85 1c 	call	0x390a	; 0x390a <LCD_vLatch>
    36da:	0c c0       	rjmp	.+24     	; 0x36f4 <LCD_xSendByte+0x4c>
	}
	else if(LCD_4_pins == LCD_U8GET_CURRENT_WORD_LENGTH())
    36dc:	80 91 69 04 	lds	r24, 0x0469
    36e0:	88 23       	and	r24, r24
    36e2:	31 f4       	brne	.+12     	; 0x36f0 <LCD_xSendByte+0x48>
	{
		LCD_vLatch(Copy_u8Byte,LCD_SEND_DATA,LCD_4_pins);
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	40 e0       	ldi	r20, 0x00	; 0
    36ea:	0e 94 85 1c 	call	0x390a	; 0x390a <LCD_vLatch>
    36ee:	02 c0       	rjmp	.+4      	; 0x36f4 <LCD_xSendByte+0x4c>
	}
	else
	{
		return E_NOK;
    36f0:	1a 82       	std	Y+2, r1	; 0x02
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <LCD_xSendByte+0x50>
	}

	return E_OK;
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	8a 83       	std	Y+2, r24	; 0x02
    36f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	cf 91       	pop	r28
    3700:	df 91       	pop	r29
    3702:	08 95       	ret

00003704 <LCD_xRecvByte>:
/* ***************************************************************************** */
Error_Status LCD_xRecvByte(uint8 Copy_u8Byte, uint8* pu8RecvData)
{
    3704:	df 93       	push	r29
    3706:	cf 93       	push	r28
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	2e 97       	sbiw	r28, 0x0e	; 14
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	8b 87       	std	Y+11, r24	; 0x0b
    371a:	7d 87       	std	Y+13, r23	; 0x0d
    371c:	6c 87       	std	Y+12, r22	; 0x0c
	uint8 Local_u8Data	=	0;
    371e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8DataArr[8];
	uint8 Local_u8Index	=	0;
    3720:	19 82       	std	Y+1, r1	; 0x01
	/* Turn LCD to read data mode */
	GPIO_vWritePortPin(LCD_RS_PIN_PORT,LCD_RS_PIN,GPIO_HIGH);
    3722:	84 e4       	ldi	r24, 0x44	; 68
    3724:	62 e0       	ldi	r22, 0x02	; 2
    3726:	41 e0       	ldi	r20, 0x01	; 1
    3728:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
	GPIO_vWritePortPin(LCD_RW_PIN_PORT,LCD_RW_PIN,GPIO_HIGH);
    372c:	84 e4       	ldi	r24, 0x44	; 68
    372e:	61 e0       	ldi	r22, 0x01	; 1
    3730:	41 e0       	ldi	r20, 0x01	; 1
    3732:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
	/* Check what is the current word length */
	if(LCD_8_pins == LCD_U8GET_CURRENT_WORD_LENGTH())
    3736:	80 91 69 04 	lds	r24, 0x0469
    373a:	81 30       	cpi	r24, 0x01	; 1
    373c:	09 f0       	breq	.+2      	; 0x3740 <LCD_xRecvByte+0x3c>
    373e:	67 c0       	rjmp	.+206    	; 0x380e <LCD_xRecvByte+0x10a>
	{
		Local_u8DataArr[0] = GPIO_xReadPortPin(LCD_DATA_PIN0_PORT,LCD_DATA_PIN0);
    3740:	83 e4       	ldi	r24, 0x43	; 67
    3742:	60 e0       	ldi	r22, 0x00	; 0
    3744:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    3748:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8DataArr[1] = GPIO_xReadPortPin(LCD_DATA_PIN1_PORT,LCD_DATA_PIN1);
    374a:	83 e4       	ldi	r24, 0x43	; 67
    374c:	61 e0       	ldi	r22, 0x01	; 1
    374e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    3752:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8DataArr[2] = GPIO_xReadPortPin(LCD_DATA_PIN2_PORT,LCD_DATA_PIN2);
    3754:	83 e4       	ldi	r24, 0x43	; 67
    3756:	62 e0       	ldi	r22, 0x02	; 2
    3758:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    375c:	8d 83       	std	Y+5, r24	; 0x05
		Local_u8DataArr[3] = GPIO_xReadPortPin(LCD_DATA_PIN3_PORT,LCD_DATA_PIN3);
    375e:	83 e4       	ldi	r24, 0x43	; 67
    3760:	63 e0       	ldi	r22, 0x03	; 3
    3762:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    3766:	8e 83       	std	Y+6, r24	; 0x06
		Local_u8DataArr[4] = GPIO_xReadPortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4);
    3768:	83 e4       	ldi	r24, 0x43	; 67
    376a:	64 e0       	ldi	r22, 0x04	; 4
    376c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    3770:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8DataArr[5] = GPIO_xReadPortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5);
    3772:	83 e4       	ldi	r24, 0x43	; 67
    3774:	65 e0       	ldi	r22, 0x05	; 5
    3776:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    377a:	88 87       	std	Y+8, r24	; 0x08
		Local_u8DataArr[6] = GPIO_xReadPortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6);
    377c:	83 e4       	ldi	r24, 0x43	; 67
    377e:	66 e0       	ldi	r22, 0x06	; 6
    3780:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    3784:	89 87       	std	Y+9, r24	; 0x09
		Local_u8DataArr[7] = GPIO_xReadPortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7);
    3786:	83 e4       	ldi	r24, 0x43	; 67
    3788:	67 e0       	ldi	r22, 0x07	; 7
    378a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    378e:	8a 87       	std	Y+10, r24	; 0x0a
		for(Local_u8Index = 0;Local_u8Index < CHARSIZE;Local_u8Index++)
    3790:	19 82       	std	Y+1, r1	; 0x01
    3792:	39 c0       	rjmp	.+114    	; 0x3806 <LCD_xRecvByte+0x102>
		{
			if(Local_u8DataArr[Local_u8Index] == 0)
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	28 2f       	mov	r18, r24
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	ce 01       	movw	r24, r28
    379c:	03 96       	adiw	r24, 0x03	; 3
    379e:	fc 01       	movw	r30, r24
    37a0:	e2 0f       	add	r30, r18
    37a2:	f3 1f       	adc	r31, r19
    37a4:	80 81       	ld	r24, Z
    37a6:	88 23       	and	r24, r24
    37a8:	89 f4       	brne	.+34     	; 0x37cc <LCD_xRecvByte+0xc8>
			{
				CLEAR_BIT(Local_u8Data,Local_u8Index);
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	28 2f       	mov	r18, r24
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	02 2e       	mov	r0, r18
    37b6:	02 c0       	rjmp	.+4      	; 0x37bc <LCD_xRecvByte+0xb8>
    37b8:	88 0f       	add	r24, r24
    37ba:	99 1f       	adc	r25, r25
    37bc:	0a 94       	dec	r0
    37be:	e2 f7       	brpl	.-8      	; 0x37b8 <LCD_xRecvByte+0xb4>
    37c0:	98 2f       	mov	r25, r24
    37c2:	90 95       	com	r25
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	89 23       	and	r24, r25
    37c8:	8a 83       	std	Y+2, r24	; 0x02
    37ca:	1a c0       	rjmp	.+52     	; 0x3800 <LCD_xRecvByte+0xfc>
			}
			else if (Local_u8DataArr[Local_u8Index] == 1)
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	28 2f       	mov	r18, r24
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	ce 01       	movw	r24, r28
    37d4:	03 96       	adiw	r24, 0x03	; 3
    37d6:	fc 01       	movw	r30, r24
    37d8:	e2 0f       	add	r30, r18
    37da:	f3 1f       	adc	r31, r19
    37dc:	80 81       	ld	r24, Z
    37de:	81 30       	cpi	r24, 0x01	; 1
    37e0:	79 f4       	brne	.+30     	; 0x3800 <LCD_xRecvByte+0xfc>
			{
				SET_BIT(Local_u8Data,Local_u8Index);
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	28 2f       	mov	r18, r24
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	02 2e       	mov	r0, r18
    37ee:	02 c0       	rjmp	.+4      	; 0x37f4 <LCD_xRecvByte+0xf0>
    37f0:	88 0f       	add	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	0a 94       	dec	r0
    37f6:	e2 f7       	brpl	.-8      	; 0x37f0 <LCD_xRecvByte+0xec>
    37f8:	98 2f       	mov	r25, r24
    37fa:	8a 81       	ldd	r24, Y+2	; 0x02
    37fc:	89 2b       	or	r24, r25
    37fe:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8DataArr[3] = GPIO_xReadPortPin(LCD_DATA_PIN3_PORT,LCD_DATA_PIN3);
		Local_u8DataArr[4] = GPIO_xReadPortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4);
		Local_u8DataArr[5] = GPIO_xReadPortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5);
		Local_u8DataArr[6] = GPIO_xReadPortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6);
		Local_u8DataArr[7] = GPIO_xReadPortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7);
		for(Local_u8Index = 0;Local_u8Index < CHARSIZE;Local_u8Index++)
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	8f 5f       	subi	r24, 0xFF	; 255
    3804:	89 83       	std	Y+1, r24	; 0x01
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	87 30       	cpi	r24, 0x07	; 7
    380a:	20 f2       	brcs	.-120    	; 0x3794 <LCD_xRecvByte+0x90>
    380c:	6e c0       	rjmp	.+220    	; 0x38ea <LCD_xRecvByte+0x1e6>
			{
				/* No Action */
			}
		}
	}
	else if(LCD_4_pins == LCD_U8GET_CURRENT_WORD_LENGTH())
    380e:	80 91 69 04 	lds	r24, 0x0469
    3812:	88 23       	and	r24, r24
    3814:	09 f0       	breq	.+2      	; 0x3818 <LCD_xRecvByte+0x114>
    3816:	67 c0       	rjmp	.+206    	; 0x38e6 <LCD_xRecvByte+0x1e2>
	{
		/* Receive the upper nibble */
		Local_u8DataArr[0] = GPIO_xReadPortPin(LCD_DATA_PIN0_PORT,LCD_DATA_PIN4);
    3818:	83 e4       	ldi	r24, 0x43	; 67
    381a:	64 e0       	ldi	r22, 0x04	; 4
    381c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    3820:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8DataArr[1] = GPIO_xReadPortPin(LCD_DATA_PIN1_PORT,LCD_DATA_PIN5);
    3822:	83 e4       	ldi	r24, 0x43	; 67
    3824:	65 e0       	ldi	r22, 0x05	; 5
    3826:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    382a:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8DataArr[2] = GPIO_xReadPortPin(LCD_DATA_PIN2_PORT,LCD_DATA_PIN6);
    382c:	83 e4       	ldi	r24, 0x43	; 67
    382e:	66 e0       	ldi	r22, 0x06	; 6
    3830:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    3834:	8d 83       	std	Y+5, r24	; 0x05
		Local_u8DataArr[3] = GPIO_xReadPortPin(LCD_DATA_PIN3_PORT,LCD_DATA_PIN7);
    3836:	83 e4       	ldi	r24, 0x43	; 67
    3838:	67 e0       	ldi	r22, 0x07	; 7
    383a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    383e:	8e 83       	std	Y+6, r24	; 0x06

		/* Wait until LCD does the operations */
		LCD_CHECK_BUSY_FLAG();

		/* Receive the lower nibble */
		Local_u8DataArr[4] = GPIO_xReadPortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4);
    3840:	83 e4       	ldi	r24, 0x43	; 67
    3842:	64 e0       	ldi	r22, 0x04	; 4
    3844:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    3848:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8DataArr[5] = GPIO_xReadPortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5);
    384a:	83 e4       	ldi	r24, 0x43	; 67
    384c:	65 e0       	ldi	r22, 0x05	; 5
    384e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    3852:	88 87       	std	Y+8, r24	; 0x08
		Local_u8DataArr[6] = GPIO_xReadPortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6);
    3854:	83 e4       	ldi	r24, 0x43	; 67
    3856:	66 e0       	ldi	r22, 0x06	; 6
    3858:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    385c:	89 87       	std	Y+9, r24	; 0x09
		Local_u8DataArr[7] = GPIO_xReadPortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7);
    385e:	83 e4       	ldi	r24, 0x43	; 67
    3860:	67 e0       	ldi	r22, 0x07	; 7
    3862:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    3866:	8a 87       	std	Y+10, r24	; 0x0a
		for(Local_u8Index = 0;Local_u8Index < CHARSIZE;Local_u8Index++)
    3868:	19 82       	std	Y+1, r1	; 0x01
    386a:	39 c0       	rjmp	.+114    	; 0x38de <LCD_xRecvByte+0x1da>
		{
			if(Local_u8DataArr[Local_u8Index] == 0)
    386c:	89 81       	ldd	r24, Y+1	; 0x01
    386e:	28 2f       	mov	r18, r24
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	ce 01       	movw	r24, r28
    3874:	03 96       	adiw	r24, 0x03	; 3
    3876:	fc 01       	movw	r30, r24
    3878:	e2 0f       	add	r30, r18
    387a:	f3 1f       	adc	r31, r19
    387c:	80 81       	ld	r24, Z
    387e:	88 23       	and	r24, r24
    3880:	89 f4       	brne	.+34     	; 0x38a4 <LCD_xRecvByte+0x1a0>
			{
				CLEAR_BIT(Local_u8Data,Local_u8Index);
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	28 2f       	mov	r18, r24
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	02 2e       	mov	r0, r18
    388e:	02 c0       	rjmp	.+4      	; 0x3894 <LCD_xRecvByte+0x190>
    3890:	88 0f       	add	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	0a 94       	dec	r0
    3896:	e2 f7       	brpl	.-8      	; 0x3890 <LCD_xRecvByte+0x18c>
    3898:	98 2f       	mov	r25, r24
    389a:	90 95       	com	r25
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	89 23       	and	r24, r25
    38a0:	8a 83       	std	Y+2, r24	; 0x02
    38a2:	1a c0       	rjmp	.+52     	; 0x38d8 <LCD_xRecvByte+0x1d4>
			}
			else if (Local_u8DataArr[Local_u8Index] == 1)
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	28 2f       	mov	r18, r24
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	ce 01       	movw	r24, r28
    38ac:	03 96       	adiw	r24, 0x03	; 3
    38ae:	fc 01       	movw	r30, r24
    38b0:	e2 0f       	add	r30, r18
    38b2:	f3 1f       	adc	r31, r19
    38b4:	80 81       	ld	r24, Z
    38b6:	81 30       	cpi	r24, 0x01	; 1
    38b8:	79 f4       	brne	.+30     	; 0x38d8 <LCD_xRecvByte+0x1d4>
			{
				SET_BIT(Local_u8Data,Local_u8Index);
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	28 2f       	mov	r18, r24
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	02 2e       	mov	r0, r18
    38c6:	02 c0       	rjmp	.+4      	; 0x38cc <LCD_xRecvByte+0x1c8>
    38c8:	88 0f       	add	r24, r24
    38ca:	99 1f       	adc	r25, r25
    38cc:	0a 94       	dec	r0
    38ce:	e2 f7       	brpl	.-8      	; 0x38c8 <LCD_xRecvByte+0x1c4>
    38d0:	98 2f       	mov	r25, r24
    38d2:	8a 81       	ldd	r24, Y+2	; 0x02
    38d4:	89 2b       	or	r24, r25
    38d6:	8a 83       	std	Y+2, r24	; 0x02
		/* Receive the lower nibble */
		Local_u8DataArr[4] = GPIO_xReadPortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4);
		Local_u8DataArr[5] = GPIO_xReadPortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5);
		Local_u8DataArr[6] = GPIO_xReadPortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6);
		Local_u8DataArr[7] = GPIO_xReadPortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7);
		for(Local_u8Index = 0;Local_u8Index < CHARSIZE;Local_u8Index++)
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	8f 5f       	subi	r24, 0xFF	; 255
    38dc:	89 83       	std	Y+1, r24	; 0x01
    38de:	89 81       	ldd	r24, Y+1	; 0x01
    38e0:	87 30       	cpi	r24, 0x07	; 7
    38e2:	20 f2       	brcs	.-120    	; 0x386c <LCD_xRecvByte+0x168>
    38e4:	02 c0       	rjmp	.+4      	; 0x38ea <LCD_xRecvByte+0x1e6>
			}
		}
	}
	else
	{
		return E_NOK;
    38e6:	1e 86       	std	Y+14, r1	; 0x0e
    38e8:	06 c0       	rjmp	.+12     	; 0x38f6 <LCD_xRecvByte+0x1f2>
	}

	*pu8RecvData = Local_u8Data;
    38ea:	ec 85       	ldd	r30, Y+12	; 0x0c
    38ec:	fd 85       	ldd	r31, Y+13	; 0x0d
    38ee:	8a 81       	ldd	r24, Y+2	; 0x02
    38f0:	80 83       	st	Z, r24
	return E_OK;
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	8e 87       	std	Y+14, r24	; 0x0e
    38f6:	8e 85       	ldd	r24, Y+14	; 0x0e

}
    38f8:	2e 96       	adiw	r28, 0x0e	; 14
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	08 95       	ret

0000390a <LCD_vLatch>:
/* ***************************************************************************** */
static Error_Status LCD_vLatch(uint8 Copy_u8Data,uint8 Copy_u8DataType,uint8 Copy_u8Mode )
{
    390a:	df 93       	push	r29
    390c:	cf 93       	push	r28
    390e:	00 d0       	rcall	.+0      	; 0x3910 <LCD_vLatch+0x6>
    3910:	00 d0       	rcall	.+0      	; 0x3912 <LCD_vLatch+0x8>
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	6a 83       	std	Y+2, r22	; 0x02
    391a:	4b 83       	std	Y+3, r20	; 0x03
	if(LCD_8_pins==Copy_u8Mode)
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	81 30       	cpi	r24, 0x01	; 1
    3920:	09 f0       	breq	.+2      	; 0x3924 <LCD_vLatch+0x1a>
    3922:	54 c0       	rjmp	.+168    	; 0x39cc <LCD_vLatch+0xc2>
	{
		/* Send data to LCD port */
		GPIO_vWritePortPin(LCD_DATA_PIN0_PORT,LCD_DATA_PIN0,GET_BIT(Copy_u8Data,0));
    3924:	89 81       	ldd	r24, Y+1	; 0x01
    3926:	98 2f       	mov	r25, r24
    3928:	91 70       	andi	r25, 0x01	; 1
    392a:	83 e4       	ldi	r24, 0x43	; 67
    392c:	60 e0       	ldi	r22, 0x00	; 0
    392e:	49 2f       	mov	r20, r25
    3930:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		GPIO_vWritePortPin(LCD_DATA_PIN1_PORT,LCD_DATA_PIN1,GET_BIT(Copy_u8Data,1));
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	86 95       	lsr	r24
    3938:	98 2f       	mov	r25, r24
    393a:	91 70       	andi	r25, 0x01	; 1
    393c:	83 e4       	ldi	r24, 0x43	; 67
    393e:	61 e0       	ldi	r22, 0x01	; 1
    3940:	49 2f       	mov	r20, r25
    3942:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		GPIO_vWritePortPin(LCD_DATA_PIN2_PORT,LCD_DATA_PIN2,GET_BIT(Copy_u8Data,2));
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	86 95       	lsr	r24
    394a:	86 95       	lsr	r24
    394c:	98 2f       	mov	r25, r24
    394e:	91 70       	andi	r25, 0x01	; 1
    3950:	83 e4       	ldi	r24, 0x43	; 67
    3952:	62 e0       	ldi	r22, 0x02	; 2
    3954:	49 2f       	mov	r20, r25
    3956:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		GPIO_vWritePortPin(LCD_DATA_PIN3_PORT,LCD_DATA_PIN3,GET_BIT(Copy_u8Data,3));
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	86 95       	lsr	r24
    395e:	86 95       	lsr	r24
    3960:	86 95       	lsr	r24
    3962:	98 2f       	mov	r25, r24
    3964:	91 70       	andi	r25, 0x01	; 1
    3966:	83 e4       	ldi	r24, 0x43	; 67
    3968:	63 e0       	ldi	r22, 0x03	; 3
    396a:	49 2f       	mov	r20, r25
    396c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		GPIO_vWritePortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4,GET_BIT(Copy_u8Data,4));
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	82 95       	swap	r24
    3974:	8f 70       	andi	r24, 0x0F	; 15
    3976:	98 2f       	mov	r25, r24
    3978:	91 70       	andi	r25, 0x01	; 1
    397a:	83 e4       	ldi	r24, 0x43	; 67
    397c:	64 e0       	ldi	r22, 0x04	; 4
    397e:	49 2f       	mov	r20, r25
    3980:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		GPIO_vWritePortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5,GET_BIT(Copy_u8Data,5));
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	82 95       	swap	r24
    3988:	86 95       	lsr	r24
    398a:	87 70       	andi	r24, 0x07	; 7
    398c:	98 2f       	mov	r25, r24
    398e:	91 70       	andi	r25, 0x01	; 1
    3990:	83 e4       	ldi	r24, 0x43	; 67
    3992:	65 e0       	ldi	r22, 0x05	; 5
    3994:	49 2f       	mov	r20, r25
    3996:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		GPIO_vWritePortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6,GET_BIT(Copy_u8Data,6));
    399a:	89 81       	ldd	r24, Y+1	; 0x01
    399c:	82 95       	swap	r24
    399e:	86 95       	lsr	r24
    39a0:	86 95       	lsr	r24
    39a2:	83 70       	andi	r24, 0x03	; 3
    39a4:	98 2f       	mov	r25, r24
    39a6:	91 70       	andi	r25, 0x01	; 1
    39a8:	83 e4       	ldi	r24, 0x43	; 67
    39aa:	66 e0       	ldi	r22, 0x06	; 6
    39ac:	49 2f       	mov	r20, r25
    39ae:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		GPIO_vWritePortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7,GET_BIT(Copy_u8Data,7));
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	98 2f       	mov	r25, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	99 27       	eor	r25, r25
    39ba:	99 1f       	adc	r25, r25
    39bc:	83 e4       	ldi	r24, 0x43	; 67
    39be:	67 e0       	ldi	r22, 0x07	; 7
    39c0:	49 2f       	mov	r20, r25
    39c2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>

		/* Enable LCD */
		LCD_vSendPulse();
    39c6:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <LCD_vSendPulse>
    39ca:	d4 c0       	rjmp	.+424    	; 0x3b74 <LCD_vLatch+0x26a>
	}
	else if(LCD_4_pins==Copy_u8Mode)
    39cc:	8b 81       	ldd	r24, Y+3	; 0x03
    39ce:	88 23       	and	r24, r24
    39d0:	09 f0       	breq	.+2      	; 0x39d4 <LCD_vLatch+0xca>
    39d2:	ce c0       	rjmp	.+412    	; 0x3b70 <LCD_vLatch+0x266>
	{
		/*Send upper nibble*/
		GPIO_vWritePortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4,GET_BIT(Copy_u8Data,4));
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	82 95       	swap	r24
    39d8:	8f 70       	andi	r24, 0x0F	; 15
    39da:	98 2f       	mov	r25, r24
    39dc:	91 70       	andi	r25, 0x01	; 1
    39de:	83 e4       	ldi	r24, 0x43	; 67
    39e0:	64 e0       	ldi	r22, 0x04	; 4
    39e2:	49 2f       	mov	r20, r25
    39e4:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		GPIO_vWritePortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5,GET_BIT(Copy_u8Data,5));
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	82 95       	swap	r24
    39ec:	86 95       	lsr	r24
    39ee:	87 70       	andi	r24, 0x07	; 7
    39f0:	98 2f       	mov	r25, r24
    39f2:	91 70       	andi	r25, 0x01	; 1
    39f4:	83 e4       	ldi	r24, 0x43	; 67
    39f6:	65 e0       	ldi	r22, 0x05	; 5
    39f8:	49 2f       	mov	r20, r25
    39fa:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		GPIO_vWritePortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6,GET_BIT(Copy_u8Data,6));
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	82 95       	swap	r24
    3a02:	86 95       	lsr	r24
    3a04:	86 95       	lsr	r24
    3a06:	83 70       	andi	r24, 0x03	; 3
    3a08:	98 2f       	mov	r25, r24
    3a0a:	91 70       	andi	r25, 0x01	; 1
    3a0c:	83 e4       	ldi	r24, 0x43	; 67
    3a0e:	66 e0       	ldi	r22, 0x06	; 6
    3a10:	49 2f       	mov	r20, r25
    3a12:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		GPIO_vWritePortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7,GET_BIT(Copy_u8Data,7));
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	98 2f       	mov	r25, r24
    3a1a:	99 1f       	adc	r25, r25
    3a1c:	99 27       	eor	r25, r25
    3a1e:	99 1f       	adc	r25, r25
    3a20:	83 e4       	ldi	r24, 0x43	; 67
    3a22:	67 e0       	ldi	r22, 0x07	; 7
    3a24:	49 2f       	mov	r20, r25
    3a26:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
		/* Enable LCD */
		LCD_vSendPulse();
    3a2a:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <LCD_vSendPulse>

		if(GET_BIT(Copy_u8Data,5) == 1 && GET_BIT(Copy_u8Data,6) == 0 && GET_BIT(Copy_u8Data,7) == 0 && LCD_SEND_COMMAND == Copy_u8DataType)
    3a2e:	89 81       	ldd	r24, Y+1	; 0x01
    3a30:	82 95       	swap	r24
    3a32:	86 95       	lsr	r24
    3a34:	87 70       	andi	r24, 0x07	; 7
    3a36:	88 2f       	mov	r24, r24
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	81 70       	andi	r24, 0x01	; 1
    3a3c:	90 70       	andi	r25, 0x00	; 0
    3a3e:	98 2f       	mov	r25, r24
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	89 27       	eor	r24, r25
    3a44:	88 23       	and	r24, r24
    3a46:	09 f0       	breq	.+2      	; 0x3a4a <LCD_vLatch+0x140>
    3a48:	6a c0       	rjmp	.+212    	; 0x3b1e <LCD_vLatch+0x214>
    3a4a:	89 81       	ldd	r24, Y+1	; 0x01
    3a4c:	82 95       	swap	r24
    3a4e:	86 95       	lsr	r24
    3a50:	86 95       	lsr	r24
    3a52:	83 70       	andi	r24, 0x03	; 3
    3a54:	88 2f       	mov	r24, r24
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	81 70       	andi	r24, 0x01	; 1
    3a5a:	90 70       	andi	r25, 0x00	; 0
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	09 f0       	breq	.+2      	; 0x3a62 <LCD_vLatch+0x158>
    3a60:	5e c0       	rjmp	.+188    	; 0x3b1e <LCD_vLatch+0x214>
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	88 23       	and	r24, r24
    3a66:	0c f4       	brge	.+2      	; 0x3a6a <LCD_vLatch+0x160>
    3a68:	5a c0       	rjmp	.+180    	; 0x3b1e <LCD_vLatch+0x214>
    3a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6c:	81 30       	cpi	r24, 0x01	; 1
    3a6e:	09 f0       	breq	.+2      	; 0x3a72 <LCD_vLatch+0x168>
    3a70:	56 c0       	rjmp	.+172    	; 0x3b1e <LCD_vLatch+0x214>
		{
			/*Send upper nibble*/
			GPIO_vWritePortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4,GET_BIT(Copy_u8Data,4));
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	82 95       	swap	r24
    3a76:	8f 70       	andi	r24, 0x0F	; 15
    3a78:	98 2f       	mov	r25, r24
    3a7a:	91 70       	andi	r25, 0x01	; 1
    3a7c:	83 e4       	ldi	r24, 0x43	; 67
    3a7e:	64 e0       	ldi	r22, 0x04	; 4
    3a80:	49 2f       	mov	r20, r25
    3a82:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			GPIO_vWritePortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5,GET_BIT(Copy_u8Data,5));
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	82 95       	swap	r24
    3a8a:	86 95       	lsr	r24
    3a8c:	87 70       	andi	r24, 0x07	; 7
    3a8e:	98 2f       	mov	r25, r24
    3a90:	91 70       	andi	r25, 0x01	; 1
    3a92:	83 e4       	ldi	r24, 0x43	; 67
    3a94:	65 e0       	ldi	r22, 0x05	; 5
    3a96:	49 2f       	mov	r20, r25
    3a98:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			GPIO_vWritePortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6,GET_BIT(Copy_u8Data,6));
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	82 95       	swap	r24
    3aa0:	86 95       	lsr	r24
    3aa2:	86 95       	lsr	r24
    3aa4:	83 70       	andi	r24, 0x03	; 3
    3aa6:	98 2f       	mov	r25, r24
    3aa8:	91 70       	andi	r25, 0x01	; 1
    3aaa:	83 e4       	ldi	r24, 0x43	; 67
    3aac:	66 e0       	ldi	r22, 0x06	; 6
    3aae:	49 2f       	mov	r20, r25
    3ab0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			GPIO_vWritePortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7,GET_BIT(Copy_u8Data,7));
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	98 2f       	mov	r25, r24
    3ab8:	99 1f       	adc	r25, r25
    3aba:	99 27       	eor	r25, r25
    3abc:	99 1f       	adc	r25, r25
    3abe:	83 e4       	ldi	r24, 0x43	; 67
    3ac0:	67 e0       	ldi	r22, 0x07	; 7
    3ac2:	49 2f       	mov	r20, r25
    3ac4:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			/* Enable LCD */
			LCD_vSendPulse();
    3ac8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <LCD_vSendPulse>

			/*send lower nibble*/
			GPIO_vWritePortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4,GET_BIT(Copy_u8Data,0));
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
    3ace:	98 2f       	mov	r25, r24
    3ad0:	91 70       	andi	r25, 0x01	; 1
    3ad2:	83 e4       	ldi	r24, 0x43	; 67
    3ad4:	64 e0       	ldi	r22, 0x04	; 4
    3ad6:	49 2f       	mov	r20, r25
    3ad8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			GPIO_vWritePortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5,GET_BIT(Copy_u8Data,1));
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	86 95       	lsr	r24
    3ae0:	98 2f       	mov	r25, r24
    3ae2:	91 70       	andi	r25, 0x01	; 1
    3ae4:	83 e4       	ldi	r24, 0x43	; 67
    3ae6:	65 e0       	ldi	r22, 0x05	; 5
    3ae8:	49 2f       	mov	r20, r25
    3aea:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			GPIO_vWritePortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6,GET_BIT(Copy_u8Data,2));
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	86 95       	lsr	r24
    3af2:	86 95       	lsr	r24
    3af4:	98 2f       	mov	r25, r24
    3af6:	91 70       	andi	r25, 0x01	; 1
    3af8:	83 e4       	ldi	r24, 0x43	; 67
    3afa:	66 e0       	ldi	r22, 0x06	; 6
    3afc:	49 2f       	mov	r20, r25
    3afe:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			GPIO_vWritePortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7,GET_BIT(Copy_u8Data,3));
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	86 95       	lsr	r24
    3b06:	86 95       	lsr	r24
    3b08:	86 95       	lsr	r24
    3b0a:	98 2f       	mov	r25, r24
    3b0c:	91 70       	andi	r25, 0x01	; 1
    3b0e:	83 e4       	ldi	r24, 0x43	; 67
    3b10:	67 e0       	ldi	r22, 0x07	; 7
    3b12:	49 2f       	mov	r20, r25
    3b14:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			/* Enable LCD */
			LCD_vSendPulse();
    3b18:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <LCD_vSendPulse>
    3b1c:	2b c0       	rjmp	.+86     	; 0x3b74 <LCD_vLatch+0x26a>

		}
		else
		{
			/*send lower nibble*/
			GPIO_vWritePortPin(LCD_DATA_PIN4_PORT,LCD_DATA_PIN4,GET_BIT(Copy_u8Data,0));
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	98 2f       	mov	r25, r24
    3b22:	91 70       	andi	r25, 0x01	; 1
    3b24:	83 e4       	ldi	r24, 0x43	; 67
    3b26:	64 e0       	ldi	r22, 0x04	; 4
    3b28:	49 2f       	mov	r20, r25
    3b2a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			GPIO_vWritePortPin(LCD_DATA_PIN5_PORT,LCD_DATA_PIN5,GET_BIT(Copy_u8Data,1));
    3b2e:	89 81       	ldd	r24, Y+1	; 0x01
    3b30:	86 95       	lsr	r24
    3b32:	98 2f       	mov	r25, r24
    3b34:	91 70       	andi	r25, 0x01	; 1
    3b36:	83 e4       	ldi	r24, 0x43	; 67
    3b38:	65 e0       	ldi	r22, 0x05	; 5
    3b3a:	49 2f       	mov	r20, r25
    3b3c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			GPIO_vWritePortPin(LCD_DATA_PIN6_PORT,LCD_DATA_PIN6,GET_BIT(Copy_u8Data,2));
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	86 95       	lsr	r24
    3b44:	86 95       	lsr	r24
    3b46:	98 2f       	mov	r25, r24
    3b48:	91 70       	andi	r25, 0x01	; 1
    3b4a:	83 e4       	ldi	r24, 0x43	; 67
    3b4c:	66 e0       	ldi	r22, 0x06	; 6
    3b4e:	49 2f       	mov	r20, r25
    3b50:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			GPIO_vWritePortPin(LCD_DATA_PIN7_PORT,LCD_DATA_PIN7,GET_BIT(Copy_u8Data,3));
    3b54:	89 81       	ldd	r24, Y+1	; 0x01
    3b56:	86 95       	lsr	r24
    3b58:	86 95       	lsr	r24
    3b5a:	86 95       	lsr	r24
    3b5c:	98 2f       	mov	r25, r24
    3b5e:	91 70       	andi	r25, 0x01	; 1
    3b60:	83 e4       	ldi	r24, 0x43	; 67
    3b62:	67 e0       	ldi	r22, 0x07	; 7
    3b64:	49 2f       	mov	r20, r25
    3b66:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
			/* Enable LCD */
			LCD_vSendPulse();
    3b6a:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <LCD_vSendPulse>
    3b6e:	02 c0       	rjmp	.+4      	; 0x3b74 <LCD_vLatch+0x26a>
		}
	}
	else
	{
		return E_NOK;
    3b70:	1c 82       	std	Y+4, r1	; 0x04
    3b72:	02 c0       	rjmp	.+4      	; 0x3b78 <LCD_vLatch+0x26e>
	}

	return E_OK;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	8c 83       	std	Y+4, r24	; 0x04
    3b78:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	cf 91       	pop	r28
    3b84:	df 91       	pop	r29
    3b86:	08 95       	ret

00003b88 <LCD_vSendPulse>:

/* ***************************************************************************** */

static void LCD_vSendPulse(void)
{
    3b88:	df 93       	push	r29
    3b8a:	cf 93       	push	r28
    3b8c:	cd b7       	in	r28, 0x3d	; 61
    3b8e:	de b7       	in	r29, 0x3e	; 62
    3b90:	6c 97       	sbiw	r28, 0x1c	; 28
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
	GPIO_vWritePortPin(LCD_E_PIN_PORT,LCD_E_PIN,GPIO_HIGH);
    3b9c:	84 e4       	ldi	r24, 0x44	; 68
    3b9e:	60 e0       	ldi	r22, 0x00	; 0
    3ba0:	41 e0       	ldi	r20, 0x01	; 1
    3ba2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	a0 e8       	ldi	r26, 0x80	; 128
    3bac:	bf e3       	ldi	r27, 0x3F	; 63
    3bae:	89 8f       	std	Y+25, r24	; 0x19
    3bb0:	9a 8f       	std	Y+26, r25	; 0x1a
    3bb2:	ab 8f       	std	Y+27, r26	; 0x1b
    3bb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb6:	69 8d       	ldd	r22, Y+25	; 0x19
    3bb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	4a ef       	ldi	r20, 0xFA	; 250
    3bc4:	54 e4       	ldi	r21, 0x44	; 68
    3bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	8d 8b       	std	Y+21, r24	; 0x15
    3bd0:	9e 8b       	std	Y+22, r25	; 0x16
    3bd2:	af 8b       	std	Y+23, r26	; 0x17
    3bd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bda:	8f 89       	ldd	r24, Y+23	; 0x17
    3bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 e8       	ldi	r20, 0x80	; 128
    3be4:	5f e3       	ldi	r21, 0x3F	; 63
    3be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bea:	88 23       	and	r24, r24
    3bec:	2c f4       	brge	.+10     	; 0x3bf8 <LCD_vSendPulse+0x70>
		__ticks = 1;
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	9c 8b       	std	Y+20, r25	; 0x14
    3bf4:	8b 8b       	std	Y+19, r24	; 0x13
    3bf6:	3f c0       	rjmp	.+126    	; 0x3c76 <LCD_vSendPulse+0xee>
	else if (__tmp > 65535)
    3bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    3bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    3bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    3bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	3f ef       	ldi	r19, 0xFF	; 255
    3c04:	4f e7       	ldi	r20, 0x7F	; 127
    3c06:	57 e4       	ldi	r21, 0x47	; 71
    3c08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c0c:	18 16       	cp	r1, r24
    3c0e:	4c f5       	brge	.+82     	; 0x3c62 <LCD_vSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c10:	69 8d       	ldd	r22, Y+25	; 0x19
    3c12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	40 e2       	ldi	r20, 0x20	; 32
    3c1e:	51 e4       	ldi	r21, 0x41	; 65
    3c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	bc 01       	movw	r22, r24
    3c2a:	cd 01       	movw	r24, r26
    3c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	9c 8b       	std	Y+20, r25	; 0x14
    3c36:	8b 8b       	std	Y+19, r24	; 0x13
    3c38:	0f c0       	rjmp	.+30     	; 0x3c58 <LCD_vSendPulse+0xd0>
    3c3a:	88 ec       	ldi	r24, 0xC8	; 200
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	9a 8b       	std	Y+18, r25	; 0x12
    3c40:	89 8b       	std	Y+17, r24	; 0x11
    3c42:	89 89       	ldd	r24, Y+17	; 0x11
    3c44:	9a 89       	ldd	r25, Y+18	; 0x12
    3c46:	01 97       	sbiw	r24, 0x01	; 1
    3c48:	f1 f7       	brne	.-4      	; 0x3c46 <LCD_vSendPulse+0xbe>
    3c4a:	9a 8b       	std	Y+18, r25	; 0x12
    3c4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c50:	9c 89       	ldd	r25, Y+20	; 0x14
    3c52:	01 97       	sbiw	r24, 0x01	; 1
    3c54:	9c 8b       	std	Y+20, r25	; 0x14
    3c56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c58:	8b 89       	ldd	r24, Y+19	; 0x13
    3c5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c5c:	00 97       	sbiw	r24, 0x00	; 0
    3c5e:	69 f7       	brne	.-38     	; 0x3c3a <LCD_vSendPulse+0xb2>
    3c60:	14 c0       	rjmp	.+40     	; 0x3c8a <LCD_vSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c62:	6d 89       	ldd	r22, Y+21	; 0x15
    3c64:	7e 89       	ldd	r23, Y+22	; 0x16
    3c66:	8f 89       	ldd	r24, Y+23	; 0x17
    3c68:	98 8d       	ldd	r25, Y+24	; 0x18
    3c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	9c 8b       	std	Y+20, r25	; 0x14
    3c74:	8b 8b       	std	Y+19, r24	; 0x13
    3c76:	8b 89       	ldd	r24, Y+19	; 0x13
    3c78:	9c 89       	ldd	r25, Y+20	; 0x14
    3c7a:	98 8b       	std	Y+16, r25	; 0x10
    3c7c:	8f 87       	std	Y+15, r24	; 0x0f
    3c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c80:	98 89       	ldd	r25, Y+16	; 0x10
    3c82:	01 97       	sbiw	r24, 0x01	; 1
    3c84:	f1 f7       	brne	.-4      	; 0x3c82 <LCD_vSendPulse+0xfa>
    3c86:	98 8b       	std	Y+16, r25	; 0x10
    3c88:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_DELAY_MS(1);
	GPIO_vWritePortPin(LCD_E_PIN_PORT,LCD_E_PIN,GPIO_LOW);
    3c8a:	84 e4       	ldi	r24, 0x44	; 68
    3c8c:	60 e0       	ldi	r22, 0x00	; 0
    3c8e:	40 e0       	ldi	r20, 0x00	; 0
    3c90:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	a0 e8       	ldi	r26, 0x80	; 128
    3c9a:	bf e3       	ldi	r27, 0x3F	; 63
    3c9c:	8b 87       	std	Y+11, r24	; 0x0b
    3c9e:	9c 87       	std	Y+12, r25	; 0x0c
    3ca0:	ad 87       	std	Y+13, r26	; 0x0d
    3ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	4a ef       	ldi	r20, 0xFA	; 250
    3cb2:	54 e4       	ldi	r21, 0x44	; 68
    3cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	8f 83       	std	Y+7, r24	; 0x07
    3cbe:	98 87       	std	Y+8, r25	; 0x08
    3cc0:	a9 87       	std	Y+9, r26	; 0x09
    3cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc6:	78 85       	ldd	r23, Y+8	; 0x08
    3cc8:	89 85       	ldd	r24, Y+9	; 0x09
    3cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	40 e8       	ldi	r20, 0x80	; 128
    3cd2:	5f e3       	ldi	r21, 0x3F	; 63
    3cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cd8:	88 23       	and	r24, r24
    3cda:	2c f4       	brge	.+10     	; 0x3ce6 <LCD_vSendPulse+0x15e>
		__ticks = 1;
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	9e 83       	std	Y+6, r25	; 0x06
    3ce2:	8d 83       	std	Y+5, r24	; 0x05
    3ce4:	3f c0       	rjmp	.+126    	; 0x3d64 <LCD_vSendPulse+0x1dc>
	else if (__tmp > 65535)
    3ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce8:	78 85       	ldd	r23, Y+8	; 0x08
    3cea:	89 85       	ldd	r24, Y+9	; 0x09
    3cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	3f ef       	ldi	r19, 0xFF	; 255
    3cf2:	4f e7       	ldi	r20, 0x7F	; 127
    3cf4:	57 e4       	ldi	r21, 0x47	; 71
    3cf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cfa:	18 16       	cp	r1, r24
    3cfc:	4c f5       	brge	.+82     	; 0x3d50 <LCD_vSendPulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e2       	ldi	r20, 0x20	; 32
    3d0c:	51 e4       	ldi	r21, 0x41	; 65
    3d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	bc 01       	movw	r22, r24
    3d18:	cd 01       	movw	r24, r26
    3d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	9e 83       	std	Y+6, r25	; 0x06
    3d24:	8d 83       	std	Y+5, r24	; 0x05
    3d26:	0f c0       	rjmp	.+30     	; 0x3d46 <LCD_vSendPulse+0x1be>
    3d28:	88 ec       	ldi	r24, 0xC8	; 200
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	9c 83       	std	Y+4, r25	; 0x04
    3d2e:	8b 83       	std	Y+3, r24	; 0x03
    3d30:	8b 81       	ldd	r24, Y+3	; 0x03
    3d32:	9c 81       	ldd	r25, Y+4	; 0x04
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	f1 f7       	brne	.-4      	; 0x3d34 <LCD_vSendPulse+0x1ac>
    3d38:	9c 83       	std	Y+4, r25	; 0x04
    3d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d40:	01 97       	sbiw	r24, 0x01	; 1
    3d42:	9e 83       	std	Y+6, r25	; 0x06
    3d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d46:	8d 81       	ldd	r24, Y+5	; 0x05
    3d48:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	69 f7       	brne	.-38     	; 0x3d28 <LCD_vSendPulse+0x1a0>
    3d4e:	14 c0       	rjmp	.+40     	; 0x3d78 <LCD_vSendPulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d50:	6f 81       	ldd	r22, Y+7	; 0x07
    3d52:	78 85       	ldd	r23, Y+8	; 0x08
    3d54:	89 85       	ldd	r24, Y+9	; 0x09
    3d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	9e 83       	std	Y+6, r25	; 0x06
    3d62:	8d 83       	std	Y+5, r24	; 0x05
    3d64:	8d 81       	ldd	r24, Y+5	; 0x05
    3d66:	9e 81       	ldd	r25, Y+6	; 0x06
    3d68:	9a 83       	std	Y+2, r25	; 0x02
    3d6a:	89 83       	std	Y+1, r24	; 0x01
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	f1 f7       	brne	.-4      	; 0x3d70 <LCD_vSendPulse+0x1e8>
    3d74:	9a 83       	std	Y+2, r25	; 0x02
    3d76:	89 83       	std	Y+1, r24	; 0x01
	LCD_DELAY_MS(1);
}
    3d78:	6c 96       	adiw	r28, 0x1c	; 28
    3d7a:	0f b6       	in	r0, 0x3f	; 63
    3d7c:	f8 94       	cli
    3d7e:	de bf       	out	0x3e, r29	; 62
    3d80:	0f be       	out	0x3f, r0	; 63
    3d82:	cd bf       	out	0x3d, r28	; 61
    3d84:	cf 91       	pop	r28
    3d86:	df 91       	pop	r29
    3d88:	08 95       	ret

00003d8a <LCD_vSendString>:

/* ***************************************************************************** */

void LCD_vSendString(uint8 *Copy_u8String)
{
    3d8a:	df 93       	push	r29
    3d8c:	cf 93       	push	r28
    3d8e:	00 d0       	rcall	.+0      	; 0x3d90 <LCD_vSendString+0x6>
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
    3d94:	9a 83       	std	Y+2, r25	; 0x02
    3d96:	89 83       	std	Y+1, r24	; 0x01
    3d98:	0a c0       	rjmp	.+20     	; 0x3dae <LCD_vSendString+0x24>
	while (*Copy_u8String != '\0')
	{
		LCD_xSendByte(*Copy_u8String);
    3d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d9e:	80 81       	ld	r24, Z
    3da0:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <LCD_xSendByte>
		Copy_u8String++;
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	9a 81       	ldd	r25, Y+2	; 0x02
    3da8:	01 96       	adiw	r24, 0x01	; 1
    3daa:	9a 83       	std	Y+2, r25	; 0x02
    3dac:	89 83       	std	Y+1, r24	; 0x01

/* ***************************************************************************** */

void LCD_vSendString(uint8 *Copy_u8String)
{
	while (*Copy_u8String != '\0')
    3dae:	e9 81       	ldd	r30, Y+1	; 0x01
    3db0:	fa 81       	ldd	r31, Y+2	; 0x02
    3db2:	80 81       	ld	r24, Z
    3db4:	88 23       	and	r24, r24
    3db6:	89 f7       	brne	.-30     	; 0x3d9a <LCD_vSendString+0x10>
	{
		LCD_xSendByte(*Copy_u8String);
		Copy_u8String++;
	}
}
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0
    3dbc:	cf 91       	pop	r28
    3dbe:	df 91       	pop	r29
    3dc0:	08 95       	ret

00003dc2 <LCD_xGotoPosition>:

/* ***************************************************************************** */

Error_Status LCD_xGotoPosition(uint8 Copy_u8Line_Position, uint8 Copy_u8Col_Position)
{
    3dc2:	df 93       	push	r29
    3dc4:	cf 93       	push	r28
    3dc6:	00 d0       	rcall	.+0      	; 0x3dc8 <LCD_xGotoPosition+0x6>
    3dc8:	0f 92       	push	r0
    3dca:	cd b7       	in	r28, 0x3d	; 61
    3dcc:	de b7       	in	r29, 0x3e	; 62
    3dce:	89 83       	std	Y+1, r24	; 0x01
    3dd0:	6a 83       	std	Y+2, r22	; 0x02
	if(LCD_IS_FIRST_LINE(Copy_u8Line_Position) == E_OK)
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	88 23       	and	r24, r24
    3dd6:	29 f4       	brne	.+10     	; 0x3de2 <LCD_xGotoPosition+0x20>
	{
		LCD_xSendComand((LCD_SET_DDRAM_ADDRESS | LCD_FIRST_LINE) + Copy_u8Col_Position);
    3dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dda:	80 58       	subi	r24, 0x80	; 128
    3ddc:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>
    3de0:	1a c0       	rjmp	.+52     	; 0x3e16 <LCD_xGotoPosition+0x54>
	}
	else if(LCD_IS_SECOND_LINE(Copy_u8Line_Position) == E_OK)
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	81 30       	cpi	r24, 0x01	; 1
    3de6:	29 f4       	brne	.+10     	; 0x3df2 <LCD_xGotoPosition+0x30>
	{
		LCD_xSendComand((LCD_SET_DDRAM_ADDRESS | LCD_SECOND_LINE) + Copy_u8Col_Position);
    3de8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dea:	80 54       	subi	r24, 0x40	; 64
    3dec:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>
    3df0:	12 c0       	rjmp	.+36     	; 0x3e16 <LCD_xGotoPosition+0x54>
	}
	else if(LCD_IS_THIRD_LINE(Copy_u8Line_Position) == E_OK)
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	82 30       	cpi	r24, 0x02	; 2
    3df6:	29 f4       	brne	.+10     	; 0x3e02 <LCD_xGotoPosition+0x40>
	{
		LCD_xSendComand((LCD_SET_DDRAM_ADDRESS | LCD_THIRD_LINE) + Copy_u8Col_Position);
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	80 57       	subi	r24, 0x70	; 112
    3dfc:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>
    3e00:	0a c0       	rjmp	.+20     	; 0x3e16 <LCD_xGotoPosition+0x54>
	}
	else if(LCD_IS_FOURTH_LINE(Copy_u8Line_Position) == E_OK)
    3e02:	89 81       	ldd	r24, Y+1	; 0x01
    3e04:	83 30       	cpi	r24, 0x03	; 3
    3e06:	29 f4       	brne	.+10     	; 0x3e12 <LCD_xGotoPosition+0x50>
	{
		LCD_xSendComand((LCD_SET_DDRAM_ADDRESS | LCD_FOURTH_LINE) + Copy_u8Col_Position);
    3e08:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0a:	80 53       	subi	r24, 0x30	; 48
    3e0c:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>
    3e10:	02 c0       	rjmp	.+4      	; 0x3e16 <LCD_xGotoPosition+0x54>
	}
	else
	{
		return E_NOK;
    3e12:	1b 82       	std	Y+3, r1	; 0x03
    3e14:	02 c0       	rjmp	.+4      	; 0x3e1a <LCD_xGotoPosition+0x58>
	}

	return E_OK;
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	8b 83       	std	Y+3, r24	; 0x03
    3e1a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	cf 91       	pop	r28
    3e24:	df 91       	pop	r29
    3e26:	08 95       	ret

00003e28 <LCD_vSendInt>:
/* ***************************************************************************** */
void LCD_vSendInt(sint32 Copy_s32Num)
{
    3e28:	df 93       	push	r29
    3e2a:	cf 93       	push	r28
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	64 97       	sbiw	r28, 0x14	; 20
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	cd bf       	out	0x3d, r28	; 61
    3e3c:	69 8b       	std	Y+17, r22	; 0x11
    3e3e:	7a 8b       	std	Y+18, r23	; 0x12
    3e40:	8b 8b       	std	Y+19, r24	; 0x13
    3e42:	9c 8b       	std	Y+20, r25	; 0x14
	uint8 Local_u8NumBufferp[LCD_N_COLS] = {0};
    3e44:	80 e1       	ldi	r24, 0x10	; 16
    3e46:	fe 01       	movw	r30, r28
    3e48:	31 96       	adiw	r30, 0x01	; 1
    3e4a:	df 01       	movw	r26, r30
    3e4c:	98 2f       	mov	r25, r24
    3e4e:	1d 92       	st	X+, r1
    3e50:	9a 95       	dec	r25
    3e52:	e9 f7       	brne	.-6      	; 0x3e4e <LCD_vSendInt+0x26>
	Util_String_vNumtoStr(Copy_s32Num,Local_u8NumBufferp);
    3e54:	89 89       	ldd	r24, Y+17	; 0x11
    3e56:	9a 89       	ldd	r25, Y+18	; 0x12
    3e58:	ab 89       	ldd	r26, Y+19	; 0x13
    3e5a:	bc 89       	ldd	r27, Y+20	; 0x14
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	cd 01       	movw	r24, r26
    3e60:	9e 01       	movw	r18, r28
    3e62:	2f 5f       	subi	r18, 0xFF	; 255
    3e64:	3f 4f       	sbci	r19, 0xFF	; 255
    3e66:	a9 01       	movw	r20, r18
    3e68:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <Util_String_vNumtoStr>
	LCD_vSendString(Local_u8NumBufferp);
    3e6c:	ce 01       	movw	r24, r28
    3e6e:	01 96       	adiw	r24, 0x01	; 1
    3e70:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
}
    3e74:	64 96       	adiw	r28, 0x14	; 20
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	cf 91       	pop	r28
    3e82:	df 91       	pop	r29
    3e84:	08 95       	ret

00003e86 <LCD_vSendFloat>:

/* ***************************************************************************** */

void LCD_vSendFloat(float32 Copy_f32Num, uint8 Copy_u8N_NumbersAfterFPonit)
{
    3e86:	df 93       	push	r29
    3e88:	cf 93       	push	r28
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	65 97       	sbiw	r28, 0x15	; 21
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	cd bf       	out	0x3d, r28	; 61
    3e9a:	69 8b       	std	Y+17, r22	; 0x11
    3e9c:	7a 8b       	std	Y+18, r23	; 0x12
    3e9e:	8b 8b       	std	Y+19, r24	; 0x13
    3ea0:	9c 8b       	std	Y+20, r25	; 0x14
    3ea2:	4d 8b       	std	Y+21, r20	; 0x15
	uint8 Local_u8NumBufferp[LCD_N_COLS] = {0};
    3ea4:	80 e1       	ldi	r24, 0x10	; 16
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	31 96       	adiw	r30, 0x01	; 1
    3eaa:	df 01       	movw	r26, r30
    3eac:	98 2f       	mov	r25, r24
    3eae:	1d 92       	st	X+, r1
    3eb0:	9a 95       	dec	r25
    3eb2:	e9 f7       	brne	.-6      	; 0x3eae <LCD_vSendFloat+0x28>
	Util_String_vFloatToStr(Copy_f32Num,Local_u8NumBufferp,Copy_u8N_NumbersAfterFPonit);
    3eb4:	89 89       	ldd	r24, Y+17	; 0x11
    3eb6:	9a 89       	ldd	r25, Y+18	; 0x12
    3eb8:	ab 89       	ldd	r26, Y+19	; 0x13
    3eba:	bc 89       	ldd	r27, Y+20	; 0x14
    3ebc:	bc 01       	movw	r22, r24
    3ebe:	cd 01       	movw	r24, r26
    3ec0:	9e 01       	movw	r18, r28
    3ec2:	2f 5f       	subi	r18, 0xFF	; 255
    3ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec6:	a9 01       	movw	r20, r18
    3ec8:	2d 89       	ldd	r18, Y+21	; 0x15
    3eca:	0e 94 a1 28 	call	0x5142	; 0x5142 <Util_String_vFloatToStr>
	LCD_vSendString(Local_u8NumBufferp);
    3ece:	ce 01       	movw	r24, r28
    3ed0:	01 96       	adiw	r24, 0x01	; 1
    3ed2:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_vSendString>
}
    3ed6:	65 96       	adiw	r28, 0x15	; 21
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	de bf       	out	0x3e, r29	; 62
    3ede:	0f be       	out	0x3f, r0	; 63
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <LCD_vClear>:
/* ***************************************************************************** */
void LCD_vClear(void)
{
    3ee8:	df 93       	push	r29
    3eea:	cf 93       	push	r28
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
	LCD_xSendComand(LCD_CLR);
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>
}
    3ef6:	cf 91       	pop	r28
    3ef8:	df 91       	pop	r29
    3efa:	08 95       	ret

00003efc <LCD_vReturnHome>:

/* ***************************************************************************** */

void LCD_vReturnHome(void)
{
    3efc:	df 93       	push	r29
    3efe:	cf 93       	push	r28
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
	LCD_xSendComand(LCD_CURSOR_HOME);
    3f04:	82 e0       	ldi	r24, 0x02	; 2
    3f06:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>
}
    3f0a:	cf 91       	pop	r28
    3f0c:	df 91       	pop	r29
    3f0e:	08 95       	ret

00003f10 <LCD_vCustomChar>:

/* ***************************************************************************** */
Error_Status LCD_vCustomChar(uint8 *Copy_pu8CharacteArr,CGRAM_CharPos_t Copy_xPosition)
{
    3f10:	df 93       	push	r29
    3f12:	cf 93       	push	r28
    3f14:	00 d0       	rcall	.+0      	; 0x3f16 <LCD_vCustomChar+0x6>
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <LCD_vCustomChar+0x8>
    3f18:	0f 92       	push	r0
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
    3f1e:	9b 83       	std	Y+3, r25	; 0x03
    3f20:	8a 83       	std	Y+2, r24	; 0x02
    3f22:	6c 83       	std	Y+4, r22	; 0x04
	if(LCD_IS_VALID_CGRAM_POS(Copy_xPosition) == E_NOK)
    3f24:	8c 81       	ldd	r24, Y+4	; 0x04
    3f26:	88 30       	cpi	r24, 0x08	; 8
    3f28:	10 f0       	brcs	.+4      	; 0x3f2e <LCD_vCustomChar+0x1e>
	{
		return E_NOK;
    3f2a:	1d 82       	std	Y+5, r1	; 0x05
    3f2c:	22 c0       	rjmp	.+68     	; 0x3f72 <LCD_vCustomChar+0x62>
	}

	uint8 Local_u8Index = 0;
    3f2e:	19 82       	std	Y+1, r1	; 0x01
	LCD_xSendComand(LCD_SET_CGRAM_ADDRESS +(Copy_xPosition * 8));
    3f30:	8c 81       	ldd	r24, Y+4	; 0x04
    3f32:	88 2f       	mov	r24, r24
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	08 96       	adiw	r24, 0x08	; 8
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_xSendComand>

	for(Local_u8Index = 0;Local_u8Index < LCD_CGRAM_PATTERN_BUFF_COUNT;Local_u8Index++)
    3f48:	19 82       	std	Y+1, r1	; 0x01
    3f4a:	0e c0       	rjmp	.+28     	; 0x3f68 <LCD_vCustomChar+0x58>
	{
		LCD_xSendByte(Copy_pu8CharacteArr[Local_u8Index]);
    3f4c:	89 81       	ldd	r24, Y+1	; 0x01
    3f4e:	28 2f       	mov	r18, r24
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	8a 81       	ldd	r24, Y+2	; 0x02
    3f54:	9b 81       	ldd	r25, Y+3	; 0x03
    3f56:	fc 01       	movw	r30, r24
    3f58:	e2 0f       	add	r30, r18
    3f5a:	f3 1f       	adc	r31, r19
    3f5c:	80 81       	ld	r24, Z
    3f5e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <LCD_xSendByte>
	}

	uint8 Local_u8Index = 0;
	LCD_xSendComand(LCD_SET_CGRAM_ADDRESS +(Copy_xPosition * 8));

	for(Local_u8Index = 0;Local_u8Index < LCD_CGRAM_PATTERN_BUFF_COUNT;Local_u8Index++)
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
    3f64:	8f 5f       	subi	r24, 0xFF	; 255
    3f66:	89 83       	std	Y+1, r24	; 0x01
    3f68:	89 81       	ldd	r24, Y+1	; 0x01
    3f6a:	88 30       	cpi	r24, 0x08	; 8
    3f6c:	78 f3       	brcs	.-34     	; 0x3f4c <LCD_vCustomChar+0x3c>
	{
		LCD_xSendByte(Copy_pu8CharacteArr[Local_u8Index]);
	}

	return E_OK;
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	8d 83       	std	Y+5, r24	; 0x05
    3f72:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3f74:	0f 90       	pop	r0
    3f76:	0f 90       	pop	r0
    3f78:	0f 90       	pop	r0
    3f7a:	0f 90       	pop	r0
    3f7c:	0f 90       	pop	r0
    3f7e:	cf 91       	pop	r28
    3f80:	df 91       	pop	r29
    3f82:	08 95       	ret

00003f84 <LDR_vInit>:
/* **************************************************************************** */
static uint16 LDR_Value;
/* **************************************************************************** */

void LDR_vInit(void)
{
    3f84:	df 93       	push	r29
    3f86:	cf 93       	push	r28
    3f88:	cd b7       	in	r28, 0x3d	; 61
    3f8a:	de b7       	in	r29, 0x3e	; 62
	/* Initial value for light intensity */
	LDR_Value	=	0;
    3f8c:	10 92 6b 04 	sts	0x046B, r1
    3f90:	10 92 6a 04 	sts	0x046A, r1
}
    3f94:	cf 91       	pop	r28
    3f96:	df 91       	pop	r29
    3f98:	08 95       	ret

00003f9a <LDR_u16GetVal>:

/* **************************************************************************** */

uint16 LDR_u16GetVal(void)
{
    3f9a:	df 93       	push	r29
    3f9c:	cf 93       	push	r28
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
	return LDR_Value;
    3fa2:	80 91 6a 04 	lds	r24, 0x046A
    3fa6:	90 91 6b 04 	lds	r25, 0x046B
}
    3faa:	cf 91       	pop	r28
    3fac:	df 91       	pop	r29
    3fae:	08 95       	ret

00003fb0 <LDR_vUpdate>:

/* ***************************************************************************** */
/*Light intensity sensor update*/
/* ***************************************************************************** */
void LDR_vUpdate(void)
{
    3fb0:	df 93       	push	r29
    3fb2:	cf 93       	push	r28
    3fb4:	00 d0       	rcall	.+0      	; 0x3fb6 <LDR_vUpdate+0x6>
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
	uint16 Local_u16RecvData	=	0;
    3fba:	1a 82       	std	Y+2, r1	; 0x02
    3fbc:	19 82       	std	Y+1, r1	; 0x01

	/*Measure the current light intensity*/
	 ADC_xReadSynch(LDR_ADC_CHANNEL, &Local_u16RecvData);
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	9e 01       	movw	r18, r28
    3fc2:	2f 5f       	subi	r18, 0xFF	; 255
    3fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc6:	b9 01       	movw	r22, r18
    3fc8:	0e 94 8b 09 	call	0x1316	; 0x1316 <ADC_xReadSynch>

	 LDR_Value = Local_u16RecvData;
    3fcc:	89 81       	ldd	r24, Y+1	; 0x01
    3fce:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd0:	90 93 6b 04 	sts	0x046B, r25
    3fd4:	80 93 6a 04 	sts	0x046A, r24
}
    3fd8:	0f 90       	pop	r0
    3fda:	0f 90       	pop	r0
    3fdc:	cf 91       	pop	r28
    3fde:	df 91       	pop	r29
    3fe0:	08 95       	ret

00003fe2 <LED_xInit>:
/* ***********************************************************  */
/*Functions definitions*/
/* ***********************************************************  */

Error_Status LED_xInit(LED_t Copy_xLed, LED_State_t Copy_xState)
{
    3fe2:	df 93       	push	r29
    3fe4:	cf 93       	push	r28
    3fe6:	00 d0       	rcall	.+0      	; 0x3fe8 <LED_xInit+0x6>
    3fe8:	0f 92       	push	r0
    3fea:	cd b7       	in	r28, 0x3d	; 61
    3fec:	de b7       	in	r29, 0x3e	; 62
    3fee:	89 83       	std	Y+1, r24	; 0x01
    3ff0:	6a 83       	std	Y+2, r22	; 0x02
	if(E_OK	!=	LED_IS_VALID(Copy_xLed))
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	82 30       	cpi	r24, 0x02	; 2
    3ff6:	10 f0       	brcs	.+4      	; 0x3ffc <LED_xInit+0x1a>
	{
		return E_NOK;
    3ff8:	1b 82       	std	Y+3, r1	; 0x03
    3ffa:	1d c0       	rjmp	.+58     	; 0x4036 <LED_xInit+0x54>
	}
	/* Set led as output*/
	GPIO_vInitPortPin(Leds[Copy_xLed].Led_Port,Leds[Copy_xLed].Led_Pin,GPIO_OUT);
    3ffc:	89 81       	ldd	r24, Y+1	; 0x01
    3ffe:	88 2f       	mov	r24, r24
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	88 0f       	add	r24, r24
    4004:	99 1f       	adc	r25, r25
    4006:	fc 01       	movw	r30, r24
    4008:	e2 5a       	subi	r30, 0xA2	; 162
    400a:	fd 4f       	sbci	r31, 0xFD	; 253
    400c:	20 81       	ld	r18, Z
    400e:	89 81       	ldd	r24, Y+1	; 0x01
    4010:	88 2f       	mov	r24, r24
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	88 0f       	add	r24, r24
    4016:	99 1f       	adc	r25, r25
    4018:	fc 01       	movw	r30, r24
    401a:	e1 5a       	subi	r30, 0xA1	; 161
    401c:	fd 4f       	sbci	r31, 0xFD	; 253
    401e:	90 81       	ld	r25, Z
    4020:	82 2f       	mov	r24, r18
    4022:	69 2f       	mov	r22, r25
    4024:	41 e0       	ldi	r20, 0x01	; 1
    4026:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
	/* Set led state */
	LED_xSetState(Copy_xLed, Copy_xState);
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	6a 81       	ldd	r22, Y+2	; 0x02
    402e:	0e 94 4b 20 	call	0x4096	; 0x4096 <LED_xSetState>

	return E_OK;
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	8b 83       	std	Y+3, r24	; 0x03
    4036:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4038:	0f 90       	pop	r0
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	08 95       	ret

00004044 <LED_xToggle>:

/* ***********************************************************  */

Error_Status LED_xToggle(LED_t Copy_xLed)
{
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	00 d0       	rcall	.+0      	; 0x404a <LED_xToggle+0x6>
    404a:	0f 92       	push	r0
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	8a 83       	std	Y+2, r24	; 0x02
	if(E_OK	!=	LED_IS_VALID(Copy_xLed))
    4052:	8a 81       	ldd	r24, Y+2	; 0x02
    4054:	82 30       	cpi	r24, 0x02	; 2
    4056:	10 f0       	brcs	.+4      	; 0x405c <LED_xToggle+0x18>
	{
		return E_NOK;
    4058:	1b 82       	std	Y+3, r1	; 0x03
    405a:	16 c0       	rjmp	.+44     	; 0x4088 <LED_xToggle+0x44>
	}

	/* Get led state */
	LED_State_t Local_xLedState = LED_OFF;
    405c:	19 82       	std	Y+1, r1	; 0x01
	LED_xGetState(Copy_xLed,&Local_xLedState);
    405e:	8a 81       	ldd	r24, Y+2	; 0x02
    4060:	9e 01       	movw	r18, r28
    4062:	2f 5f       	subi	r18, 0xFF	; 255
    4064:	3f 4f       	sbci	r19, 0xFF	; 255
    4066:	b9 01       	movw	r22, r18
    4068:	0e 94 78 20 	call	0x40f0	; 0x40f0 <LED_xGetState>

	/* Toggle led */
	if (Local_xLedState == LED_ON)
    406c:	89 81       	ldd	r24, Y+1	; 0x01
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	29 f4       	brne	.+10     	; 0x407c <LED_xToggle+0x38>
	{
		LED_xSetState(Copy_xLed, LED_OFF);
    4072:	8a 81       	ldd	r24, Y+2	; 0x02
    4074:	60 e0       	ldi	r22, 0x00	; 0
    4076:	0e 94 4b 20 	call	0x4096	; 0x4096 <LED_xSetState>
    407a:	04 c0       	rjmp	.+8      	; 0x4084 <LED_xToggle+0x40>
	} else
	{
		LED_xSetState(Copy_xLed, LED_ON);
    407c:	8a 81       	ldd	r24, Y+2	; 0x02
    407e:	61 e0       	ldi	r22, 0x01	; 1
    4080:	0e 94 4b 20 	call	0x4096	; 0x4096 <LED_xSetState>
	}
	return E_OK;
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	8b 83       	std	Y+3, r24	; 0x03
    4088:	8b 81       	ldd	r24, Y+3	; 0x03
}
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	cf 91       	pop	r28
    4092:	df 91       	pop	r29
    4094:	08 95       	ret

00004096 <LED_xSetState>:

/* ***********************************************************  */

Error_Status LED_xSetState(LED_t Copy_xLed, LED_State_t Copy_xState)
{
    4096:	df 93       	push	r29
    4098:	cf 93       	push	r28
    409a:	00 d0       	rcall	.+0      	; 0x409c <LED_xSetState+0x6>
    409c:	0f 92       	push	r0
    409e:	cd b7       	in	r28, 0x3d	; 61
    40a0:	de b7       	in	r29, 0x3e	; 62
    40a2:	89 83       	std	Y+1, r24	; 0x01
    40a4:	6a 83       	std	Y+2, r22	; 0x02
	if(E_OK	!=	LED_IS_VALID(Copy_xLed))
    40a6:	89 81       	ldd	r24, Y+1	; 0x01
    40a8:	82 30       	cpi	r24, 0x02	; 2
    40aa:	10 f0       	brcs	.+4      	; 0x40b0 <LED_xSetState+0x1a>
	{
		return E_NOK;
    40ac:	1b 82       	std	Y+3, r1	; 0x03
    40ae:	19 c0       	rjmp	.+50     	; 0x40e2 <LED_xSetState+0x4c>
	}
	GPIO_vWritePortPin(Leds[Copy_xLed].Led_Port,Leds[Copy_xLed].Led_Pin,Copy_xState);
    40b0:	89 81       	ldd	r24, Y+1	; 0x01
    40b2:	88 2f       	mov	r24, r24
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	88 0f       	add	r24, r24
    40b8:	99 1f       	adc	r25, r25
    40ba:	fc 01       	movw	r30, r24
    40bc:	e2 5a       	subi	r30, 0xA2	; 162
    40be:	fd 4f       	sbci	r31, 0xFD	; 253
    40c0:	20 81       	ld	r18, Z
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	88 2f       	mov	r24, r24
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	88 0f       	add	r24, r24
    40ca:	99 1f       	adc	r25, r25
    40cc:	fc 01       	movw	r30, r24
    40ce:	e1 5a       	subi	r30, 0xA1	; 161
    40d0:	fd 4f       	sbci	r31, 0xFD	; 253
    40d2:	90 81       	ld	r25, Z
    40d4:	82 2f       	mov	r24, r18
    40d6:	69 2f       	mov	r22, r25
    40d8:	4a 81       	ldd	r20, Y+2	; 0x02
    40da:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_vWritePortPin>
	return E_OK;
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	8b 83       	std	Y+3, r24	; 0x03
    40e2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    40e4:	0f 90       	pop	r0
    40e6:	0f 90       	pop	r0
    40e8:	0f 90       	pop	r0
    40ea:	cf 91       	pop	r28
    40ec:	df 91       	pop	r29
    40ee:	08 95       	ret

000040f0 <LED_xGetState>:

/* ***********************************************************  */

Error_Status LED_xGetState(LED_t Copy_xLed,LED_State_t *pxLedState)
{
    40f0:	df 93       	push	r29
    40f2:	cf 93       	push	r28
    40f4:	00 d0       	rcall	.+0      	; 0x40f6 <LED_xGetState+0x6>
    40f6:	00 d0       	rcall	.+0      	; 0x40f8 <LED_xGetState+0x8>
    40f8:	0f 92       	push	r0
    40fa:	cd b7       	in	r28, 0x3d	; 61
    40fc:	de b7       	in	r29, 0x3e	; 62
    40fe:	8a 83       	std	Y+2, r24	; 0x02
    4100:	7c 83       	std	Y+4, r23	; 0x04
    4102:	6b 83       	std	Y+3, r22	; 0x03
	if(E_OK	!=	LED_IS_VALID(Copy_xLed))
    4104:	8a 81       	ldd	r24, Y+2	; 0x02
    4106:	82 30       	cpi	r24, 0x02	; 2
    4108:	10 f0       	brcs	.+4      	; 0x410e <LED_xGetState+0x1e>
	{
		return E_NOK;
    410a:	1d 82       	std	Y+5, r1	; 0x05
    410c:	1a c0       	rjmp	.+52     	; 0x4142 <LED_xGetState+0x52>
	}
	LED_State_t ret = LED_OFF;
    410e:	19 82       	std	Y+1, r1	; 0x01

	ret = GPIO_xReadPortPin(Leds[Copy_xLed].Led_Port,Leds[Copy_xLed].Led_Pin);
    4110:	8a 81       	ldd	r24, Y+2	; 0x02
    4112:	88 2f       	mov	r24, r24
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	88 0f       	add	r24, r24
    4118:	99 1f       	adc	r25, r25
    411a:	fc 01       	movw	r30, r24
    411c:	e2 5a       	subi	r30, 0xA2	; 162
    411e:	fd 4f       	sbci	r31, 0xFD	; 253
    4120:	20 81       	ld	r18, Z
    4122:	8a 81       	ldd	r24, Y+2	; 0x02
    4124:	88 2f       	mov	r24, r24
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	88 0f       	add	r24, r24
    412a:	99 1f       	adc	r25, r25
    412c:	fc 01       	movw	r30, r24
    412e:	e1 5a       	subi	r30, 0xA1	; 161
    4130:	fd 4f       	sbci	r31, 0xFD	; 253
    4132:	90 81       	ld	r25, Z
    4134:	82 2f       	mov	r24, r18
    4136:	69 2f       	mov	r22, r25
    4138:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_xReadPortPin>
    413c:	89 83       	std	Y+1, r24	; 0x01

	return E_OK;
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	8d 83       	std	Y+5, r24	; 0x05
    4142:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4144:	0f 90       	pop	r0
    4146:	0f 90       	pop	r0
    4148:	0f 90       	pop	r0
    414a:	0f 90       	pop	r0
    414c:	0f 90       	pop	r0
    414e:	cf 91       	pop	r28
    4150:	df 91       	pop	r29
    4152:	08 95       	ret

00004154 <Login_CheckUserName>:
static uint8 UsersPass[LOGIN_N_USERS][LOGIN_USERS_PASS_LEN]	={"12345","00000","55555"};

static uint8 u8CurrentIndex	=	0;

Flag_Status Login_CheckUserName(uint8 *String)
{
    4154:	df 93       	push	r29
    4156:	cf 93       	push	r28
    4158:	00 d0       	rcall	.+0      	; 0x415a <Login_CheckUserName+0x6>
    415a:	00 d0       	rcall	.+0      	; 0x415c <Login_CheckUserName+0x8>
    415c:	cd b7       	in	r28, 0x3d	; 61
    415e:	de b7       	in	r29, 0x3e	; 62
    4160:	9c 83       	std	Y+4, r25	; 0x04
    4162:	8b 83       	std	Y+3, r24	; 0x03
	Flag_Status Local_xFlag = E_NOK;
    4164:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Index = 0;
    4166:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Index = 0; Local_u8Index < LOGIN_N_USERS;Local_u8Index++)
    4168:	19 82       	std	Y+1, r1	; 0x01
    416a:	22 c0       	rjmp	.+68     	; 0x41b0 <Login_CheckUserName+0x5c>
	{
		if(Util_String_xComp(String,UserNames[Local_u8Index]) == 0)
    416c:	42 e6       	ldi	r20, 0x62	; 98
    416e:	52 e0       	ldi	r21, 0x02	; 2
    4170:	89 81       	ldd	r24, Y+1	; 0x01
    4172:	28 2f       	mov	r18, r24
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	82 e3       	ldi	r24, 0x32	; 50
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	bc 01       	movw	r22, r24
    417c:	26 9f       	mul	r18, r22
    417e:	c0 01       	movw	r24, r0
    4180:	27 9f       	mul	r18, r23
    4182:	90 0d       	add	r25, r0
    4184:	36 9f       	mul	r19, r22
    4186:	90 0d       	add	r25, r0
    4188:	11 24       	eor	r1, r1
    418a:	9a 01       	movw	r18, r20
    418c:	28 0f       	add	r18, r24
    418e:	39 1f       	adc	r19, r25
    4190:	8b 81       	ldd	r24, Y+3	; 0x03
    4192:	9c 81       	ldd	r25, Y+4	; 0x04
    4194:	b9 01       	movw	r22, r18
    4196:	0e 94 ce 2a 	call	0x559c	; 0x559c <Util_String_xComp>
    419a:	88 23       	and	r24, r24
    419c:	31 f4       	brne	.+12     	; 0x41aa <Login_CheckUserName+0x56>
		{
			u8CurrentIndex	= Local_u8Index;
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	80 93 6c 04 	sts	0x046C, r24
			Local_xFlag = E_OK;
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	8a 83       	std	Y+2, r24	; 0x02
    41a8:	06 c0       	rjmp	.+12     	; 0x41b6 <Login_CheckUserName+0x62>

Flag_Status Login_CheckUserName(uint8 *String)
{
	Flag_Status Local_xFlag = E_NOK;
	uint8 Local_u8Index = 0;
	for(Local_u8Index = 0; Local_u8Index < LOGIN_N_USERS;Local_u8Index++)
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	8f 5f       	subi	r24, 0xFF	; 255
    41ae:	89 83       	std	Y+1, r24	; 0x01
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	85 30       	cpi	r24, 0x05	; 5
    41b4:	d8 f2       	brcs	.-74     	; 0x416c <Login_CheckUserName+0x18>
			Local_xFlag = E_OK;
			break;
		}
	}

	return Local_xFlag;
    41b6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    41b8:	0f 90       	pop	r0
    41ba:	0f 90       	pop	r0
    41bc:	0f 90       	pop	r0
    41be:	0f 90       	pop	r0
    41c0:	cf 91       	pop	r28
    41c2:	df 91       	pop	r29
    41c4:	08 95       	ret

000041c6 <Login_CheckPass>:

Flag_Status Login_CheckPass(uint8 *String)
{
    41c6:	df 93       	push	r29
    41c8:	cf 93       	push	r28
    41ca:	00 d0       	rcall	.+0      	; 0x41cc <Login_CheckPass+0x6>
    41cc:	0f 92       	push	r0
    41ce:	cd b7       	in	r28, 0x3d	; 61
    41d0:	de b7       	in	r29, 0x3e	; 62
    41d2:	9b 83       	std	Y+3, r25	; 0x03
    41d4:	8a 83       	std	Y+2, r24	; 0x02
	Flag_Status Local_xFlag = E_NOK;
    41d6:	19 82       	std	Y+1, r1	; 0x01

	if(Util_String_xComp(String,UsersPass[u8CurrentIndex]) ==0)
    41d8:	4c e5       	ldi	r20, 0x5C	; 92
    41da:	53 e0       	ldi	r21, 0x03	; 3
    41dc:	80 91 6c 04 	lds	r24, 0x046C
    41e0:	28 2f       	mov	r18, r24
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	82 e3       	ldi	r24, 0x32	; 50
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	bc 01       	movw	r22, r24
    41ea:	26 9f       	mul	r18, r22
    41ec:	c0 01       	movw	r24, r0
    41ee:	27 9f       	mul	r18, r23
    41f0:	90 0d       	add	r25, r0
    41f2:	36 9f       	mul	r19, r22
    41f4:	90 0d       	add	r25, r0
    41f6:	11 24       	eor	r1, r1
    41f8:	9a 01       	movw	r18, r20
    41fa:	28 0f       	add	r18, r24
    41fc:	39 1f       	adc	r19, r25
    41fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4200:	9b 81       	ldd	r25, Y+3	; 0x03
    4202:	b9 01       	movw	r22, r18
    4204:	0e 94 ce 2a 	call	0x559c	; 0x559c <Util_String_xComp>
    4208:	88 23       	and	r24, r24
    420a:	11 f4       	brne	.+4      	; 0x4210 <Login_CheckPass+0x4a>
	{
		Local_xFlag = E_OK;
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_xFlag;
    4210:	89 81       	ldd	r24, Y+1	; 0x01
}
    4212:	0f 90       	pop	r0
    4214:	0f 90       	pop	r0
    4216:	0f 90       	pop	r0
    4218:	cf 91       	pop	r28
    421a:	df 91       	pop	r29
    421c:	08 95       	ret

0000421e <PWM_vInit>:

static uint16 Global_Prescaler	=	PWM_NO_Clock_Source;
static uint16 u16Current_Freq;

Error_Status PWM_vInit(PWM_Typedef *PWM_ConfigPtr)
{
    421e:	df 93       	push	r29
    4220:	cf 93       	push	r28
    4222:	00 d0       	rcall	.+0      	; 0x4224 <PWM_vInit+0x6>
    4224:	00 d0       	rcall	.+0      	; 0x4226 <PWM_vInit+0x8>
    4226:	00 d0       	rcall	.+0      	; 0x4228 <PWM_vInit+0xa>
    4228:	cd b7       	in	r28, 0x3d	; 61
    422a:	de b7       	in	r29, 0x3e	; 62
    422c:	9b 83       	std	Y+3, r25	; 0x03
    422e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status Local_xErrorState	=	0;
    4230:	19 82       	std	Y+1, r1	; 0x01
	/* Choose channel and compare match mode */
	Local_xErrorState	=	PWM_xSetChannels(PWM_ConfigPtr->Channel,PWM_ConfigPtr->COM_Mode);
    4232:	ea 81       	ldd	r30, Y+2	; 0x02
    4234:	fb 81       	ldd	r31, Y+3	; 0x03
    4236:	82 81       	ldd	r24, Z+2	; 0x02
    4238:	ea 81       	ldd	r30, Y+2	; 0x02
    423a:	fb 81       	ldd	r31, Y+3	; 0x03
    423c:	90 81       	ld	r25, Z
    423e:	69 2f       	mov	r22, r25
    4240:	0e 94 95 22 	call	0x452a	; 0x452a <PWM_xSetChannels>
    4244:	89 83       	std	Y+1, r24	; 0x01

	/* Initialize PWM pins as output */
	switch(PWM_ConfigPtr->Channel)
    4246:	ea 81       	ldd	r30, Y+2	; 0x02
    4248:	fb 81       	ldd	r31, Y+3	; 0x03
    424a:	82 81       	ldd	r24, Z+2	; 0x02
    424c:	28 2f       	mov	r18, r24
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	3e 83       	std	Y+6, r19	; 0x06
    4252:	2d 83       	std	Y+5, r18	; 0x05
    4254:	8d 81       	ldd	r24, Y+5	; 0x05
    4256:	9e 81       	ldd	r25, Y+6	; 0x06
    4258:	00 97       	sbiw	r24, 0x00	; 0
    425a:	31 f0       	breq	.+12     	; 0x4268 <PWM_vInit+0x4a>
    425c:	2d 81       	ldd	r18, Y+5	; 0x05
    425e:	3e 81       	ldd	r19, Y+6	; 0x06
    4260:	21 30       	cpi	r18, 0x01	; 1
    4262:	31 05       	cpc	r19, r1
    4264:	39 f0       	breq	.+14     	; 0x4274 <PWM_vInit+0x56>
    4266:	0c c0       	rjmp	.+24     	; 0x4280 <PWM_vInit+0x62>
	{
	case PWM_CH_1:
		GPIO_vInitPortPin(PWM_OCR1A_PORT,PWM_OCR1A_PIN,GPIO_OUT);
    4268:	84 e4       	ldi	r24, 0x44	; 68
    426a:	65 e0       	ldi	r22, 0x05	; 5
    426c:	41 e0       	ldi	r20, 0x01	; 1
    426e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
    4272:	08 c0       	rjmp	.+16     	; 0x4284 <PWM_vInit+0x66>
		break;
	case PWM_CH_2:
		GPIO_vInitPortPin(PWM_OCR1B_PORT,PWM_OCR1B_PIN,GPIO_OUT);
    4274:	84 e4       	ldi	r24, 0x44	; 68
    4276:	64 e0       	ldi	r22, 0x04	; 4
    4278:	41 e0       	ldi	r20, 0x01	; 1
    427a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>
    427e:	02 c0       	rjmp	.+4      	; 0x4284 <PWM_vInit+0x66>
		break;
	default:
		return E_NOK;
    4280:	1c 82       	std	Y+4, r1	; 0x04
    4282:	0e c0       	rjmp	.+28     	; 0x42a0 <PWM_vInit+0x82>
		break;
	}
	/* Set PWM mode */
	Local_xErrorState	=	PWM_xSetMode(PWM_ConfigPtr->Mode);
    4284:	ea 81       	ldd	r30, Y+2	; 0x02
    4286:	fb 81       	ldd	r31, Y+3	; 0x03
    4288:	81 81       	ldd	r24, Z+1	; 0x01
    428a:	0e 94 5d 23 	call	0x46ba	; 0x46ba <PWM_xSetMode>
    428e:	89 83       	std	Y+1, r24	; 0x01
	/* Enable Timer */
	Local_xErrorState	=	PWM_xSetPrescaler(PWM_ConfigPtr->Prescaler);
    4290:	ea 81       	ldd	r30, Y+2	; 0x02
    4292:	fb 81       	ldd	r31, Y+3	; 0x03
    4294:	83 81       	ldd	r24, Z+3	; 0x03
    4296:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <PWM_xSetPrescaler>
    429a:	89 83       	std	Y+1, r24	; 0x01

	return Local_xErrorState;
    429c:	39 81       	ldd	r19, Y+1	; 0x01
    429e:	3c 83       	std	Y+4, r19	; 0x04
    42a0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    42a2:	26 96       	adiw	r28, 0x06	; 6
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
    42ae:	cf 91       	pop	r28
    42b0:	df 91       	pop	r29
    42b2:	08 95       	ret

000042b4 <PWM_xSetPrescaler>:

Error_Status PWM_xSetPrescaler(PWM_ClockPrescaler Copy_xPrescaler)
{
    42b4:	df 93       	push	r29
    42b6:	cf 93       	push	r28
    42b8:	00 d0       	rcall	.+0      	; 0x42ba <PWM_xSetPrescaler+0x6>
    42ba:	00 d0       	rcall	.+0      	; 0x42bc <PWM_xSetPrescaler+0x8>
    42bc:	cd b7       	in	r28, 0x3d	; 61
    42be:	de b7       	in	r29, 0x3e	; 62
    42c0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xPrescaler)
    42c2:	89 81       	ldd	r24, Y+1	; 0x01
    42c4:	28 2f       	mov	r18, r24
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	3c 83       	std	Y+4, r19	; 0x04
    42ca:	2b 83       	std	Y+3, r18	; 0x03
    42cc:	8b 81       	ldd	r24, Y+3	; 0x03
    42ce:	9c 81       	ldd	r25, Y+4	; 0x04
    42d0:	83 30       	cpi	r24, 0x03	; 3
    42d2:	91 05       	cpc	r25, r1
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <PWM_xSetPrescaler+0x24>
    42d6:	81 c0       	rjmp	.+258    	; 0x43da <PWM_xSetPrescaler+0x126>
    42d8:	2b 81       	ldd	r18, Y+3	; 0x03
    42da:	3c 81       	ldd	r19, Y+4	; 0x04
    42dc:	24 30       	cpi	r18, 0x04	; 4
    42de:	31 05       	cpc	r19, r1
    42e0:	8c f4       	brge	.+34     	; 0x4304 <PWM_xSetPrescaler+0x50>
    42e2:	8b 81       	ldd	r24, Y+3	; 0x03
    42e4:	9c 81       	ldd	r25, Y+4	; 0x04
    42e6:	81 30       	cpi	r24, 0x01	; 1
    42e8:	91 05       	cpc	r25, r1
    42ea:	09 f4       	brne	.+2      	; 0x42ee <PWM_xSetPrescaler+0x3a>
    42ec:	3e c0       	rjmp	.+124    	; 0x436a <PWM_xSetPrescaler+0xb6>
    42ee:	2b 81       	ldd	r18, Y+3	; 0x03
    42f0:	3c 81       	ldd	r19, Y+4	; 0x04
    42f2:	22 30       	cpi	r18, 0x02	; 2
    42f4:	31 05       	cpc	r19, r1
    42f6:	0c f0       	brlt	.+2      	; 0x42fa <PWM_xSetPrescaler+0x46>
    42f8:	54 c0       	rjmp	.+168    	; 0x43a2 <PWM_xSetPrescaler+0xee>
    42fa:	8b 81       	ldd	r24, Y+3	; 0x03
    42fc:	9c 81       	ldd	r25, Y+4	; 0x04
    42fe:	00 97       	sbiw	r24, 0x00	; 0
    4300:	d1 f0       	breq	.+52     	; 0x4336 <PWM_xSetPrescaler+0x82>
    4302:	eb c0       	rjmp	.+470    	; 0x44da <PWM_xSetPrescaler+0x226>
    4304:	2b 81       	ldd	r18, Y+3	; 0x03
    4306:	3c 81       	ldd	r19, Y+4	; 0x04
    4308:	25 30       	cpi	r18, 0x05	; 5
    430a:	31 05       	cpc	r19, r1
    430c:	09 f4       	brne	.+2      	; 0x4310 <PWM_xSetPrescaler+0x5c>
    430e:	9d c0       	rjmp	.+314    	; 0x444a <PWM_xSetPrescaler+0x196>
    4310:	8b 81       	ldd	r24, Y+3	; 0x03
    4312:	9c 81       	ldd	r25, Y+4	; 0x04
    4314:	85 30       	cpi	r24, 0x05	; 5
    4316:	91 05       	cpc	r25, r1
    4318:	0c f4       	brge	.+2      	; 0x431c <PWM_xSetPrescaler+0x68>
    431a:	7b c0       	rjmp	.+246    	; 0x4412 <PWM_xSetPrescaler+0x15e>
    431c:	2b 81       	ldd	r18, Y+3	; 0x03
    431e:	3c 81       	ldd	r19, Y+4	; 0x04
    4320:	26 30       	cpi	r18, 0x06	; 6
    4322:	31 05       	cpc	r19, r1
    4324:	09 f4       	brne	.+2      	; 0x4328 <PWM_xSetPrescaler+0x74>
    4326:	ad c0       	rjmp	.+346    	; 0x4482 <PWM_xSetPrescaler+0x1ce>
    4328:	8b 81       	ldd	r24, Y+3	; 0x03
    432a:	9c 81       	ldd	r25, Y+4	; 0x04
    432c:	87 30       	cpi	r24, 0x07	; 7
    432e:	91 05       	cpc	r25, r1
    4330:	09 f4       	brne	.+2      	; 0x4334 <PWM_xSetPrescaler+0x80>
    4332:	bd c0       	rjmp	.+378    	; 0x44ae <PWM_xSetPrescaler+0x1fa>
    4334:	d2 c0       	rjmp	.+420    	; 0x44da <PWM_xSetPrescaler+0x226>
	{
	case PWM_NO_Clock_Source:
		CLEAR_BIT(TCCR1B,CS10);
    4336:	ae e4       	ldi	r26, 0x4E	; 78
    4338:	b0 e0       	ldi	r27, 0x00	; 0
    433a:	ee e4       	ldi	r30, 0x4E	; 78
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	80 81       	ld	r24, Z
    4340:	8e 7f       	andi	r24, 0xFE	; 254
    4342:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    4344:	ae e4       	ldi	r26, 0x4E	; 78
    4346:	b0 e0       	ldi	r27, 0x00	; 0
    4348:	ee e4       	ldi	r30, 0x4E	; 78
    434a:	f0 e0       	ldi	r31, 0x00	; 0
    434c:	80 81       	ld	r24, Z
    434e:	8d 7f       	andi	r24, 0xFD	; 253
    4350:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    4352:	ae e4       	ldi	r26, 0x4E	; 78
    4354:	b0 e0       	ldi	r27, 0x00	; 0
    4356:	ee e4       	ldi	r30, 0x4E	; 78
    4358:	f0 e0       	ldi	r31, 0x00	; 0
    435a:	80 81       	ld	r24, Z
    435c:	8b 7f       	andi	r24, 0xFB	; 251
    435e:	8c 93       	st	X, r24
		Global_Prescaler=0;
    4360:	10 92 6e 04 	sts	0x046E, r1
    4364:	10 92 6d 04 	sts	0x046D, r1
    4368:	ba c0       	rjmp	.+372    	; 0x44de <PWM_xSetPrescaler+0x22a>
		break;
	case PWM_Prescaler_1:
		SET_BIT(TCCR1B,CS10);
    436a:	ae e4       	ldi	r26, 0x4E	; 78
    436c:	b0 e0       	ldi	r27, 0x00	; 0
    436e:	ee e4       	ldi	r30, 0x4E	; 78
    4370:	f0 e0       	ldi	r31, 0x00	; 0
    4372:	80 81       	ld	r24, Z
    4374:	81 60       	ori	r24, 0x01	; 1
    4376:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    4378:	ae e4       	ldi	r26, 0x4E	; 78
    437a:	b0 e0       	ldi	r27, 0x00	; 0
    437c:	ee e4       	ldi	r30, 0x4E	; 78
    437e:	f0 e0       	ldi	r31, 0x00	; 0
    4380:	80 81       	ld	r24, Z
    4382:	8d 7f       	andi	r24, 0xFD	; 253
    4384:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    4386:	ae e4       	ldi	r26, 0x4E	; 78
    4388:	b0 e0       	ldi	r27, 0x00	; 0
    438a:	ee e4       	ldi	r30, 0x4E	; 78
    438c:	f0 e0       	ldi	r31, 0x00	; 0
    438e:	80 81       	ld	r24, Z
    4390:	8b 7f       	andi	r24, 0xFB	; 251
    4392:	8c 93       	st	X, r24

		Global_Prescaler=1;
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	90 93 6e 04 	sts	0x046E, r25
    439c:	80 93 6d 04 	sts	0x046D, r24
    43a0:	9e c0       	rjmp	.+316    	; 0x44de <PWM_xSetPrescaler+0x22a>
		break;

	case PWM_Prescaler_8:
		CLEAR_BIT(TCCR1B,CS10);
    43a2:	ae e4       	ldi	r26, 0x4E	; 78
    43a4:	b0 e0       	ldi	r27, 0x00	; 0
    43a6:	ee e4       	ldi	r30, 0x4E	; 78
    43a8:	f0 e0       	ldi	r31, 0x00	; 0
    43aa:	80 81       	ld	r24, Z
    43ac:	8e 7f       	andi	r24, 0xFE	; 254
    43ae:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    43b0:	ae e4       	ldi	r26, 0x4E	; 78
    43b2:	b0 e0       	ldi	r27, 0x00	; 0
    43b4:	ee e4       	ldi	r30, 0x4E	; 78
    43b6:	f0 e0       	ldi	r31, 0x00	; 0
    43b8:	80 81       	ld	r24, Z
    43ba:	82 60       	ori	r24, 0x02	; 2
    43bc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    43be:	ae e4       	ldi	r26, 0x4E	; 78
    43c0:	b0 e0       	ldi	r27, 0x00	; 0
    43c2:	ee e4       	ldi	r30, 0x4E	; 78
    43c4:	f0 e0       	ldi	r31, 0x00	; 0
    43c6:	80 81       	ld	r24, Z
    43c8:	8b 7f       	andi	r24, 0xFB	; 251
    43ca:	8c 93       	st	X, r24

		Global_Prescaler=8;
    43cc:	88 e0       	ldi	r24, 0x08	; 8
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	90 93 6e 04 	sts	0x046E, r25
    43d4:	80 93 6d 04 	sts	0x046D, r24
    43d8:	82 c0       	rjmp	.+260    	; 0x44de <PWM_xSetPrescaler+0x22a>
		break;

	case PWM_Prescaler_64:
		SET_BIT(TCCR1B,CS10);
    43da:	ae e4       	ldi	r26, 0x4E	; 78
    43dc:	b0 e0       	ldi	r27, 0x00	; 0
    43de:	ee e4       	ldi	r30, 0x4E	; 78
    43e0:	f0 e0       	ldi	r31, 0x00	; 0
    43e2:	80 81       	ld	r24, Z
    43e4:	81 60       	ori	r24, 0x01	; 1
    43e6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    43e8:	ae e4       	ldi	r26, 0x4E	; 78
    43ea:	b0 e0       	ldi	r27, 0x00	; 0
    43ec:	ee e4       	ldi	r30, 0x4E	; 78
    43ee:	f0 e0       	ldi	r31, 0x00	; 0
    43f0:	80 81       	ld	r24, Z
    43f2:	82 60       	ori	r24, 0x02	; 2
    43f4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    43f6:	ae e4       	ldi	r26, 0x4E	; 78
    43f8:	b0 e0       	ldi	r27, 0x00	; 0
    43fa:	ee e4       	ldi	r30, 0x4E	; 78
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	80 81       	ld	r24, Z
    4400:	8b 7f       	andi	r24, 0xFB	; 251
    4402:	8c 93       	st	X, r24

		Global_Prescaler=64;
    4404:	80 e4       	ldi	r24, 0x40	; 64
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	90 93 6e 04 	sts	0x046E, r25
    440c:	80 93 6d 04 	sts	0x046D, r24
    4410:	66 c0       	rjmp	.+204    	; 0x44de <PWM_xSetPrescaler+0x22a>
		break;

	case PWM_Prescaler_256:
		CLEAR_BIT(TCCR1B,CS10);
    4412:	ae e4       	ldi	r26, 0x4E	; 78
    4414:	b0 e0       	ldi	r27, 0x00	; 0
    4416:	ee e4       	ldi	r30, 0x4E	; 78
    4418:	f0 e0       	ldi	r31, 0x00	; 0
    441a:	80 81       	ld	r24, Z
    441c:	8e 7f       	andi	r24, 0xFE	; 254
    441e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    4420:	ae e4       	ldi	r26, 0x4E	; 78
    4422:	b0 e0       	ldi	r27, 0x00	; 0
    4424:	ee e4       	ldi	r30, 0x4E	; 78
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	80 81       	ld	r24, Z
    442a:	8d 7f       	andi	r24, 0xFD	; 253
    442c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
    442e:	ae e4       	ldi	r26, 0x4E	; 78
    4430:	b0 e0       	ldi	r27, 0x00	; 0
    4432:	ee e4       	ldi	r30, 0x4E	; 78
    4434:	f0 e0       	ldi	r31, 0x00	; 0
    4436:	80 81       	ld	r24, Z
    4438:	84 60       	ori	r24, 0x04	; 4
    443a:	8c 93       	st	X, r24

		Global_Prescaler=256;
    443c:	80 e0       	ldi	r24, 0x00	; 0
    443e:	91 e0       	ldi	r25, 0x01	; 1
    4440:	90 93 6e 04 	sts	0x046E, r25
    4444:	80 93 6d 04 	sts	0x046D, r24
    4448:	4a c0       	rjmp	.+148    	; 0x44de <PWM_xSetPrescaler+0x22a>
		break;

	case PWM_Prescaler_1024:
		SET_BIT(TCCR1B,CS10);
    444a:	ae e4       	ldi	r26, 0x4E	; 78
    444c:	b0 e0       	ldi	r27, 0x00	; 0
    444e:	ee e4       	ldi	r30, 0x4E	; 78
    4450:	f0 e0       	ldi	r31, 0x00	; 0
    4452:	80 81       	ld	r24, Z
    4454:	81 60       	ori	r24, 0x01	; 1
    4456:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    4458:	ae e4       	ldi	r26, 0x4E	; 78
    445a:	b0 e0       	ldi	r27, 0x00	; 0
    445c:	ee e4       	ldi	r30, 0x4E	; 78
    445e:	f0 e0       	ldi	r31, 0x00	; 0
    4460:	80 81       	ld	r24, Z
    4462:	8d 7f       	andi	r24, 0xFD	; 253
    4464:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
    4466:	ae e4       	ldi	r26, 0x4E	; 78
    4468:	b0 e0       	ldi	r27, 0x00	; 0
    446a:	ee e4       	ldi	r30, 0x4E	; 78
    446c:	f0 e0       	ldi	r31, 0x00	; 0
    446e:	80 81       	ld	r24, Z
    4470:	84 60       	ori	r24, 0x04	; 4
    4472:	8c 93       	st	X, r24

		Global_Prescaler=1024;
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	94 e0       	ldi	r25, 0x04	; 4
    4478:	90 93 6e 04 	sts	0x046E, r25
    447c:	80 93 6d 04 	sts	0x046D, r24
    4480:	2e c0       	rjmp	.+92     	; 0x44de <PWM_xSetPrescaler+0x22a>
		break;

	case PWM_Preascaler_ExClockT1_Falling:
		CLEAR_BIT(TCCR1B,CS10);
    4482:	ae e4       	ldi	r26, 0x4E	; 78
    4484:	b0 e0       	ldi	r27, 0x00	; 0
    4486:	ee e4       	ldi	r30, 0x4E	; 78
    4488:	f0 e0       	ldi	r31, 0x00	; 0
    448a:	80 81       	ld	r24, Z
    448c:	8e 7f       	andi	r24, 0xFE	; 254
    448e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    4490:	ae e4       	ldi	r26, 0x4E	; 78
    4492:	b0 e0       	ldi	r27, 0x00	; 0
    4494:	ee e4       	ldi	r30, 0x4E	; 78
    4496:	f0 e0       	ldi	r31, 0x00	; 0
    4498:	80 81       	ld	r24, Z
    449a:	82 60       	ori	r24, 0x02	; 2
    449c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
    449e:	ae e4       	ldi	r26, 0x4E	; 78
    44a0:	b0 e0       	ldi	r27, 0x00	; 0
    44a2:	ee e4       	ldi	r30, 0x4E	; 78
    44a4:	f0 e0       	ldi	r31, 0x00	; 0
    44a6:	80 81       	ld	r24, Z
    44a8:	84 60       	ori	r24, 0x04	; 4
    44aa:	8c 93       	st	X, r24
    44ac:	18 c0       	rjmp	.+48     	; 0x44de <PWM_xSetPrescaler+0x22a>
		break;
	case PWM_Preascaler_ExClockT1_Rising:
		SET_BIT(TCCR1B,CS10);
    44ae:	ae e4       	ldi	r26, 0x4E	; 78
    44b0:	b0 e0       	ldi	r27, 0x00	; 0
    44b2:	ee e4       	ldi	r30, 0x4E	; 78
    44b4:	f0 e0       	ldi	r31, 0x00	; 0
    44b6:	80 81       	ld	r24, Z
    44b8:	81 60       	ori	r24, 0x01	; 1
    44ba:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    44bc:	ae e4       	ldi	r26, 0x4E	; 78
    44be:	b0 e0       	ldi	r27, 0x00	; 0
    44c0:	ee e4       	ldi	r30, 0x4E	; 78
    44c2:	f0 e0       	ldi	r31, 0x00	; 0
    44c4:	80 81       	ld	r24, Z
    44c6:	82 60       	ori	r24, 0x02	; 2
    44c8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
    44ca:	ae e4       	ldi	r26, 0x4E	; 78
    44cc:	b0 e0       	ldi	r27, 0x00	; 0
    44ce:	ee e4       	ldi	r30, 0x4E	; 78
    44d0:	f0 e0       	ldi	r31, 0x00	; 0
    44d2:	80 81       	ld	r24, Z
    44d4:	84 60       	ori	r24, 0x04	; 4
    44d6:	8c 93       	st	X, r24
    44d8:	02 c0       	rjmp	.+4      	; 0x44de <PWM_xSetPrescaler+0x22a>
		break;
	default:
		return E_NOK;
    44da:	1a 82       	std	Y+2, r1	; 0x02
    44dc:	02 c0       	rjmp	.+4      	; 0x44e2 <PWM_xSetPrescaler+0x22e>
		break;
	}
	return E_OK;
    44de:	91 e0       	ldi	r25, 0x01	; 1
    44e0:	9a 83       	std	Y+2, r25	; 0x02
    44e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    44e4:	0f 90       	pop	r0
    44e6:	0f 90       	pop	r0
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	cf 91       	pop	r28
    44ee:	df 91       	pop	r29
    44f0:	08 95       	ret

000044f2 <PWM_vStop>:

void PWM_vStop(void)
{
    44f2:	df 93       	push	r29
    44f4:	cf 93       	push	r28
    44f6:	cd b7       	in	r28, 0x3d	; 61
    44f8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B,CS10);
    44fa:	ae e4       	ldi	r26, 0x4E	; 78
    44fc:	b0 e0       	ldi	r27, 0x00	; 0
    44fe:	ee e4       	ldi	r30, 0x4E	; 78
    4500:	f0 e0       	ldi	r31, 0x00	; 0
    4502:	80 81       	ld	r24, Z
    4504:	8e 7f       	andi	r24, 0xFE	; 254
    4506:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
    4508:	ae e4       	ldi	r26, 0x4E	; 78
    450a:	b0 e0       	ldi	r27, 0x00	; 0
    450c:	ee e4       	ldi	r30, 0x4E	; 78
    450e:	f0 e0       	ldi	r31, 0x00	; 0
    4510:	80 81       	ld	r24, Z
    4512:	8d 7f       	andi	r24, 0xFD	; 253
    4514:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
    4516:	ae e4       	ldi	r26, 0x4E	; 78
    4518:	b0 e0       	ldi	r27, 0x00	; 0
    451a:	ee e4       	ldi	r30, 0x4E	; 78
    451c:	f0 e0       	ldi	r31, 0x00	; 0
    451e:	80 81       	ld	r24, Z
    4520:	8b 7f       	andi	r24, 0xFB	; 251
    4522:	8c 93       	st	X, r24
}
    4524:	cf 91       	pop	r28
    4526:	df 91       	pop	r29
    4528:	08 95       	ret

0000452a <PWM_xSetChannels>:

Error_Status PWM_xSetChannels(PWM_Channels Copy_xChannel,PWM_Com_OutputMode Copy_xOutputMode)
{
    452a:	df 93       	push	r29
    452c:	cf 93       	push	r28
    452e:	00 d0       	rcall	.+0      	; 0x4530 <PWM_xSetChannels+0x6>
    4530:	00 d0       	rcall	.+0      	; 0x4532 <PWM_xSetChannels+0x8>
    4532:	0f 92       	push	r0
    4534:	cd b7       	in	r28, 0x3d	; 61
    4536:	de b7       	in	r29, 0x3e	; 62
    4538:	89 83       	std	Y+1, r24	; 0x01
    453a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_xOutputMode)
    453c:	8a 81       	ldd	r24, Y+2	; 0x02
    453e:	28 2f       	mov	r18, r24
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	3d 83       	std	Y+5, r19	; 0x05
    4544:	2c 83       	std	Y+4, r18	; 0x04
    4546:	8c 81       	ldd	r24, Y+4	; 0x04
    4548:	9d 81       	ldd	r25, Y+5	; 0x05
    454a:	81 30       	cpi	r24, 0x01	; 1
    454c:	91 05       	cpc	r25, r1
    454e:	e1 f1       	breq	.+120    	; 0x45c8 <PWM_xSetChannels+0x9e>
    4550:	2c 81       	ldd	r18, Y+4	; 0x04
    4552:	3d 81       	ldd	r19, Y+5	; 0x05
    4554:	22 30       	cpi	r18, 0x02	; 2
    4556:	31 05       	cpc	r19, r1
    4558:	2c f4       	brge	.+10     	; 0x4564 <PWM_xSetChannels+0x3a>
    455a:	8c 81       	ldd	r24, Y+4	; 0x04
    455c:	9d 81       	ldd	r25, Y+5	; 0x05
    455e:	00 97       	sbiw	r24, 0x00	; 0
    4560:	71 f0       	breq	.+28     	; 0x457e <PWM_xSetChannels+0x54>
    4562:	9e c0       	rjmp	.+316    	; 0x46a0 <PWM_xSetChannels+0x176>
    4564:	2c 81       	ldd	r18, Y+4	; 0x04
    4566:	3d 81       	ldd	r19, Y+5	; 0x05
    4568:	22 30       	cpi	r18, 0x02	; 2
    456a:	31 05       	cpc	r19, r1
    456c:	09 f4       	brne	.+2      	; 0x4570 <PWM_xSetChannels+0x46>
    456e:	51 c0       	rjmp	.+162    	; 0x4612 <PWM_xSetChannels+0xe8>
    4570:	8c 81       	ldd	r24, Y+4	; 0x04
    4572:	9d 81       	ldd	r25, Y+5	; 0x05
    4574:	83 30       	cpi	r24, 0x03	; 3
    4576:	91 05       	cpc	r25, r1
    4578:	09 f4       	brne	.+2      	; 0x457c <PWM_xSetChannels+0x52>
    457a:	6f c0       	rjmp	.+222    	; 0x465a <PWM_xSetChannels+0x130>
    457c:	91 c0       	rjmp	.+290    	; 0x46a0 <PWM_xSetChannels+0x176>
	{
	case Normal_Port_Operation:
		if (Copy_xChannel==PWM_CH_1)
    457e:	89 81       	ldd	r24, Y+1	; 0x01
    4580:	88 23       	and	r24, r24
    4582:	79 f4       	brne	.+30     	; 0x45a2 <PWM_xSetChannels+0x78>
		{
			CLEAR_BIT(TCCR1A,COM1A1);
    4584:	af e4       	ldi	r26, 0x4F	; 79
    4586:	b0 e0       	ldi	r27, 0x00	; 0
    4588:	ef e4       	ldi	r30, 0x4F	; 79
    458a:	f0 e0       	ldi	r31, 0x00	; 0
    458c:	80 81       	ld	r24, Z
    458e:	8f 77       	andi	r24, 0x7F	; 127
    4590:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A0);
    4592:	af e4       	ldi	r26, 0x4F	; 79
    4594:	b0 e0       	ldi	r27, 0x00	; 0
    4596:	ef e4       	ldi	r30, 0x4F	; 79
    4598:	f0 e0       	ldi	r31, 0x00	; 0
    459a:	80 81       	ld	r24, Z
    459c:	8f 7b       	andi	r24, 0xBF	; 191
    459e:	8c 93       	st	X, r24
    45a0:	81 c0       	rjmp	.+258    	; 0x46a4 <PWM_xSetChannels+0x17a>
		}
		else if (Copy_xChannel==PWM_CH_2)
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	81 30       	cpi	r24, 0x01	; 1
    45a6:	09 f0       	breq	.+2      	; 0x45aa <PWM_xSetChannels+0x80>
    45a8:	7d c0       	rjmp	.+250    	; 0x46a4 <PWM_xSetChannels+0x17a>
		{
			CLEAR_BIT(TCCR1A,COM1B1);
    45aa:	af e4       	ldi	r26, 0x4F	; 79
    45ac:	b0 e0       	ldi	r27, 0x00	; 0
    45ae:	ef e4       	ldi	r30, 0x4F	; 79
    45b0:	f0 e0       	ldi	r31, 0x00	; 0
    45b2:	80 81       	ld	r24, Z
    45b4:	8f 7d       	andi	r24, 0xDF	; 223
    45b6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1B0);
    45b8:	af e4       	ldi	r26, 0x4F	; 79
    45ba:	b0 e0       	ldi	r27, 0x00	; 0
    45bc:	ef e4       	ldi	r30, 0x4F	; 79
    45be:	f0 e0       	ldi	r31, 0x00	; 0
    45c0:	80 81       	ld	r24, Z
    45c2:	8f 7e       	andi	r24, 0xEF	; 239
    45c4:	8c 93       	st	X, r24
    45c6:	6e c0       	rjmp	.+220    	; 0x46a4 <PWM_xSetChannels+0x17a>
		}
		break;

	case Tog_OC1A_CompMatch_OC1B_Disconnected:
		if (Copy_xChannel==PWM_CH_1)
    45c8:	89 81       	ldd	r24, Y+1	; 0x01
    45ca:	88 23       	and	r24, r24
    45cc:	79 f4       	brne	.+30     	; 0x45ec <PWM_xSetChannels+0xc2>
		{
			CLEAR_BIT(TCCR1A,COM1A1);
    45ce:	af e4       	ldi	r26, 0x4F	; 79
    45d0:	b0 e0       	ldi	r27, 0x00	; 0
    45d2:	ef e4       	ldi	r30, 0x4F	; 79
    45d4:	f0 e0       	ldi	r31, 0x00	; 0
    45d6:	80 81       	ld	r24, Z
    45d8:	8f 77       	andi	r24, 0x7F	; 127
    45da:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A0);
    45dc:	af e4       	ldi	r26, 0x4F	; 79
    45de:	b0 e0       	ldi	r27, 0x00	; 0
    45e0:	ef e4       	ldi	r30, 0x4F	; 79
    45e2:	f0 e0       	ldi	r31, 0x00	; 0
    45e4:	80 81       	ld	r24, Z
    45e6:	80 64       	ori	r24, 0x40	; 64
    45e8:	8c 93       	st	X, r24
    45ea:	5c c0       	rjmp	.+184    	; 0x46a4 <PWM_xSetChannels+0x17a>
		}
		else if (Copy_xChannel==PWM_CH_2)
    45ec:	89 81       	ldd	r24, Y+1	; 0x01
    45ee:	81 30       	cpi	r24, 0x01	; 1
    45f0:	09 f0       	breq	.+2      	; 0x45f4 <PWM_xSetChannels+0xca>
    45f2:	58 c0       	rjmp	.+176    	; 0x46a4 <PWM_xSetChannels+0x17a>
		{
			CLEAR_BIT(TCCR1A,COM1B1);
    45f4:	af e4       	ldi	r26, 0x4F	; 79
    45f6:	b0 e0       	ldi	r27, 0x00	; 0
    45f8:	ef e4       	ldi	r30, 0x4F	; 79
    45fa:	f0 e0       	ldi	r31, 0x00	; 0
    45fc:	80 81       	ld	r24, Z
    45fe:	8f 7d       	andi	r24, 0xDF	; 223
    4600:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B0);
    4602:	af e4       	ldi	r26, 0x4F	; 79
    4604:	b0 e0       	ldi	r27, 0x00	; 0
    4606:	ef e4       	ldi	r30, 0x4F	; 79
    4608:	f0 e0       	ldi	r31, 0x00	; 0
    460a:	80 81       	ld	r24, Z
    460c:	80 61       	ori	r24, 0x10	; 16
    460e:	8c 93       	st	X, r24
    4610:	49 c0       	rjmp	.+146    	; 0x46a4 <PWM_xSetChannels+0x17a>
		}
		break;

	case Clr_OC1A_OC1B_CompMatchNonInvert:
		if (Copy_xChannel==PWM_CH_1)
    4612:	89 81       	ldd	r24, Y+1	; 0x01
    4614:	88 23       	and	r24, r24
    4616:	79 f4       	brne	.+30     	; 0x4636 <PWM_xSetChannels+0x10c>
		{
			SET_BIT(TCCR1A,COM1A1);
    4618:	af e4       	ldi	r26, 0x4F	; 79
    461a:	b0 e0       	ldi	r27, 0x00	; 0
    461c:	ef e4       	ldi	r30, 0x4F	; 79
    461e:	f0 e0       	ldi	r31, 0x00	; 0
    4620:	80 81       	ld	r24, Z
    4622:	80 68       	ori	r24, 0x80	; 128
    4624:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A0);
    4626:	af e4       	ldi	r26, 0x4F	; 79
    4628:	b0 e0       	ldi	r27, 0x00	; 0
    462a:	ef e4       	ldi	r30, 0x4F	; 79
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	80 81       	ld	r24, Z
    4630:	8f 7b       	andi	r24, 0xBF	; 191
    4632:	8c 93       	st	X, r24
    4634:	37 c0       	rjmp	.+110    	; 0x46a4 <PWM_xSetChannels+0x17a>
		}
		else if (Copy_xChannel==PWM_CH_2)
    4636:	89 81       	ldd	r24, Y+1	; 0x01
    4638:	81 30       	cpi	r24, 0x01	; 1
    463a:	a1 f5       	brne	.+104    	; 0x46a4 <PWM_xSetChannels+0x17a>
		{
			SET_BIT(TCCR1A,COM1B1);
    463c:	af e4       	ldi	r26, 0x4F	; 79
    463e:	b0 e0       	ldi	r27, 0x00	; 0
    4640:	ef e4       	ldi	r30, 0x4F	; 79
    4642:	f0 e0       	ldi	r31, 0x00	; 0
    4644:	80 81       	ld	r24, Z
    4646:	80 62       	ori	r24, 0x20	; 32
    4648:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1B0);
    464a:	af e4       	ldi	r26, 0x4F	; 79
    464c:	b0 e0       	ldi	r27, 0x00	; 0
    464e:	ef e4       	ldi	r30, 0x4F	; 79
    4650:	f0 e0       	ldi	r31, 0x00	; 0
    4652:	80 81       	ld	r24, Z
    4654:	8f 7e       	andi	r24, 0xEF	; 239
    4656:	8c 93       	st	X, r24
    4658:	25 c0       	rjmp	.+74     	; 0x46a4 <PWM_xSetChannels+0x17a>
		}
		break;

	case Set_OC1A_OC1B_CompMatchInvert:
		if (Copy_xChannel==PWM_CH_1)
    465a:	89 81       	ldd	r24, Y+1	; 0x01
    465c:	88 23       	and	r24, r24
    465e:	71 f4       	brne	.+28     	; 0x467c <PWM_xSetChannels+0x152>
		{
			SET_BIT(TCCR1A,COM1A1);
    4660:	af e4       	ldi	r26, 0x4F	; 79
    4662:	b0 e0       	ldi	r27, 0x00	; 0
    4664:	ef e4       	ldi	r30, 0x4F	; 79
    4666:	f0 e0       	ldi	r31, 0x00	; 0
    4668:	80 81       	ld	r24, Z
    466a:	80 68       	ori	r24, 0x80	; 128
    466c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A0);
    466e:	af e4       	ldi	r26, 0x4F	; 79
    4670:	b0 e0       	ldi	r27, 0x00	; 0
    4672:	ef e4       	ldi	r30, 0x4F	; 79
    4674:	f0 e0       	ldi	r31, 0x00	; 0
    4676:	80 81       	ld	r24, Z
    4678:	80 64       	ori	r24, 0x40	; 64
    467a:	8c 93       	st	X, r24
		}
		if (Copy_xChannel==PWM_CH_2)
    467c:	89 81       	ldd	r24, Y+1	; 0x01
    467e:	81 30       	cpi	r24, 0x01	; 1
    4680:	89 f4       	brne	.+34     	; 0x46a4 <PWM_xSetChannels+0x17a>
		{
			SET_BIT(TCCR1A,COM1B1);
    4682:	af e4       	ldi	r26, 0x4F	; 79
    4684:	b0 e0       	ldi	r27, 0x00	; 0
    4686:	ef e4       	ldi	r30, 0x4F	; 79
    4688:	f0 e0       	ldi	r31, 0x00	; 0
    468a:	80 81       	ld	r24, Z
    468c:	80 62       	ori	r24, 0x20	; 32
    468e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B0);
    4690:	af e4       	ldi	r26, 0x4F	; 79
    4692:	b0 e0       	ldi	r27, 0x00	; 0
    4694:	ef e4       	ldi	r30, 0x4F	; 79
    4696:	f0 e0       	ldi	r31, 0x00	; 0
    4698:	80 81       	ld	r24, Z
    469a:	80 61       	ori	r24, 0x10	; 16
    469c:	8c 93       	st	X, r24
    469e:	02 c0       	rjmp	.+4      	; 0x46a4 <PWM_xSetChannels+0x17a>
		}
		break;

	default:
		return E_NOK;
    46a0:	1b 82       	std	Y+3, r1	; 0x03
    46a2:	02 c0       	rjmp	.+4      	; 0x46a8 <PWM_xSetChannels+0x17e>
		break;
	}
	return E_OK;
    46a4:	91 e0       	ldi	r25, 0x01	; 1
    46a6:	9b 83       	std	Y+3, r25	; 0x03
    46a8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    46aa:	0f 90       	pop	r0
    46ac:	0f 90       	pop	r0
    46ae:	0f 90       	pop	r0
    46b0:	0f 90       	pop	r0
    46b2:	0f 90       	pop	r0
    46b4:	cf 91       	pop	r28
    46b6:	df 91       	pop	r29
    46b8:	08 95       	ret

000046ba <PWM_xSetMode>:

static Error_Status PWM_xSetMode(PWM_Mode Copy_xMode)
{
    46ba:	df 93       	push	r29
    46bc:	cf 93       	push	r28
    46be:	00 d0       	rcall	.+0      	; 0x46c0 <PWM_xSetMode+0x6>
    46c0:	00 d0       	rcall	.+0      	; 0x46c2 <PWM_xSetMode+0x8>
    46c2:	cd b7       	in	r28, 0x3d	; 61
    46c4:	de b7       	in	r29, 0x3e	; 62
    46c6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xMode)
    46c8:	89 81       	ldd	r24, Y+1	; 0x01
    46ca:	28 2f       	mov	r18, r24
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	3c 83       	std	Y+4, r19	; 0x04
    46d0:	2b 83       	std	Y+3, r18	; 0x03
    46d2:	8b 81       	ldd	r24, Y+3	; 0x03
    46d4:	9c 81       	ldd	r25, Y+4	; 0x04
    46d6:	85 30       	cpi	r24, 0x05	; 5
    46d8:	91 05       	cpc	r25, r1
    46da:	09 f4       	brne	.+2      	; 0x46de <PWM_xSetMode+0x24>
    46dc:	e5 c0       	rjmp	.+458    	; 0x48a8 <PWM_xSetMode+0x1ee>
    46de:	2b 81       	ldd	r18, Y+3	; 0x03
    46e0:	3c 81       	ldd	r19, Y+4	; 0x04
    46e2:	26 30       	cpi	r18, 0x06	; 6
    46e4:	31 05       	cpc	r19, r1
    46e6:	24 f5       	brge	.+72     	; 0x4730 <PWM_xSetMode+0x76>
    46e8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ea:	9c 81       	ldd	r25, Y+4	; 0x04
    46ec:	82 30       	cpi	r24, 0x02	; 2
    46ee:	91 05       	cpc	r25, r1
    46f0:	09 f4       	brne	.+2      	; 0x46f4 <PWM_xSetMode+0x3a>
    46f2:	83 c0       	rjmp	.+262    	; 0x47fa <PWM_xSetMode+0x140>
    46f4:	2b 81       	ldd	r18, Y+3	; 0x03
    46f6:	3c 81       	ldd	r19, Y+4	; 0x04
    46f8:	23 30       	cpi	r18, 0x03	; 3
    46fa:	31 05       	cpc	r19, r1
    46fc:	64 f4       	brge	.+24     	; 0x4716 <PWM_xSetMode+0x5c>
    46fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4700:	9c 81       	ldd	r25, Y+4	; 0x04
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	09 f4       	brne	.+2      	; 0x4708 <PWM_xSetMode+0x4e>
    4706:	3f c0       	rjmp	.+126    	; 0x4786 <PWM_xSetMode+0xcc>
    4708:	2b 81       	ldd	r18, Y+3	; 0x03
    470a:	3c 81       	ldd	r19, Y+4	; 0x04
    470c:	21 30       	cpi	r18, 0x01	; 1
    470e:	31 05       	cpc	r19, r1
    4710:	09 f4       	brne	.+2      	; 0x4714 <PWM_xSetMode+0x5a>
    4712:	56 c0       	rjmp	.+172    	; 0x47c0 <PWM_xSetMode+0x106>
    4714:	94 c1       	rjmp	.+808    	; 0x4a3e <PWM_xSetMode+0x384>
    4716:	8b 81       	ldd	r24, Y+3	; 0x03
    4718:	9c 81       	ldd	r25, Y+4	; 0x04
    471a:	83 30       	cpi	r24, 0x03	; 3
    471c:	91 05       	cpc	r25, r1
    471e:	09 f4       	brne	.+2      	; 0x4722 <PWM_xSetMode+0x68>
    4720:	89 c0       	rjmp	.+274    	; 0x4834 <PWM_xSetMode+0x17a>
    4722:	2b 81       	ldd	r18, Y+3	; 0x03
    4724:	3c 81       	ldd	r19, Y+4	; 0x04
    4726:	24 30       	cpi	r18, 0x04	; 4
    4728:	31 05       	cpc	r19, r1
    472a:	09 f4       	brne	.+2      	; 0x472e <PWM_xSetMode+0x74>
    472c:	a0 c0       	rjmp	.+320    	; 0x486e <PWM_xSetMode+0x1b4>
    472e:	87 c1       	rjmp	.+782    	; 0x4a3e <PWM_xSetMode+0x384>
    4730:	8b 81       	ldd	r24, Y+3	; 0x03
    4732:	9c 81       	ldd	r25, Y+4	; 0x04
    4734:	88 30       	cpi	r24, 0x08	; 8
    4736:	91 05       	cpc	r25, r1
    4738:	09 f4       	brne	.+2      	; 0x473c <PWM_xSetMode+0x82>
    473a:	0d c1       	rjmp	.+538    	; 0x4956 <PWM_xSetMode+0x29c>
    473c:	2b 81       	ldd	r18, Y+3	; 0x03
    473e:	3c 81       	ldd	r19, Y+4	; 0x04
    4740:	29 30       	cpi	r18, 0x09	; 9
    4742:	31 05       	cpc	r19, r1
    4744:	6c f4       	brge	.+26     	; 0x4760 <PWM_xSetMode+0xa6>
    4746:	8b 81       	ldd	r24, Y+3	; 0x03
    4748:	9c 81       	ldd	r25, Y+4	; 0x04
    474a:	86 30       	cpi	r24, 0x06	; 6
    474c:	91 05       	cpc	r25, r1
    474e:	09 f4       	brne	.+2      	; 0x4752 <PWM_xSetMode+0x98>
    4750:	c8 c0       	rjmp	.+400    	; 0x48e2 <PWM_xSetMode+0x228>
    4752:	2b 81       	ldd	r18, Y+3	; 0x03
    4754:	3c 81       	ldd	r19, Y+4	; 0x04
    4756:	27 30       	cpi	r18, 0x07	; 7
    4758:	31 05       	cpc	r19, r1
    475a:	09 f4       	brne	.+2      	; 0x475e <PWM_xSetMode+0xa4>
    475c:	df c0       	rjmp	.+446    	; 0x491c <PWM_xSetMode+0x262>
    475e:	6f c1       	rjmp	.+734    	; 0x4a3e <PWM_xSetMode+0x384>
    4760:	8b 81       	ldd	r24, Y+3	; 0x03
    4762:	9c 81       	ldd	r25, Y+4	; 0x04
    4764:	8a 30       	cpi	r24, 0x0A	; 10
    4766:	91 05       	cpc	r25, r1
    4768:	09 f4       	brne	.+2      	; 0x476c <PWM_xSetMode+0xb2>
    476a:	2f c1       	rjmp	.+606    	; 0x49ca <PWM_xSetMode+0x310>
    476c:	2b 81       	ldd	r18, Y+3	; 0x03
    476e:	3c 81       	ldd	r19, Y+4	; 0x04
    4770:	2a 30       	cpi	r18, 0x0A	; 10
    4772:	31 05       	cpc	r19, r1
    4774:	0c f4       	brge	.+2      	; 0x4778 <PWM_xSetMode+0xbe>
    4776:	0c c1       	rjmp	.+536    	; 0x4990 <PWM_xSetMode+0x2d6>
    4778:	8b 81       	ldd	r24, Y+3	; 0x03
    477a:	9c 81       	ldd	r25, Y+4	; 0x04
    477c:	8b 30       	cpi	r24, 0x0B	; 11
    477e:	91 05       	cpc	r25, r1
    4780:	09 f4       	brne	.+2      	; 0x4784 <PWM_xSetMode+0xca>
    4782:	40 c1       	rjmp	.+640    	; 0x4a04 <PWM_xSetMode+0x34a>
    4784:	5c c1       	rjmp	.+696    	; 0x4a3e <PWM_xSetMode+0x384>
	{
	case TIMER1_WGM_PWM_8     :
		SET_BIT(TCCR1A,WGM10);
    4786:	af e4       	ldi	r26, 0x4F	; 79
    4788:	b0 e0       	ldi	r27, 0x00	; 0
    478a:	ef e4       	ldi	r30, 0x4F	; 79
    478c:	f0 e0       	ldi	r31, 0x00	; 0
    478e:	80 81       	ld	r24, Z
    4790:	81 60       	ori	r24, 0x01	; 1
    4792:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    4794:	af e4       	ldi	r26, 0x4F	; 79
    4796:	b0 e0       	ldi	r27, 0x00	; 0
    4798:	ef e4       	ldi	r30, 0x4F	; 79
    479a:	f0 e0       	ldi	r31, 0x00	; 0
    479c:	80 81       	ld	r24, Z
    479e:	8d 7f       	andi	r24, 0xFD	; 253
    47a0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    47a2:	ae e4       	ldi	r26, 0x4E	; 78
    47a4:	b0 e0       	ldi	r27, 0x00	; 0
    47a6:	ee e4       	ldi	r30, 0x4E	; 78
    47a8:	f0 e0       	ldi	r31, 0x00	; 0
    47aa:	80 81       	ld	r24, Z
    47ac:	87 7f       	andi	r24, 0xF7	; 247
    47ae:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    47b0:	ae e4       	ldi	r26, 0x4E	; 78
    47b2:	b0 e0       	ldi	r27, 0x00	; 0
    47b4:	ee e4       	ldi	r30, 0x4E	; 78
    47b6:	f0 e0       	ldi	r31, 0x00	; 0
    47b8:	80 81       	ld	r24, Z
    47ba:	8f 7e       	andi	r24, 0xEF	; 239
    47bc:	8c 93       	st	X, r24
    47be:	41 c1       	rjmp	.+642    	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_9     :
		CLEAR_BIT(TCCR1A,WGM10);
    47c0:	af e4       	ldi	r26, 0x4F	; 79
    47c2:	b0 e0       	ldi	r27, 0x00	; 0
    47c4:	ef e4       	ldi	r30, 0x4F	; 79
    47c6:	f0 e0       	ldi	r31, 0x00	; 0
    47c8:	80 81       	ld	r24, Z
    47ca:	8e 7f       	andi	r24, 0xFE	; 254
    47cc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    47ce:	af e4       	ldi	r26, 0x4F	; 79
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	ef e4       	ldi	r30, 0x4F	; 79
    47d4:	f0 e0       	ldi	r31, 0x00	; 0
    47d6:	80 81       	ld	r24, Z
    47d8:	82 60       	ori	r24, 0x02	; 2
    47da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    47dc:	ae e4       	ldi	r26, 0x4E	; 78
    47de:	b0 e0       	ldi	r27, 0x00	; 0
    47e0:	ee e4       	ldi	r30, 0x4E	; 78
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	80 81       	ld	r24, Z
    47e6:	87 7f       	andi	r24, 0xF7	; 247
    47e8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    47ea:	ae e4       	ldi	r26, 0x4E	; 78
    47ec:	b0 e0       	ldi	r27, 0x00	; 0
    47ee:	ee e4       	ldi	r30, 0x4E	; 78
    47f0:	f0 e0       	ldi	r31, 0x00	; 0
    47f2:	80 81       	ld	r24, Z
    47f4:	8f 7e       	andi	r24, 0xEF	; 239
    47f6:	8c 93       	st	X, r24
    47f8:	24 c1       	rjmp	.+584    	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_10	  :
		SET_BIT(TCCR1A,WGM10);
    47fa:	af e4       	ldi	r26, 0x4F	; 79
    47fc:	b0 e0       	ldi	r27, 0x00	; 0
    47fe:	ef e4       	ldi	r30, 0x4F	; 79
    4800:	f0 e0       	ldi	r31, 0x00	; 0
    4802:	80 81       	ld	r24, Z
    4804:	81 60       	ori	r24, 0x01	; 1
    4806:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    4808:	af e4       	ldi	r26, 0x4F	; 79
    480a:	b0 e0       	ldi	r27, 0x00	; 0
    480c:	ef e4       	ldi	r30, 0x4F	; 79
    480e:	f0 e0       	ldi	r31, 0x00	; 0
    4810:	80 81       	ld	r24, Z
    4812:	82 60       	ori	r24, 0x02	; 2
    4814:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    4816:	ae e4       	ldi	r26, 0x4E	; 78
    4818:	b0 e0       	ldi	r27, 0x00	; 0
    481a:	ee e4       	ldi	r30, 0x4E	; 78
    481c:	f0 e0       	ldi	r31, 0x00	; 0
    481e:	80 81       	ld	r24, Z
    4820:	87 7f       	andi	r24, 0xF7	; 247
    4822:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    4824:	ae e4       	ldi	r26, 0x4E	; 78
    4826:	b0 e0       	ldi	r27, 0x00	; 0
    4828:	ee e4       	ldi	r30, 0x4E	; 78
    482a:	f0 e0       	ldi	r31, 0x00	; 0
    482c:	80 81       	ld	r24, Z
    482e:	8f 7e       	andi	r24, 0xEF	; 239
    4830:	8c 93       	st	X, r24
    4832:	07 c1       	rjmp	.+526    	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_FPWM_8	  :
		SET_BIT(TCCR1A,WGM10);
    4834:	af e4       	ldi	r26, 0x4F	; 79
    4836:	b0 e0       	ldi	r27, 0x00	; 0
    4838:	ef e4       	ldi	r30, 0x4F	; 79
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	80 81       	ld	r24, Z
    483e:	81 60       	ori	r24, 0x01	; 1
    4840:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    4842:	af e4       	ldi	r26, 0x4F	; 79
    4844:	b0 e0       	ldi	r27, 0x00	; 0
    4846:	ef e4       	ldi	r30, 0x4F	; 79
    4848:	f0 e0       	ldi	r31, 0x00	; 0
    484a:	80 81       	ld	r24, Z
    484c:	8d 7f       	andi	r24, 0xFD	; 253
    484e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    4850:	ae e4       	ldi	r26, 0x4E	; 78
    4852:	b0 e0       	ldi	r27, 0x00	; 0
    4854:	ee e4       	ldi	r30, 0x4E	; 78
    4856:	f0 e0       	ldi	r31, 0x00	; 0
    4858:	80 81       	ld	r24, Z
    485a:	88 60       	ori	r24, 0x08	; 8
    485c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    485e:	ae e4       	ldi	r26, 0x4E	; 78
    4860:	b0 e0       	ldi	r27, 0x00	; 0
    4862:	ee e4       	ldi	r30, 0x4E	; 78
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	80 81       	ld	r24, Z
    4868:	8f 7e       	andi	r24, 0xEF	; 239
    486a:	8c 93       	st	X, r24
    486c:	ea c0       	rjmp	.+468    	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_FPWM_9	  :
		CLEAR_BIT(TCCR1A,WGM10);
    486e:	af e4       	ldi	r26, 0x4F	; 79
    4870:	b0 e0       	ldi	r27, 0x00	; 0
    4872:	ef e4       	ldi	r30, 0x4F	; 79
    4874:	f0 e0       	ldi	r31, 0x00	; 0
    4876:	80 81       	ld	r24, Z
    4878:	8e 7f       	andi	r24, 0xFE	; 254
    487a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    487c:	af e4       	ldi	r26, 0x4F	; 79
    487e:	b0 e0       	ldi	r27, 0x00	; 0
    4880:	ef e4       	ldi	r30, 0x4F	; 79
    4882:	f0 e0       	ldi	r31, 0x00	; 0
    4884:	80 81       	ld	r24, Z
    4886:	82 60       	ori	r24, 0x02	; 2
    4888:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    488a:	ae e4       	ldi	r26, 0x4E	; 78
    488c:	b0 e0       	ldi	r27, 0x00	; 0
    488e:	ee e4       	ldi	r30, 0x4E	; 78
    4890:	f0 e0       	ldi	r31, 0x00	; 0
    4892:	80 81       	ld	r24, Z
    4894:	88 60       	ori	r24, 0x08	; 8
    4896:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    4898:	ae e4       	ldi	r26, 0x4E	; 78
    489a:	b0 e0       	ldi	r27, 0x00	; 0
    489c:	ee e4       	ldi	r30, 0x4E	; 78
    489e:	f0 e0       	ldi	r31, 0x00	; 0
    48a0:	80 81       	ld	r24, Z
    48a2:	8f 7e       	andi	r24, 0xEF	; 239
    48a4:	8c 93       	st	X, r24
    48a6:	cd c0       	rjmp	.+410    	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_FPWM_10	  :
		SET_BIT(TCCR1A,WGM10);
    48a8:	af e4       	ldi	r26, 0x4F	; 79
    48aa:	b0 e0       	ldi	r27, 0x00	; 0
    48ac:	ef e4       	ldi	r30, 0x4F	; 79
    48ae:	f0 e0       	ldi	r31, 0x00	; 0
    48b0:	80 81       	ld	r24, Z
    48b2:	81 60       	ori	r24, 0x01	; 1
    48b4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    48b6:	af e4       	ldi	r26, 0x4F	; 79
    48b8:	b0 e0       	ldi	r27, 0x00	; 0
    48ba:	ef e4       	ldi	r30, 0x4F	; 79
    48bc:	f0 e0       	ldi	r31, 0x00	; 0
    48be:	80 81       	ld	r24, Z
    48c0:	82 60       	ori	r24, 0x02	; 2
    48c2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    48c4:	ae e4       	ldi	r26, 0x4E	; 78
    48c6:	b0 e0       	ldi	r27, 0x00	; 0
    48c8:	ee e4       	ldi	r30, 0x4E	; 78
    48ca:	f0 e0       	ldi	r31, 0x00	; 0
    48cc:	80 81       	ld	r24, Z
    48ce:	88 60       	ori	r24, 0x08	; 8
    48d0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    48d2:	ae e4       	ldi	r26, 0x4E	; 78
    48d4:	b0 e0       	ldi	r27, 0x00	; 0
    48d6:	ee e4       	ldi	r30, 0x4E	; 78
    48d8:	f0 e0       	ldi	r31, 0x00	; 0
    48da:	80 81       	ld	r24, Z
    48dc:	8f 7e       	andi	r24, 0xEF	; 239
    48de:	8c 93       	st	X, r24
    48e0:	b0 c0       	rjmp	.+352    	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_PF_ICR:
		CLEAR_BIT(TCCR1A,WGM10);
    48e2:	af e4       	ldi	r26, 0x4F	; 79
    48e4:	b0 e0       	ldi	r27, 0x00	; 0
    48e6:	ef e4       	ldi	r30, 0x4F	; 79
    48e8:	f0 e0       	ldi	r31, 0x00	; 0
    48ea:	80 81       	ld	r24, Z
    48ec:	8e 7f       	andi	r24, 0xFE	; 254
    48ee:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    48f0:	af e4       	ldi	r26, 0x4F	; 79
    48f2:	b0 e0       	ldi	r27, 0x00	; 0
    48f4:	ef e4       	ldi	r30, 0x4F	; 79
    48f6:	f0 e0       	ldi	r31, 0x00	; 0
    48f8:	80 81       	ld	r24, Z
    48fa:	8d 7f       	andi	r24, 0xFD	; 253
    48fc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    48fe:	ae e4       	ldi	r26, 0x4E	; 78
    4900:	b0 e0       	ldi	r27, 0x00	; 0
    4902:	ee e4       	ldi	r30, 0x4E	; 78
    4904:	f0 e0       	ldi	r31, 0x00	; 0
    4906:	80 81       	ld	r24, Z
    4908:	87 7f       	andi	r24, 0xF7	; 247
    490a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    490c:	ae e4       	ldi	r26, 0x4E	; 78
    490e:	b0 e0       	ldi	r27, 0x00	; 0
    4910:	ee e4       	ldi	r30, 0x4E	; 78
    4912:	f0 e0       	ldi	r31, 0x00	; 0
    4914:	80 81       	ld	r24, Z
    4916:	80 61       	ori	r24, 0x10	; 16
    4918:	8c 93       	st	X, r24
    491a:	93 c0       	rjmp	.+294    	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_PF_OCR:
		SET_BIT(TCCR1A,WGM10);
    491c:	af e4       	ldi	r26, 0x4F	; 79
    491e:	b0 e0       	ldi	r27, 0x00	; 0
    4920:	ef e4       	ldi	r30, 0x4F	; 79
    4922:	f0 e0       	ldi	r31, 0x00	; 0
    4924:	80 81       	ld	r24, Z
    4926:	81 60       	ori	r24, 0x01	; 1
    4928:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    492a:	af e4       	ldi	r26, 0x4F	; 79
    492c:	b0 e0       	ldi	r27, 0x00	; 0
    492e:	ef e4       	ldi	r30, 0x4F	; 79
    4930:	f0 e0       	ldi	r31, 0x00	; 0
    4932:	80 81       	ld	r24, Z
    4934:	8d 7f       	andi	r24, 0xFD	; 253
    4936:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    4938:	ae e4       	ldi	r26, 0x4E	; 78
    493a:	b0 e0       	ldi	r27, 0x00	; 0
    493c:	ee e4       	ldi	r30, 0x4E	; 78
    493e:	f0 e0       	ldi	r31, 0x00	; 0
    4940:	80 81       	ld	r24, Z
    4942:	87 7f       	andi	r24, 0xF7	; 247
    4944:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    4946:	ae e4       	ldi	r26, 0x4E	; 78
    4948:	b0 e0       	ldi	r27, 0x00	; 0
    494a:	ee e4       	ldi	r30, 0x4E	; 78
    494c:	f0 e0       	ldi	r31, 0x00	; 0
    494e:	80 81       	ld	r24, Z
    4950:	80 61       	ori	r24, 0x10	; 16
    4952:	8c 93       	st	X, r24
    4954:	76 c0       	rjmp	.+236    	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_P_ICR :
		CLEAR_BIT(TCCR1A,WGM10);
    4956:	af e4       	ldi	r26, 0x4F	; 79
    4958:	b0 e0       	ldi	r27, 0x00	; 0
    495a:	ef e4       	ldi	r30, 0x4F	; 79
    495c:	f0 e0       	ldi	r31, 0x00	; 0
    495e:	80 81       	ld	r24, Z
    4960:	8e 7f       	andi	r24, 0xFE	; 254
    4962:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    4964:	af e4       	ldi	r26, 0x4F	; 79
    4966:	b0 e0       	ldi	r27, 0x00	; 0
    4968:	ef e4       	ldi	r30, 0x4F	; 79
    496a:	f0 e0       	ldi	r31, 0x00	; 0
    496c:	80 81       	ld	r24, Z
    496e:	82 60       	ori	r24, 0x02	; 2
    4970:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    4972:	ae e4       	ldi	r26, 0x4E	; 78
    4974:	b0 e0       	ldi	r27, 0x00	; 0
    4976:	ee e4       	ldi	r30, 0x4E	; 78
    4978:	f0 e0       	ldi	r31, 0x00	; 0
    497a:	80 81       	ld	r24, Z
    497c:	87 7f       	andi	r24, 0xF7	; 247
    497e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    4980:	ae e4       	ldi	r26, 0x4E	; 78
    4982:	b0 e0       	ldi	r27, 0x00	; 0
    4984:	ee e4       	ldi	r30, 0x4E	; 78
    4986:	f0 e0       	ldi	r31, 0x00	; 0
    4988:	80 81       	ld	r24, Z
    498a:	80 61       	ori	r24, 0x10	; 16
    498c:	8c 93       	st	X, r24
    498e:	59 c0       	rjmp	.+178    	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_PWM_P_OCR :
		SET_BIT(TCCR1A,WGM10);
    4990:	af e4       	ldi	r26, 0x4F	; 79
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	ef e4       	ldi	r30, 0x4F	; 79
    4996:	f0 e0       	ldi	r31, 0x00	; 0
    4998:	80 81       	ld	r24, Z
    499a:	81 60       	ori	r24, 0x01	; 1
    499c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    499e:	af e4       	ldi	r26, 0x4F	; 79
    49a0:	b0 e0       	ldi	r27, 0x00	; 0
    49a2:	ef e4       	ldi	r30, 0x4F	; 79
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	80 81       	ld	r24, Z
    49a8:	82 60       	ori	r24, 0x02	; 2
    49aa:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    49ac:	ae e4       	ldi	r26, 0x4E	; 78
    49ae:	b0 e0       	ldi	r27, 0x00	; 0
    49b0:	ee e4       	ldi	r30, 0x4E	; 78
    49b2:	f0 e0       	ldi	r31, 0x00	; 0
    49b4:	80 81       	ld	r24, Z
    49b6:	87 7f       	andi	r24, 0xF7	; 247
    49b8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    49ba:	ae e4       	ldi	r26, 0x4E	; 78
    49bc:	b0 e0       	ldi	r27, 0x00	; 0
    49be:	ee e4       	ldi	r30, 0x4E	; 78
    49c0:	f0 e0       	ldi	r31, 0x00	; 0
    49c2:	80 81       	ld	r24, Z
    49c4:	80 61       	ori	r24, 0x10	; 16
    49c6:	8c 93       	st	X, r24
    49c8:	3c c0       	rjmp	.+120    	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_FPWM_ICR  :
		CLEAR_BIT(TCCR1A,WGM10);
    49ca:	af e4       	ldi	r26, 0x4F	; 79
    49cc:	b0 e0       	ldi	r27, 0x00	; 0
    49ce:	ef e4       	ldi	r30, 0x4F	; 79
    49d0:	f0 e0       	ldi	r31, 0x00	; 0
    49d2:	80 81       	ld	r24, Z
    49d4:	8e 7f       	andi	r24, 0xFE	; 254
    49d6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    49d8:	af e4       	ldi	r26, 0x4F	; 79
    49da:	b0 e0       	ldi	r27, 0x00	; 0
    49dc:	ef e4       	ldi	r30, 0x4F	; 79
    49de:	f0 e0       	ldi	r31, 0x00	; 0
    49e0:	80 81       	ld	r24, Z
    49e2:	82 60       	ori	r24, 0x02	; 2
    49e4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    49e6:	ae e4       	ldi	r26, 0x4E	; 78
    49e8:	b0 e0       	ldi	r27, 0x00	; 0
    49ea:	ee e4       	ldi	r30, 0x4E	; 78
    49ec:	f0 e0       	ldi	r31, 0x00	; 0
    49ee:	80 81       	ld	r24, Z
    49f0:	88 60       	ori	r24, 0x08	; 8
    49f2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    49f4:	ae e4       	ldi	r26, 0x4E	; 78
    49f6:	b0 e0       	ldi	r27, 0x00	; 0
    49f8:	ee e4       	ldi	r30, 0x4E	; 78
    49fa:	f0 e0       	ldi	r31, 0x00	; 0
    49fc:	80 81       	ld	r24, Z
    49fe:	80 61       	ori	r24, 0x10	; 16
    4a00:	8c 93       	st	X, r24
    4a02:	1f c0       	rjmp	.+62     	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	case TIMER1_WGM_FPWM_OCR  :
		SET_BIT(TCCR1A,WGM10);
    4a04:	af e4       	ldi	r26, 0x4F	; 79
    4a06:	b0 e0       	ldi	r27, 0x00	; 0
    4a08:	ef e4       	ldi	r30, 0x4F	; 79
    4a0a:	f0 e0       	ldi	r31, 0x00	; 0
    4a0c:	80 81       	ld	r24, Z
    4a0e:	81 60       	ori	r24, 0x01	; 1
    4a10:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    4a12:	af e4       	ldi	r26, 0x4F	; 79
    4a14:	b0 e0       	ldi	r27, 0x00	; 0
    4a16:	ef e4       	ldi	r30, 0x4F	; 79
    4a18:	f0 e0       	ldi	r31, 0x00	; 0
    4a1a:	80 81       	ld	r24, Z
    4a1c:	82 60       	ori	r24, 0x02	; 2
    4a1e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM12);
    4a20:	af e4       	ldi	r26, 0x4F	; 79
    4a22:	b0 e0       	ldi	r27, 0x00	; 0
    4a24:	ef e4       	ldi	r30, 0x4F	; 79
    4a26:	f0 e0       	ldi	r31, 0x00	; 0
    4a28:	80 81       	ld	r24, Z
    4a2a:	88 60       	ori	r24, 0x08	; 8
    4a2c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM13);
    4a2e:	af e4       	ldi	r26, 0x4F	; 79
    4a30:	b0 e0       	ldi	r27, 0x00	; 0
    4a32:	ef e4       	ldi	r30, 0x4F	; 79
    4a34:	f0 e0       	ldi	r31, 0x00	; 0
    4a36:	80 81       	ld	r24, Z
    4a38:	80 61       	ori	r24, 0x10	; 16
    4a3a:	8c 93       	st	X, r24
    4a3c:	02 c0       	rjmp	.+4      	; 0x4a42 <PWM_xSetMode+0x388>
		break;
	default:
		return E_NOK;
    4a3e:	1a 82       	std	Y+2, r1	; 0x02
    4a40:	02 c0       	rjmp	.+4      	; 0x4a46 <PWM_xSetMode+0x38c>
		break;
	}
	return E_OK;
    4a42:	91 e0       	ldi	r25, 0x01	; 1
    4a44:	9a 83       	std	Y+2, r25	; 0x02
    4a46:	8a 81       	ldd	r24, Y+2	; 0x02

}
    4a48:	0f 90       	pop	r0
    4a4a:	0f 90       	pop	r0
    4a4c:	0f 90       	pop	r0
    4a4e:	0f 90       	pop	r0
    4a50:	cf 91       	pop	r28
    4a52:	df 91       	pop	r29
    4a54:	08 95       	ret

00004a56 <PWM_xSetDutyCycle>:

Error_Status PWM_xSetDutyCycle(PWM_Channels Copy_xChannel,float32 Copy_f32DutyCycle)
{
    4a56:	df 93       	push	r29
    4a58:	cf 93       	push	r28
    4a5a:	cd b7       	in	r28, 0x3d	; 61
    4a5c:	de b7       	in	r29, 0x3e	; 62
    4a5e:	2a 97       	sbiw	r28, 0x0a	; 10
    4a60:	0f b6       	in	r0, 0x3f	; 63
    4a62:	f8 94       	cli
    4a64:	de bf       	out	0x3e, r29	; 62
    4a66:	0f be       	out	0x3f, r0	; 63
    4a68:	cd bf       	out	0x3d, r28	; 61
    4a6a:	8b 83       	std	Y+3, r24	; 0x03
    4a6c:	4c 83       	std	Y+4, r20	; 0x04
    4a6e:	5d 83       	std	Y+5, r21	; 0x05
    4a70:	6e 83       	std	Y+6, r22	; 0x06
    4a72:	7f 83       	std	Y+7, r23	; 0x07
	Copy_f32DutyCycle		=	Copy_f32DutyCycle/100;
    4a74:	6c 81       	ldd	r22, Y+4	; 0x04
    4a76:	7d 81       	ldd	r23, Y+5	; 0x05
    4a78:	8e 81       	ldd	r24, Y+6	; 0x06
    4a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    4a7c:	20 e0       	ldi	r18, 0x00	; 0
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	48 ec       	ldi	r20, 0xC8	; 200
    4a82:	52 e4       	ldi	r21, 0x42	; 66
    4a84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	8c 83       	std	Y+4, r24	; 0x04
    4a8e:	9d 83       	std	Y+5, r25	; 0x05
    4a90:	ae 83       	std	Y+6, r26	; 0x06
    4a92:	bf 83       	std	Y+7, r27	; 0x07
	uint16 u16PWM_RegVal	=	(uint16)(ICR1 * Copy_f32DutyCycle);
    4a94:	e6 e4       	ldi	r30, 0x46	; 70
    4a96:	f0 e0       	ldi	r31, 0x00	; 0
    4a98:	80 81       	ld	r24, Z
    4a9a:	91 81       	ldd	r25, Z+1	; 0x01
    4a9c:	cc 01       	movw	r24, r24
    4a9e:	a0 e0       	ldi	r26, 0x00	; 0
    4aa0:	b0 e0       	ldi	r27, 0x00	; 0
    4aa2:	bc 01       	movw	r22, r24
    4aa4:	cd 01       	movw	r24, r26
    4aa6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	2c 81       	ldd	r18, Y+4	; 0x04
    4ab4:	3d 81       	ldd	r19, Y+5	; 0x05
    4ab6:	4e 81       	ldd	r20, Y+6	; 0x06
    4ab8:	5f 81       	ldd	r21, Y+7	; 0x07
    4aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	cd 01       	movw	r24, r26
    4ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aca:	dc 01       	movw	r26, r24
    4acc:	cb 01       	movw	r24, r22
    4ace:	9a 83       	std	Y+2, r25	; 0x02
    4ad0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_xChannel)
    4ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad4:	28 2f       	mov	r18, r24
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	3a 87       	std	Y+10, r19	; 0x0a
    4ada:	29 87       	std	Y+9, r18	; 0x09
    4adc:	89 85       	ldd	r24, Y+9	; 0x09
    4ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ae0:	00 97       	sbiw	r24, 0x00	; 0
    4ae2:	31 f0       	breq	.+12     	; 0x4af0 <PWM_xSetDutyCycle+0x9a>
    4ae4:	29 85       	ldd	r18, Y+9	; 0x09
    4ae6:	3a 85       	ldd	r19, Y+10	; 0x0a
    4ae8:	21 30       	cpi	r18, 0x01	; 1
    4aea:	31 05       	cpc	r19, r1
    4aec:	41 f0       	breq	.+16     	; 0x4afe <PWM_xSetDutyCycle+0xa8>
    4aee:	0e c0       	rjmp	.+28     	; 0x4b0c <PWM_xSetDutyCycle+0xb6>
	{
	case PWM_CH_1:
		OCR1A	=	u16PWM_RegVal;
    4af0:	ea e4       	ldi	r30, 0x4A	; 74
    4af2:	f0 e0       	ldi	r31, 0x00	; 0
    4af4:	89 81       	ldd	r24, Y+1	; 0x01
    4af6:	9a 81       	ldd	r25, Y+2	; 0x02
    4af8:	91 83       	std	Z+1, r25	; 0x01
    4afa:	80 83       	st	Z, r24
    4afc:	09 c0       	rjmp	.+18     	; 0x4b10 <PWM_xSetDutyCycle+0xba>
		break;
	case PWM_CH_2:
		OCR1B	=	u16PWM_RegVal;
    4afe:	e8 e4       	ldi	r30, 0x48	; 72
    4b00:	f0 e0       	ldi	r31, 0x00	; 0
    4b02:	89 81       	ldd	r24, Y+1	; 0x01
    4b04:	9a 81       	ldd	r25, Y+2	; 0x02
    4b06:	91 83       	std	Z+1, r25	; 0x01
    4b08:	80 83       	st	Z, r24
    4b0a:	02 c0       	rjmp	.+4      	; 0x4b10 <PWM_xSetDutyCycle+0xba>
		break;
	default:
		return E_NOK;
    4b0c:	18 86       	std	Y+8, r1	; 0x08
    4b0e:	02 c0       	rjmp	.+4      	; 0x4b14 <PWM_xSetDutyCycle+0xbe>
		break;
	}
	return E_OK;
    4b10:	31 e0       	ldi	r19, 0x01	; 1
    4b12:	38 87       	std	Y+8, r19	; 0x08
    4b14:	88 85       	ldd	r24, Y+8	; 0x08
}
    4b16:	2a 96       	adiw	r28, 0x0a	; 10
    4b18:	0f b6       	in	r0, 0x3f	; 63
    4b1a:	f8 94       	cli
    4b1c:	de bf       	out	0x3e, r29	; 62
    4b1e:	0f be       	out	0x3f, r0	; 63
    4b20:	cd bf       	out	0x3d, r28	; 61
    4b22:	cf 91       	pop	r28
    4b24:	df 91       	pop	r29
    4b26:	08 95       	ret

00004b28 <PWM_vSetFPWM_Freq>:

void PWM_vSetFPWM_Freq(uint16 Copy_u16Freq)
{
    4b28:	0f 93       	push	r16
    4b2a:	1f 93       	push	r17
    4b2c:	df 93       	push	r29
    4b2e:	cf 93       	push	r28
    4b30:	00 d0       	rcall	.+0      	; 0x4b32 <PWM_vSetFPWM_Freq+0xa>
    4b32:	cd b7       	in	r28, 0x3d	; 61
    4b34:	de b7       	in	r29, 0x3e	; 62
    4b36:	9a 83       	std	Y+2, r25	; 0x02
    4b38:	89 83       	std	Y+1, r24	; 0x01
	/*The PWM resolution for fast PWM can be fixed to 8-bit, 9-bit, or 10-bit, or defined by either ICR1
	or OCR1A*/
	ICR1=(uint16)(F_CPU/(Copy_u16Freq*Global_Prescaler))-1;
    4b3a:	06 e4       	ldi	r16, 0x46	; 70
    4b3c:	10 e0       	ldi	r17, 0x00	; 0
    4b3e:	20 91 6d 04 	lds	r18, 0x046D
    4b42:	30 91 6e 04 	lds	r19, 0x046E
    4b46:	89 81       	ldd	r24, Y+1	; 0x01
    4b48:	9a 81       	ldd	r25, Y+2	; 0x02
    4b4a:	ac 01       	movw	r20, r24
    4b4c:	24 9f       	mul	r18, r20
    4b4e:	c0 01       	movw	r24, r0
    4b50:	25 9f       	mul	r18, r21
    4b52:	90 0d       	add	r25, r0
    4b54:	34 9f       	mul	r19, r20
    4b56:	90 0d       	add	r25, r0
    4b58:	11 24       	eor	r1, r1
    4b5a:	9c 01       	movw	r18, r24
    4b5c:	40 e0       	ldi	r20, 0x00	; 0
    4b5e:	50 e0       	ldi	r21, 0x00	; 0
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	92 e1       	ldi	r25, 0x12	; 18
    4b64:	aa e7       	ldi	r26, 0x7A	; 122
    4b66:	b0 e0       	ldi	r27, 0x00	; 0
    4b68:	bc 01       	movw	r22, r24
    4b6a:	cd 01       	movw	r24, r26
    4b6c:	0e 94 82 2b 	call	0x5704	; 0x5704 <__udivmodsi4>
    4b70:	da 01       	movw	r26, r20
    4b72:	c9 01       	movw	r24, r18
    4b74:	01 97       	sbiw	r24, 0x01	; 1
    4b76:	f8 01       	movw	r30, r16
    4b78:	91 83       	std	Z+1, r25	; 0x01
    4b7a:	80 83       	st	Z, r24
	u16Current_Freq	=	Copy_u16Freq;
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
    4b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b80:	90 93 70 04 	sts	0x0470, r25
    4b84:	80 93 6f 04 	sts	0x046F, r24
}
    4b88:	0f 90       	pop	r0
    4b8a:	0f 90       	pop	r0
    4b8c:	cf 91       	pop	r28
    4b8e:	df 91       	pop	r29
    4b90:	1f 91       	pop	r17
    4b92:	0f 91       	pop	r16
    4b94:	08 95       	ret

00004b96 <PWM_vSetPWM_Freq>:

void PWM_vSetPWM_Freq(uint16 Copy_u16Freq)
{
    4b96:	0f 93       	push	r16
    4b98:	1f 93       	push	r17
    4b9a:	df 93       	push	r29
    4b9c:	cf 93       	push	r28
    4b9e:	00 d0       	rcall	.+0      	; 0x4ba0 <PWM_vSetPWM_Freq+0xa>
    4ba0:	cd b7       	in	r28, 0x3d	; 61
    4ba2:	de b7       	in	r29, 0x3e	; 62
    4ba4:	9a 83       	std	Y+2, r25	; 0x02
    4ba6:	89 83       	std	Y+1, r24	; 0x01
	/*The PWM resolution for Phase correct PWM can be fixed to 8-bit, 9-bit, or 10-bit, or defined by either ICR1
	or OCR1A*/
	ICR1=(uint16)(F_CPU/(Copy_u16Freq*Global_Prescaler*2));
    4ba8:	06 e4       	ldi	r16, 0x46	; 70
    4baa:	10 e0       	ldi	r17, 0x00	; 0
    4bac:	20 91 6d 04 	lds	r18, 0x046D
    4bb0:	30 91 6e 04 	lds	r19, 0x046E
    4bb4:	89 81       	ldd	r24, Y+1	; 0x01
    4bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb8:	ac 01       	movw	r20, r24
    4bba:	24 9f       	mul	r18, r20
    4bbc:	c0 01       	movw	r24, r0
    4bbe:	25 9f       	mul	r18, r21
    4bc0:	90 0d       	add	r25, r0
    4bc2:	34 9f       	mul	r19, r20
    4bc4:	90 0d       	add	r25, r0
    4bc6:	11 24       	eor	r1, r1
    4bc8:	88 0f       	add	r24, r24
    4bca:	99 1f       	adc	r25, r25
    4bcc:	9c 01       	movw	r18, r24
    4bce:	40 e0       	ldi	r20, 0x00	; 0
    4bd0:	50 e0       	ldi	r21, 0x00	; 0
    4bd2:	80 e0       	ldi	r24, 0x00	; 0
    4bd4:	92 e1       	ldi	r25, 0x12	; 18
    4bd6:	aa e7       	ldi	r26, 0x7A	; 122
    4bd8:	b0 e0       	ldi	r27, 0x00	; 0
    4bda:	bc 01       	movw	r22, r24
    4bdc:	cd 01       	movw	r24, r26
    4bde:	0e 94 82 2b 	call	0x5704	; 0x5704 <__udivmodsi4>
    4be2:	da 01       	movw	r26, r20
    4be4:	c9 01       	movw	r24, r18
    4be6:	f8 01       	movw	r30, r16
    4be8:	91 83       	std	Z+1, r25	; 0x01
    4bea:	80 83       	st	Z, r24
	u16Current_Freq	=	Copy_u16Freq;
    4bec:	89 81       	ldd	r24, Y+1	; 0x01
    4bee:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf0:	90 93 70 04 	sts	0x0470, r25
    4bf4:	80 93 6f 04 	sts	0x046F, r24
}
    4bf8:	0f 90       	pop	r0
    4bfa:	0f 90       	pop	r0
    4bfc:	cf 91       	pop	r28
    4bfe:	df 91       	pop	r29
    4c00:	1f 91       	pop	r17
    4c02:	0f 91       	pop	r16
    4c04:	08 95       	ret

00004c06 <PWM_xSet_TONus>:


Error_Status PWM_xSet_TONus(uint16 Copy_u16Time,PWM_Channels Copy_xChannel)
{
    4c06:	ef 92       	push	r14
    4c08:	ff 92       	push	r15
    4c0a:	0f 93       	push	r16
    4c0c:	1f 93       	push	r17
    4c0e:	df 93       	push	r29
    4c10:	cf 93       	push	r28
    4c12:	cd b7       	in	r28, 0x3d	; 61
    4c14:	de b7       	in	r29, 0x3e	; 62
    4c16:	28 97       	sbiw	r28, 0x08	; 8
    4c18:	0f b6       	in	r0, 0x3f	; 63
    4c1a:	f8 94       	cli
    4c1c:	de bf       	out	0x3e, r29	; 62
    4c1e:	0f be       	out	0x3f, r0	; 63
    4c20:	cd bf       	out	0x3d, r28	; 61
    4c22:	9c 83       	std	Y+4, r25	; 0x04
    4c24:	8b 83       	std	Y+3, r24	; 0x03
    4c26:	6d 83       	std	Y+5, r22	; 0x05
	uint16 Local_u16Val;
	Local_u16Val =(uint16)(Copy_u16Time/((Global_Prescaler*1000000)/F_CPU));
    4c28:	8b 81       	ldd	r24, Y+3	; 0x03
    4c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c2c:	7c 01       	movw	r14, r24
    4c2e:	00 e0       	ldi	r16, 0x00	; 0
    4c30:	10 e0       	ldi	r17, 0x00	; 0
    4c32:	80 91 6d 04 	lds	r24, 0x046D
    4c36:	90 91 6e 04 	lds	r25, 0x046E
    4c3a:	cc 01       	movw	r24, r24
    4c3c:	a0 e0       	ldi	r26, 0x00	; 0
    4c3e:	b0 e0       	ldi	r27, 0x00	; 0
    4c40:	20 e4       	ldi	r18, 0x40	; 64
    4c42:	32 e4       	ldi	r19, 0x42	; 66
    4c44:	4f e0       	ldi	r20, 0x0F	; 15
    4c46:	50 e0       	ldi	r21, 0x00	; 0
    4c48:	bc 01       	movw	r22, r24
    4c4a:	cd 01       	movw	r24, r26
    4c4c:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <__mulsi3>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	20 e0       	ldi	r18, 0x00	; 0
    4c56:	32 e1       	ldi	r19, 0x12	; 18
    4c58:	4a e7       	ldi	r20, 0x7A	; 122
    4c5a:	50 e0       	ldi	r21, 0x00	; 0
    4c5c:	bc 01       	movw	r22, r24
    4c5e:	cd 01       	movw	r24, r26
    4c60:	0e 94 82 2b 	call	0x5704	; 0x5704 <__udivmodsi4>
    4c64:	da 01       	movw	r26, r20
    4c66:	c9 01       	movw	r24, r18
    4c68:	9c 01       	movw	r18, r24
    4c6a:	ad 01       	movw	r20, r26
    4c6c:	c8 01       	movw	r24, r16
    4c6e:	b7 01       	movw	r22, r14
    4c70:	0e 94 82 2b 	call	0x5704	; 0x5704 <__udivmodsi4>
    4c74:	da 01       	movw	r26, r20
    4c76:	c9 01       	movw	r24, r18
    4c78:	9a 83       	std	Y+2, r25	; 0x02
    4c7a:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_xChannel)
    4c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c7e:	28 2f       	mov	r18, r24
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	38 87       	std	Y+8, r19	; 0x08
    4c84:	2f 83       	std	Y+7, r18	; 0x07
    4c86:	8f 81       	ldd	r24, Y+7	; 0x07
    4c88:	98 85       	ldd	r25, Y+8	; 0x08
    4c8a:	00 97       	sbiw	r24, 0x00	; 0
    4c8c:	31 f0       	breq	.+12     	; 0x4c9a <PWM_xSet_TONus+0x94>
    4c8e:	2f 81       	ldd	r18, Y+7	; 0x07
    4c90:	38 85       	ldd	r19, Y+8	; 0x08
    4c92:	21 30       	cpi	r18, 0x01	; 1
    4c94:	31 05       	cpc	r19, r1
    4c96:	41 f0       	breq	.+16     	; 0x4ca8 <PWM_xSet_TONus+0xa2>
    4c98:	0e c0       	rjmp	.+28     	; 0x4cb6 <PWM_xSet_TONus+0xb0>
	{
	case PWM_CH_1:
		OCR1A	=	Local_u16Val;
    4c9a:	ea e4       	ldi	r30, 0x4A	; 74
    4c9c:	f0 e0       	ldi	r31, 0x00	; 0
    4c9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca2:	91 83       	std	Z+1, r25	; 0x01
    4ca4:	80 83       	st	Z, r24
    4ca6:	09 c0       	rjmp	.+18     	; 0x4cba <PWM_xSet_TONus+0xb4>
		break;
	case PWM_CH_2:
		OCR1B	=	Local_u16Val;
    4ca8:	e8 e4       	ldi	r30, 0x48	; 72
    4caa:	f0 e0       	ldi	r31, 0x00	; 0
    4cac:	89 81       	ldd	r24, Y+1	; 0x01
    4cae:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb0:	91 83       	std	Z+1, r25	; 0x01
    4cb2:	80 83       	st	Z, r24
    4cb4:	02 c0       	rjmp	.+4      	; 0x4cba <PWM_xSet_TONus+0xb4>
		break;
	default:
		return E_NOK;
    4cb6:	1e 82       	std	Y+6, r1	; 0x06
    4cb8:	02 c0       	rjmp	.+4      	; 0x4cbe <PWM_xSet_TONus+0xb8>
		break;
	}
	return E_OK;
    4cba:	31 e0       	ldi	r19, 0x01	; 1
    4cbc:	3e 83       	std	Y+6, r19	; 0x06
    4cbe:	8e 81       	ldd	r24, Y+6	; 0x06
}
    4cc0:	28 96       	adiw	r28, 0x08	; 8
    4cc2:	0f b6       	in	r0, 0x3f	; 63
    4cc4:	f8 94       	cli
    4cc6:	de bf       	out	0x3e, r29	; 62
    4cc8:	0f be       	out	0x3f, r0	; 63
    4cca:	cd bf       	out	0x3d, r28	; 61
    4ccc:	cf 91       	pop	r28
    4cce:	df 91       	pop	r29
    4cd0:	1f 91       	pop	r17
    4cd2:	0f 91       	pop	r16
    4cd4:	ff 90       	pop	r15
    4cd6:	ef 90       	pop	r14
    4cd8:	08 95       	ret

00004cda <PWM_xSetValReg>:

Error_Status PWM_xSetValReg(PWM_Channels Copy_xChannel,uint16 Copy_u16Val)
{
    4cda:	df 93       	push	r29
    4cdc:	cf 93       	push	r28
    4cde:	00 d0       	rcall	.+0      	; 0x4ce0 <PWM_xSetValReg+0x6>
    4ce0:	00 d0       	rcall	.+0      	; 0x4ce2 <PWM_xSetValReg+0x8>
    4ce2:	00 d0       	rcall	.+0      	; 0x4ce4 <PWM_xSetValReg+0xa>
    4ce4:	cd b7       	in	r28, 0x3d	; 61
    4ce6:	de b7       	in	r29, 0x3e	; 62
    4ce8:	89 83       	std	Y+1, r24	; 0x01
    4cea:	7b 83       	std	Y+3, r23	; 0x03
    4cec:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_xChannel)
    4cee:	89 81       	ldd	r24, Y+1	; 0x01
    4cf0:	28 2f       	mov	r18, r24
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	3e 83       	std	Y+6, r19	; 0x06
    4cf6:	2d 83       	std	Y+5, r18	; 0x05
    4cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    4cfc:	00 97       	sbiw	r24, 0x00	; 0
    4cfe:	31 f0       	breq	.+12     	; 0x4d0c <PWM_xSetValReg+0x32>
    4d00:	2d 81       	ldd	r18, Y+5	; 0x05
    4d02:	3e 81       	ldd	r19, Y+6	; 0x06
    4d04:	21 30       	cpi	r18, 0x01	; 1
    4d06:	31 05       	cpc	r19, r1
    4d08:	41 f0       	breq	.+16     	; 0x4d1a <PWM_xSetValReg+0x40>
    4d0a:	0e c0       	rjmp	.+28     	; 0x4d28 <PWM_xSetValReg+0x4e>
		{
		case PWM_CH_1:
			OCR1A	=	Copy_u16Val;
    4d0c:	ea e4       	ldi	r30, 0x4A	; 74
    4d0e:	f0 e0       	ldi	r31, 0x00	; 0
    4d10:	8a 81       	ldd	r24, Y+2	; 0x02
    4d12:	9b 81       	ldd	r25, Y+3	; 0x03
    4d14:	91 83       	std	Z+1, r25	; 0x01
    4d16:	80 83       	st	Z, r24
    4d18:	09 c0       	rjmp	.+18     	; 0x4d2c <PWM_xSetValReg+0x52>
			break;
		case PWM_CH_2:
			OCR1B	=	Copy_u16Val;
    4d1a:	e8 e4       	ldi	r30, 0x48	; 72
    4d1c:	f0 e0       	ldi	r31, 0x00	; 0
    4d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d20:	9b 81       	ldd	r25, Y+3	; 0x03
    4d22:	91 83       	std	Z+1, r25	; 0x01
    4d24:	80 83       	st	Z, r24
    4d26:	02 c0       	rjmp	.+4      	; 0x4d2c <PWM_xSetValReg+0x52>
			break;
		default:
			return E_NOK;
    4d28:	1c 82       	std	Y+4, r1	; 0x04
    4d2a:	02 c0       	rjmp	.+4      	; 0x4d30 <PWM_xSetValReg+0x56>
			break;
		}
		return E_OK;
    4d2c:	31 e0       	ldi	r19, 0x01	; 1
    4d2e:	3c 83       	std	Y+4, r19	; 0x04
    4d30:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4d32:	26 96       	adiw	r28, 0x06	; 6
    4d34:	0f b6       	in	r0, 0x3f	; 63
    4d36:	f8 94       	cli
    4d38:	de bf       	out	0x3e, r29	; 62
    4d3a:	0f be       	out	0x3f, r0	; 63
    4d3c:	cd bf       	out	0x3d, r28	; 61
    4d3e:	cf 91       	pop	r28
    4d40:	df 91       	pop	r29
    4d42:	08 95       	ret

00004d44 <Queue_xIsFull>:
/* ***************************************************************************** */
static QueueType Queue_ARR[QUEUE_MAX_SIZE];
/* ***************************************************************************** */

static QueueState_t Queue_xIsFull(void)
{
    4d44:	df 93       	push	r29
    4d46:	cf 93       	push	r28
    4d48:	0f 92       	push	r0
    4d4a:	cd b7       	in	r28, 0x3d	; 61
    4d4c:	de b7       	in	r29, 0x3e	; 62
	/* Is the next item is the front index then the queue is full */
	if(((Queue_End + 1)%QUEUE_MAX_SIZE) == Queue_Front)
    4d4e:	80 91 57 04 	lds	r24, 0x0457
    4d52:	99 27       	eor	r25, r25
    4d54:	87 fd       	sbrc	r24, 7
    4d56:	90 95       	com	r25
    4d58:	01 96       	adiw	r24, 0x01	; 1
    4d5a:	20 e2       	ldi	r18, 0x20	; 32
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	b9 01       	movw	r22, r18
    4d60:	0e 94 6f 2b 	call	0x56de	; 0x56de <__divmodhi4>
    4d64:	9c 01       	movw	r18, r24
    4d66:	80 91 56 04 	lds	r24, 0x0456
    4d6a:	99 27       	eor	r25, r25
    4d6c:	87 fd       	sbrc	r24, 7
    4d6e:	90 95       	com	r25
    4d70:	28 17       	cp	r18, r24
    4d72:	39 07       	cpc	r19, r25
    4d74:	11 f4       	brne	.+4      	; 0x4d7a <Queue_xIsFull+0x36>
	{
		return QUEUE_IS_FULL;
    4d76:	19 82       	std	Y+1, r1	; 0x01
    4d78:	02 c0       	rjmp	.+4      	; 0x4d7e <Queue_xIsFull+0x3a>
	}

	return QUEUE_NOT_FULL;
    4d7a:	81 e0       	ldi	r24, 0x01	; 1
    4d7c:	89 83       	std	Y+1, r24	; 0x01
    4d7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d80:	0f 90       	pop	r0
    4d82:	cf 91       	pop	r28
    4d84:	df 91       	pop	r29
    4d86:	08 95       	ret

00004d88 <Queue_xIsEmpty>:

/* ***************************************************************************** */

static QueueState_t Queue_xIsEmpty(void)
{
    4d88:	df 93       	push	r29
    4d8a:	cf 93       	push	r28
    4d8c:	0f 92       	push	r0
    4d8e:	cd b7       	in	r28, 0x3d	; 61
    4d90:	de b7       	in	r29, 0x3e	; 62
	/* Is the front and end of the array are still equal to border limit */
	if((QUEUE_BORDER_LIMIT == Queue_Front) && (QUEUE_BORDER_LIMIT == Queue_End))
    4d92:	80 91 56 04 	lds	r24, 0x0456
    4d96:	8f 3f       	cpi	r24, 0xFF	; 255
    4d98:	39 f4       	brne	.+14     	; 0x4da8 <Queue_xIsEmpty+0x20>
    4d9a:	80 91 57 04 	lds	r24, 0x0457
    4d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    4da0:	19 f4       	brne	.+6      	; 0x4da8 <Queue_xIsEmpty+0x20>
	{
		return QUEUE_IS_EMPTY;
    4da2:	82 e0       	ldi	r24, 0x02	; 2
    4da4:	89 83       	std	Y+1, r24	; 0x01
    4da6:	02 c0       	rjmp	.+4      	; 0x4dac <Queue_xIsEmpty+0x24>
	}

	return QUEUE_NOT_EMPTY;
    4da8:	83 e0       	ldi	r24, 0x03	; 3
    4daa:	89 83       	std	Y+1, r24	; 0x01
    4dac:	89 81       	ldd	r24, Y+1	; 0x01
}
    4dae:	0f 90       	pop	r0
    4db0:	cf 91       	pop	r28
    4db2:	df 91       	pop	r29
    4db4:	08 95       	ret

00004db6 <Queue_EnQueu>:

/* ***************************************************************************** */

Error_Status Queue_EnQueu(QueueType Copy_xData)
{
    4db6:	df 93       	push	r29
    4db8:	cf 93       	push	r28
    4dba:	00 d0       	rcall	.+0      	; 0x4dbc <Queue_EnQueu+0x6>
    4dbc:	cd b7       	in	r28, 0x3d	; 61
    4dbe:	de b7       	in	r29, 0x3e	; 62
    4dc0:	89 83       	std	Y+1, r24	; 0x01
	if(QUEUE_IS_FULL == Queue_xIsFull())
    4dc2:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <Queue_xIsFull>
    4dc6:	88 23       	and	r24, r24
    4dc8:	11 f4       	brne	.+4      	; 0x4dce <Queue_EnQueu+0x18>
	{
		return E_NOK;
    4dca:	1a 82       	std	Y+2, r1	; 0x02
    4dcc:	22 c0       	rjmp	.+68     	; 0x4e12 <Queue_EnQueu+0x5c>
	}
	else if(QUEUE_IS_EMPTY == Queue_xIsEmpty())
    4dce:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <Queue_xIsEmpty>
    4dd2:	82 30       	cpi	r24, 0x02	; 2
    4dd4:	29 f4       	brne	.+10     	; 0x4de0 <Queue_EnQueu+0x2a>
	{
		Queue_Front =	0;
    4dd6:	10 92 56 04 	sts	0x0456, r1
		Queue_End	=	0;
    4dda:	10 92 57 04 	sts	0x0457, r1
    4dde:	0d c0       	rjmp	.+26     	; 0x4dfa <Queue_EnQueu+0x44>
	}
	else 
	{
		/* To have circular array assign the result of end % max size
			to the end variable */
		Queue_End = (Queue_End + 1) % QUEUE_MAX_SIZE;
    4de0:	80 91 57 04 	lds	r24, 0x0457
    4de4:	99 27       	eor	r25, r25
    4de6:	87 fd       	sbrc	r24, 7
    4de8:	90 95       	com	r25
    4dea:	01 96       	adiw	r24, 0x01	; 1
    4dec:	20 e2       	ldi	r18, 0x20	; 32
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	b9 01       	movw	r22, r18
    4df2:	0e 94 6f 2b 	call	0x56de	; 0x56de <__divmodhi4>
    4df6:	80 93 57 04 	sts	0x0457, r24
	}
	Queue_ARR[Queue_End] = Copy_xData;
    4dfa:	80 91 57 04 	lds	r24, 0x0457
    4dfe:	99 27       	eor	r25, r25
    4e00:	87 fd       	sbrc	r24, 7
    4e02:	90 95       	com	r25
    4e04:	fc 01       	movw	r30, r24
    4e06:	ef 58       	subi	r30, 0x8F	; 143
    4e08:	fb 4f       	sbci	r31, 0xFB	; 251
    4e0a:	89 81       	ldd	r24, Y+1	; 0x01
    4e0c:	80 83       	st	Z, r24

	return E_OK;
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	8a 83       	std	Y+2, r24	; 0x02
    4e12:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4e14:	0f 90       	pop	r0
    4e16:	0f 90       	pop	r0
    4e18:	cf 91       	pop	r28
    4e1a:	df 91       	pop	r29
    4e1c:	08 95       	ret

00004e1e <Queue_DeQueue>:

/* ***************************************************************************** */

Error_Status Queue_DeQueue(QueueType *Copy_xRecvData)
{
    4e1e:	df 93       	push	r29
    4e20:	cf 93       	push	r28
    4e22:	00 d0       	rcall	.+0      	; 0x4e24 <Queue_DeQueue+0x6>
    4e24:	0f 92       	push	r0
    4e26:	cd b7       	in	r28, 0x3d	; 61
    4e28:	de b7       	in	r29, 0x3e	; 62
    4e2a:	9a 83       	std	Y+2, r25	; 0x02
    4e2c:	89 83       	std	Y+1, r24	; 0x01
	if(QUEUE_IS_EMPTY == Queue_xIsEmpty())
    4e2e:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <Queue_xIsEmpty>
    4e32:	82 30       	cpi	r24, 0x02	; 2
    4e34:	11 f4       	brne	.+4      	; 0x4e3a <Queue_DeQueue+0x1c>
	{
		return E_NOK;
    4e36:	1b 82       	std	Y+3, r1	; 0x03
    4e38:	28 c0       	rjmp	.+80     	; 0x4e8a <Queue_DeQueue+0x6c>
	}
	/* Read the item found in the front of array */
	*Copy_xRecvData	=	Queue_ARR[Queue_Front];
    4e3a:	80 91 56 04 	lds	r24, 0x0456
    4e3e:	99 27       	eor	r25, r25
    4e40:	87 fd       	sbrc	r24, 7
    4e42:	90 95       	com	r25
    4e44:	fc 01       	movw	r30, r24
    4e46:	ef 58       	subi	r30, 0x8F	; 143
    4e48:	fb 4f       	sbci	r31, 0xFB	; 251
    4e4a:	80 81       	ld	r24, Z
    4e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    4e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    4e50:	80 83       	st	Z, r24
	
	/* Checks if the queue has one element */
	if (Queue_Front == Queue_End)
    4e52:	90 91 56 04 	lds	r25, 0x0456
    4e56:	80 91 57 04 	lds	r24, 0x0457
    4e5a:	98 17       	cp	r25, r24
    4e5c:	39 f4       	brne	.+14     	; 0x4e6c <Queue_DeQueue+0x4e>
	{
		Queue_Front	=	QUEUE_BORDER_LIMIT; 
    4e5e:	8f ef       	ldi	r24, 0xFF	; 255
    4e60:	80 93 56 04 	sts	0x0456, r24
		Queue_End	=	QUEUE_BORDER_LIMIT;
    4e64:	8f ef       	ldi	r24, 0xFF	; 255
    4e66:	80 93 57 04 	sts	0x0457, r24
    4e6a:	0d c0       	rjmp	.+26     	; 0x4e86 <Queue_DeQueue+0x68>
	else
	{
		/* Increase front and get the result of Front % QUEUE_MAX_SIZE
			to get index less than tha maximum size of the array */
			
		Queue_Front = (Queue_Front + 1) % QUEUE_MAX_SIZE;
    4e6c:	80 91 56 04 	lds	r24, 0x0456
    4e70:	99 27       	eor	r25, r25
    4e72:	87 fd       	sbrc	r24, 7
    4e74:	90 95       	com	r25
    4e76:	01 96       	adiw	r24, 0x01	; 1
    4e78:	20 e2       	ldi	r18, 0x20	; 32
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	b9 01       	movw	r22, r18
    4e7e:	0e 94 6f 2b 	call	0x56de	; 0x56de <__divmodhi4>
    4e82:	80 93 56 04 	sts	0x0456, r24
	}

	return E_OK;
    4e86:	81 e0       	ldi	r24, 0x01	; 1
    4e88:	8b 83       	std	Y+3, r24	; 0x03
    4e8a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4e8c:	0f 90       	pop	r0
    4e8e:	0f 90       	pop	r0
    4e90:	0f 90       	pop	r0
    4e92:	cf 91       	pop	r28
    4e94:	df 91       	pop	r29
    4e96:	08 95       	ret

00004e98 <TempS_vInit>:
/* **************************************************************************** */
static float32 TempValue;
/* **************************************************************************** */

void TempS_vInit(void)
{
    4e98:	df 93       	push	r29
    4e9a:	cf 93       	push	r28
    4e9c:	cd b7       	in	r28, 0x3d	; 61
    4e9e:	de b7       	in	r29, 0x3e	; 62
	/* Initial value for temperature */
	TempValue	=	0;
    4ea0:	80 e0       	ldi	r24, 0x00	; 0
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	a0 e0       	ldi	r26, 0x00	; 0
    4ea6:	b0 e0       	ldi	r27, 0x00	; 0
    4ea8:	80 93 91 04 	sts	0x0491, r24
    4eac:	90 93 92 04 	sts	0x0492, r25
    4eb0:	a0 93 93 04 	sts	0x0493, r26
    4eb4:	b0 93 94 04 	sts	0x0494, r27
}
    4eb8:	cf 91       	pop	r28
    4eba:	df 91       	pop	r29
    4ebc:	08 95       	ret

00004ebe <TempS_f32GetTemp>:

/* **************************************************************************** */

float32 TempS_f32GetTemp(void)
{
    4ebe:	df 93       	push	r29
    4ec0:	cf 93       	push	r28
    4ec2:	cd b7       	in	r28, 0x3d	; 61
    4ec4:	de b7       	in	r29, 0x3e	; 62
	return TempValue;
    4ec6:	80 91 91 04 	lds	r24, 0x0491
    4eca:	90 91 92 04 	lds	r25, 0x0492
    4ece:	a0 91 93 04 	lds	r26, 0x0493
    4ed2:	b0 91 94 04 	lds	r27, 0x0494
}
    4ed6:	bc 01       	movw	r22, r24
    4ed8:	cd 01       	movw	r24, r26
    4eda:	cf 91       	pop	r28
    4edc:	df 91       	pop	r29
    4ede:	08 95       	ret

00004ee0 <TempS_vUpdate>:

/* ***************************************************************************** */
/*Temperature sensor update*/
/* ***************************************************************************** */
void TempS_vUpdate(void)
{
    4ee0:	df 93       	push	r29
    4ee2:	cf 93       	push	r28
    4ee4:	00 d0       	rcall	.+0      	; 0x4ee6 <TempS_vUpdate+0x6>
    4ee6:	00 d0       	rcall	.+0      	; 0x4ee8 <TempS_vUpdate+0x8>
    4ee8:	00 d0       	rcall	.+0      	; 0x4eea <TempS_vUpdate+0xa>
    4eea:	cd b7       	in	r28, 0x3d	; 61
    4eec:	de b7       	in	r29, 0x3e	; 62
	uint16 Local_u16RecvData	=	0;
    4eee:	1e 82       	std	Y+6, r1	; 0x06
    4ef0:	1d 82       	std	Y+5, r1	; 0x05
	float32 Local_f32Voltage	=	0;
    4ef2:	80 e0       	ldi	r24, 0x00	; 0
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	a0 e0       	ldi	r26, 0x00	; 0
    4ef8:	b0 e0       	ldi	r27, 0x00	; 0
    4efa:	89 83       	std	Y+1, r24	; 0x01
    4efc:	9a 83       	std	Y+2, r25	; 0x02
    4efe:	ab 83       	std	Y+3, r26	; 0x03
    4f00:	bc 83       	std	Y+4, r27	; 0x04
	/*Measure the current temperature*/
	 ADC_xReadSynch(TEMPSENSE_ADC_CHANNEL, &Local_u16RecvData);
    4f02:	9e 01       	movw	r18, r28
    4f04:	2b 5f       	subi	r18, 0xFB	; 251
    4f06:	3f 4f       	sbci	r19, 0xFF	; 255
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	b9 01       	movw	r22, r18
    4f0c:	0e 94 8b 09 	call	0x1316	; 0x1316 <ADC_xReadSynch>
	 /* Convert the reading into milli voltage */
	 Local_f32Voltage = (float32)Local_u16RecvData*(TEMPSENSE_VCC_MV/TEMPSENSE_ADC_RESOLUTION);
    4f10:	8d 81       	ldd	r24, Y+5	; 0x05
    4f12:	9e 81       	ldd	r25, Y+6	; 0x06
    4f14:	cc 01       	movw	r24, r24
    4f16:	a0 e0       	ldi	r26, 0x00	; 0
    4f18:	b0 e0       	ldi	r27, 0x00	; 0
    4f1a:	bc 01       	movw	r22, r24
    4f1c:	cd 01       	movw	r24, r26
    4f1e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4f22:	dc 01       	movw	r26, r24
    4f24:	cb 01       	movw	r24, r22
    4f26:	bc 01       	movw	r22, r24
    4f28:	cd 01       	movw	r24, r26
    4f2a:	2a e1       	ldi	r18, 0x1A	; 26
    4f2c:	37 e6       	ldi	r19, 0x67	; 103
    4f2e:	4c e9       	ldi	r20, 0x9C	; 156
    4f30:	50 e4       	ldi	r21, 0x40	; 64
    4f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f36:	dc 01       	movw	r26, r24
    4f38:	cb 01       	movw	r24, r22
    4f3a:	89 83       	std	Y+1, r24	; 0x01
    4f3c:	9a 83       	std	Y+2, r25	; 0x02
    4f3e:	ab 83       	std	Y+3, r26	; 0x03
    4f40:	bc 83       	std	Y+4, r27	; 0x04

	/* Divide voltage by 10mv the 2 to get accurate temperature degree */
	TempValue= (Local_f32Voltage/100)/2;
    4f42:	69 81       	ldd	r22, Y+1	; 0x01
    4f44:	7a 81       	ldd	r23, Y+2	; 0x02
    4f46:	8b 81       	ldd	r24, Y+3	; 0x03
    4f48:	9c 81       	ldd	r25, Y+4	; 0x04
    4f4a:	20 e0       	ldi	r18, 0x00	; 0
    4f4c:	30 e0       	ldi	r19, 0x00	; 0
    4f4e:	48 ec       	ldi	r20, 0xC8	; 200
    4f50:	52 e4       	ldi	r21, 0x42	; 66
    4f52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4f56:	dc 01       	movw	r26, r24
    4f58:	cb 01       	movw	r24, r22
    4f5a:	bc 01       	movw	r22, r24
    4f5c:	cd 01       	movw	r24, r26
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	40 e0       	ldi	r20, 0x00	; 0
    4f64:	50 e4       	ldi	r21, 0x40	; 64
    4f66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4f6a:	dc 01       	movw	r26, r24
    4f6c:	cb 01       	movw	r24, r22
    4f6e:	80 93 91 04 	sts	0x0491, r24
    4f72:	90 93 92 04 	sts	0x0492, r25
    4f76:	a0 93 93 04 	sts	0x0493, r26
    4f7a:	b0 93 94 04 	sts	0x0494, r27
}
    4f7e:	26 96       	adiw	r28, 0x06	; 6
    4f80:	0f b6       	in	r0, 0x3f	; 63
    4f82:	f8 94       	cli
    4f84:	de bf       	out	0x3e, r29	; 62
    4f86:	0f be       	out	0x3f, r0	; 63
    4f88:	cd bf       	out	0x3d, r28	; 61
    4f8a:	cf 91       	pop	r28
    4f8c:	df 91       	pop	r29
    4f8e:	08 95       	ret

00004f90 <Util_String_vNumtoStr>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "Util_String_interface.h"

void Util_String_vNumtoStr(sint32 Copy_s32Num,uint8 *pu8Buffer)
{
    4f90:	0f 93       	push	r16
    4f92:	1f 93       	push	r17
    4f94:	df 93       	push	r29
    4f96:	cf 93       	push	r28
    4f98:	cd b7       	in	r28, 0x3d	; 61
    4f9a:	de b7       	in	r29, 0x3e	; 62
    4f9c:	60 97       	sbiw	r28, 0x10	; 16
    4f9e:	0f b6       	in	r0, 0x3f	; 63
    4fa0:	f8 94       	cli
    4fa2:	de bf       	out	0x3e, r29	; 62
    4fa4:	0f be       	out	0x3f, r0	; 63
    4fa6:	cd bf       	out	0x3d, r28	; 61
    4fa8:	6b 87       	std	Y+11, r22	; 0x0b
    4faa:	7c 87       	std	Y+12, r23	; 0x0c
    4fac:	8d 87       	std	Y+13, r24	; 0x0d
    4fae:	9e 87       	std	Y+14, r25	; 0x0e
    4fb0:	58 8b       	std	Y+16, r21	; 0x10
    4fb2:	4f 87       	std	Y+15, r20	; 0x0f
	sint32 		 Local_s32Index		= 	0;
    4fb4:	1f 82       	std	Y+7, r1	; 0x07
    4fb6:	18 86       	std	Y+8, r1	; 0x08
    4fb8:	19 86       	std	Y+9, r1	; 0x09
    4fba:	1a 86       	std	Y+10, r1	; 0x0a
	sint32 		 Local_s32Copy 		= 	0;
    4fbc:	1b 82       	std	Y+3, r1	; 0x03
    4fbe:	1c 82       	std	Y+4, r1	; 0x04
    4fc0:	1d 82       	std	Y+5, r1	; 0x05
    4fc2:	1e 82       	std	Y+6, r1	; 0x06
	Flag_Status  Local_xSignFlag	=	E_NOK;
    4fc4:	1a 82       	std	Y+2, r1	; 0x02
	uint8		 Local_xSignBorder	=	0;
    4fc6:	19 82       	std	Y+1, r1	; 0x01

	/* Checks if the number is negative */
	if(Copy_s32Num < 0)
    4fc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fca:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fcc:	ad 85       	ldd	r26, Y+13	; 0x0d
    4fce:	be 85       	ldd	r27, Y+14	; 0x0e
    4fd0:	bb 23       	and	r27, r27
    4fd2:	8c f4       	brge	.+34     	; 0x4ff6 <Util_String_vNumtoStr+0x66>
	{
		/* Turn it to positive */
		Copy_s32Num 	= -1 * Copy_s32Num;
    4fd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fd8:	ad 85       	ldd	r26, Y+13	; 0x0d
    4fda:	be 85       	ldd	r27, Y+14	; 0x0e
    4fdc:	b0 95       	com	r27
    4fde:	a0 95       	com	r26
    4fe0:	90 95       	com	r25
    4fe2:	81 95       	neg	r24
    4fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe6:	af 4f       	sbci	r26, 0xFF	; 255
    4fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    4fea:	8b 87       	std	Y+11, r24	; 0x0b
    4fec:	9c 87       	std	Y+12, r25	; 0x0c
    4fee:	ad 87       	std	Y+13, r26	; 0x0d
    4ff0:	be 87       	std	Y+14, r27	; 0x0e
		/* Raise sign flag*/
		Local_xSignFlag = E_OK;
    4ff2:	81 e0       	ldi	r24, 0x01	; 1
    4ff4:	8a 83       	std	Y+2, r24	; 0x02
	}

	/* Buffer to count number of digits in the number */
	Local_s32Copy = Copy_s32Num;
    4ff6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ff8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ffa:	ad 85       	ldd	r26, Y+13	; 0x0d
    4ffc:	be 85       	ldd	r27, Y+14	; 0x0e
    4ffe:	8b 83       	std	Y+3, r24	; 0x03
    5000:	9c 83       	std	Y+4, r25	; 0x04
    5002:	ad 83       	std	Y+5, r26	; 0x05
    5004:	be 83       	std	Y+6, r27	; 0x06
    5006:	1d c0       	rjmp	.+58     	; 0x5042 <Util_String_vNumtoStr+0xb2>

	while(Local_s32Copy > 0)
	{
		Local_s32Copy /=10;
    5008:	8b 81       	ldd	r24, Y+3	; 0x03
    500a:	9c 81       	ldd	r25, Y+4	; 0x04
    500c:	ad 81       	ldd	r26, Y+5	; 0x05
    500e:	be 81       	ldd	r27, Y+6	; 0x06
    5010:	2a e0       	ldi	r18, 0x0A	; 10
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	50 e0       	ldi	r21, 0x00	; 0
    5018:	bc 01       	movw	r22, r24
    501a:	cd 01       	movw	r24, r26
    501c:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__divmodsi4>
    5020:	da 01       	movw	r26, r20
    5022:	c9 01       	movw	r24, r18
    5024:	8b 83       	std	Y+3, r24	; 0x03
    5026:	9c 83       	std	Y+4, r25	; 0x04
    5028:	ad 83       	std	Y+5, r26	; 0x05
    502a:	be 83       	std	Y+6, r27	; 0x06
		Local_s32Index++;
    502c:	8f 81       	ldd	r24, Y+7	; 0x07
    502e:	98 85       	ldd	r25, Y+8	; 0x08
    5030:	a9 85       	ldd	r26, Y+9	; 0x09
    5032:	ba 85       	ldd	r27, Y+10	; 0x0a
    5034:	01 96       	adiw	r24, 0x01	; 1
    5036:	a1 1d       	adc	r26, r1
    5038:	b1 1d       	adc	r27, r1
    503a:	8f 83       	std	Y+7, r24	; 0x07
    503c:	98 87       	std	Y+8, r25	; 0x08
    503e:	a9 87       	std	Y+9, r26	; 0x09
    5040:	ba 87       	std	Y+10, r27	; 0x0a
	}

	/* Buffer to count number of digits in the number */
	Local_s32Copy = Copy_s32Num;

	while(Local_s32Copy > 0)
    5042:	8b 81       	ldd	r24, Y+3	; 0x03
    5044:	9c 81       	ldd	r25, Y+4	; 0x04
    5046:	ad 81       	ldd	r26, Y+5	; 0x05
    5048:	be 81       	ldd	r27, Y+6	; 0x06
    504a:	18 16       	cp	r1, r24
    504c:	19 06       	cpc	r1, r25
    504e:	1a 06       	cpc	r1, r26
    5050:	1b 06       	cpc	r1, r27
    5052:	d4 f2       	brlt	.-76     	; 0x5008 <Util_String_vNumtoStr+0x78>
	{
		Local_s32Copy /=10;
		Local_s32Index++;
	}
	/* If the number is negative */
	if(Local_xSignFlag == E_OK)
    5054:	8a 81       	ldd	r24, Y+2	; 0x02
    5056:	81 30       	cpi	r24, 0x01	; 1
    5058:	89 f4       	brne	.+34     	; 0x507c <Util_String_vNumtoStr+0xec>
	{
		/* Increase the index to be able to store sign in the buffer */
		Local_s32Index++;
    505a:	8f 81       	ldd	r24, Y+7	; 0x07
    505c:	98 85       	ldd	r25, Y+8	; 0x08
    505e:	a9 85       	ldd	r26, Y+9	; 0x09
    5060:	ba 85       	ldd	r27, Y+10	; 0x0a
    5062:	01 96       	adiw	r24, 0x01	; 1
    5064:	a1 1d       	adc	r26, r1
    5066:	b1 1d       	adc	r27, r1
    5068:	8f 83       	std	Y+7, r24	; 0x07
    506a:	98 87       	std	Y+8, r25	; 0x08
    506c:	a9 87       	std	Y+9, r26	; 0x09
    506e:	ba 87       	std	Y+10, r27	; 0x0a
		/* Assign the sign in the first index */
		pu8Buffer[0] = '-';
    5070:	ef 85       	ldd	r30, Y+15	; 0x0f
    5072:	f8 89       	ldd	r31, Y+16	; 0x10
    5074:	8d e2       	ldi	r24, 0x2D	; 45
    5076:	80 83       	st	Z, r24
		/* Leave the first index empty for the sign */
		Local_xSignBorder = 1;
    5078:	81 e0       	ldi	r24, 0x01	; 1
    507a:	89 83       	std	Y+1, r24	; 0x01
	}
	pu8Buffer[Local_s32Index--] = '\0';
    507c:	2f 81       	ldd	r18, Y+7	; 0x07
    507e:	38 85       	ldd	r19, Y+8	; 0x08
    5080:	8f 85       	ldd	r24, Y+15	; 0x0f
    5082:	98 89       	ldd	r25, Y+16	; 0x10
    5084:	fc 01       	movw	r30, r24
    5086:	e2 0f       	add	r30, r18
    5088:	f3 1f       	adc	r31, r19
    508a:	10 82       	st	Z, r1
    508c:	8f 81       	ldd	r24, Y+7	; 0x07
    508e:	98 85       	ldd	r25, Y+8	; 0x08
    5090:	a9 85       	ldd	r26, Y+9	; 0x09
    5092:	ba 85       	ldd	r27, Y+10	; 0x0a
    5094:	01 97       	sbiw	r24, 0x01	; 1
    5096:	a1 09       	sbc	r26, r1
    5098:	b1 09       	sbc	r27, r1
    509a:	8f 83       	std	Y+7, r24	; 0x07
    509c:	98 87       	std	Y+8, r25	; 0x08
    509e:	a9 87       	std	Y+9, r26	; 0x09
    50a0:	ba 87       	std	Y+10, r27	; 0x0a
    50a2:	35 c0       	rjmp	.+106    	; 0x510e <Util_String_vNumtoStr+0x17e>
	while(Local_s32Index >= Local_xSignBorder)
	{
		/* Convert the numbers to characters and store them in the buffer */
		pu8Buffer[Local_s32Index--] = ((Copy_s32Num % 10) + '0');
    50a4:	2f 81       	ldd	r18, Y+7	; 0x07
    50a6:	38 85       	ldd	r19, Y+8	; 0x08
    50a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    50aa:	98 89       	ldd	r25, Y+16	; 0x10
    50ac:	8c 01       	movw	r16, r24
    50ae:	02 0f       	add	r16, r18
    50b0:	13 1f       	adc	r17, r19
    50b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    50b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    50b6:	ad 85       	ldd	r26, Y+13	; 0x0d
    50b8:	be 85       	ldd	r27, Y+14	; 0x0e
    50ba:	2a e0       	ldi	r18, 0x0A	; 10
    50bc:	30 e0       	ldi	r19, 0x00	; 0
    50be:	40 e0       	ldi	r20, 0x00	; 0
    50c0:	50 e0       	ldi	r21, 0x00	; 0
    50c2:	bc 01       	movw	r22, r24
    50c4:	cd 01       	movw	r24, r26
    50c6:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__divmodsi4>
    50ca:	dc 01       	movw	r26, r24
    50cc:	cb 01       	movw	r24, r22
    50ce:	80 5d       	subi	r24, 0xD0	; 208
    50d0:	f8 01       	movw	r30, r16
    50d2:	80 83       	st	Z, r24
    50d4:	8f 81       	ldd	r24, Y+7	; 0x07
    50d6:	98 85       	ldd	r25, Y+8	; 0x08
    50d8:	a9 85       	ldd	r26, Y+9	; 0x09
    50da:	ba 85       	ldd	r27, Y+10	; 0x0a
    50dc:	01 97       	sbiw	r24, 0x01	; 1
    50de:	a1 09       	sbc	r26, r1
    50e0:	b1 09       	sbc	r27, r1
    50e2:	8f 83       	std	Y+7, r24	; 0x07
    50e4:	98 87       	std	Y+8, r25	; 0x08
    50e6:	a9 87       	std	Y+9, r26	; 0x09
    50e8:	ba 87       	std	Y+10, r27	; 0x0a
		Copy_s32Num /= 10;
    50ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    50ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    50ee:	ad 85       	ldd	r26, Y+13	; 0x0d
    50f0:	be 85       	ldd	r27, Y+14	; 0x0e
    50f2:	2a e0       	ldi	r18, 0x0A	; 10
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	40 e0       	ldi	r20, 0x00	; 0
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	bc 01       	movw	r22, r24
    50fc:	cd 01       	movw	r24, r26
    50fe:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__divmodsi4>
    5102:	da 01       	movw	r26, r20
    5104:	c9 01       	movw	r24, r18
    5106:	8b 87       	std	Y+11, r24	; 0x0b
    5108:	9c 87       	std	Y+12, r25	; 0x0c
    510a:	ad 87       	std	Y+13, r26	; 0x0d
    510c:	be 87       	std	Y+14, r27	; 0x0e
		pu8Buffer[0] = '-';
		/* Leave the first index empty for the sign */
		Local_xSignBorder = 1;
	}
	pu8Buffer[Local_s32Index--] = '\0';
	while(Local_s32Index >= Local_xSignBorder)
    510e:	89 81       	ldd	r24, Y+1	; 0x01
    5110:	28 2f       	mov	r18, r24
    5112:	30 e0       	ldi	r19, 0x00	; 0
    5114:	40 e0       	ldi	r20, 0x00	; 0
    5116:	50 e0       	ldi	r21, 0x00	; 0
    5118:	8f 81       	ldd	r24, Y+7	; 0x07
    511a:	98 85       	ldd	r25, Y+8	; 0x08
    511c:	a9 85       	ldd	r26, Y+9	; 0x09
    511e:	ba 85       	ldd	r27, Y+10	; 0x0a
    5120:	82 17       	cp	r24, r18
    5122:	93 07       	cpc	r25, r19
    5124:	a4 07       	cpc	r26, r20
    5126:	b5 07       	cpc	r27, r21
    5128:	0c f0       	brlt	.+2      	; 0x512c <Util_String_vNumtoStr+0x19c>
    512a:	bc cf       	rjmp	.-136    	; 0x50a4 <Util_String_vNumtoStr+0x114>
	{
		/* Convert the numbers to characters and store them in the buffer */
		pu8Buffer[Local_s32Index--] = ((Copy_s32Num % 10) + '0');
		Copy_s32Num /= 10;
	}
}
    512c:	60 96       	adiw	r28, 0x10	; 16
    512e:	0f b6       	in	r0, 0x3f	; 63
    5130:	f8 94       	cli
    5132:	de bf       	out	0x3e, r29	; 62
    5134:	0f be       	out	0x3f, r0	; 63
    5136:	cd bf       	out	0x3d, r28	; 61
    5138:	cf 91       	pop	r28
    513a:	df 91       	pop	r29
    513c:	1f 91       	pop	r17
    513e:	0f 91       	pop	r16
    5140:	08 95       	ret

00005142 <Util_String_vFloatToStr>:


void Util_String_vFloatToStr(float32 Copy_f32NUM, uint8 *pu8Buffer,uint8 Copy_u8N_NumbersAfterFPonit)
{
    5142:	0f 93       	push	r16
    5144:	1f 93       	push	r17
    5146:	df 93       	push	r29
    5148:	cf 93       	push	r28
    514a:	cd b7       	in	r28, 0x3d	; 61
    514c:	de b7       	in	r29, 0x3e	; 62
    514e:	6d 97       	sbiw	r28, 0x1d	; 29
    5150:	0f b6       	in	r0, 0x3f	; 63
    5152:	f8 94       	cli
    5154:	de bf       	out	0x3e, r29	; 62
    5156:	0f be       	out	0x3f, r0	; 63
    5158:	cd bf       	out	0x3d, r28	; 61
    515a:	6f 8b       	std	Y+23, r22	; 0x17
    515c:	78 8f       	std	Y+24, r23	; 0x18
    515e:	89 8f       	std	Y+25, r24	; 0x19
    5160:	9a 8f       	std	Y+26, r25	; 0x1a
    5162:	5c 8f       	std	Y+28, r21	; 0x1c
    5164:	4b 8f       	std	Y+27, r20	; 0x1b
    5166:	2d 8f       	std	Y+29, r18	; 0x1d
	sint32 		Local_s32Index 			= 0;
    5168:	1b 8a       	std	Y+19, r1	; 0x13
    516a:	1c 8a       	std	Y+20, r1	; 0x14
    516c:	1d 8a       	std	Y+21, r1	; 0x15
    516e:	1e 8a       	std	Y+22, r1	; 0x16
	sint32 		Local_s32DecSize		= 0;
    5170:	1f 86       	std	Y+15, r1	; 0x0f
    5172:	18 8a       	std	Y+16, r1	; 0x10
    5174:	19 8a       	std	Y+17, r1	; 0x11
    5176:	1a 8a       	std	Y+18, r1	; 0x12
	float32 	Local_f32SubBuffer 		= 0;
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	a0 e0       	ldi	r26, 0x00	; 0
    517e:	b0 e0       	ldi	r27, 0x00	; 0
    5180:	8b 87       	std	Y+11, r24	; 0x0b
    5182:	9c 87       	std	Y+12, r25	; 0x0c
    5184:	ad 87       	std	Y+13, r26	; 0x0d
    5186:	be 87       	std	Y+14, r27	; 0x0e
	sint32 		Local_s32NumToSub		= 0;
    5188:	1f 82       	std	Y+7, r1	; 0x07
    518a:	18 86       	std	Y+8, r1	; 0x08
    518c:	19 86       	std	Y+9, r1	; 0x09
    518e:	1a 86       	std	Y+10, r1	; 0x0a
	sint32 		Local_s32IntBuff		= 0;
    5190:	1b 82       	std	Y+3, r1	; 0x03
    5192:	1c 82       	std	Y+4, r1	; 0x04
    5194:	1d 82       	std	Y+5, r1	; 0x05
    5196:	1e 82       	std	Y+6, r1	; 0x06
	Flag_Status Local_xSignFlag			= E_NOK;
    5198:	1a 82       	std	Y+2, r1	; 0x02
	uint8		Local_xSignBorder		= 0;
    519a:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if(Copy_f32NUM < 0)
    519c:	6f 89       	ldd	r22, Y+23	; 0x17
    519e:	78 8d       	ldd	r23, Y+24	; 0x18
    51a0:	89 8d       	ldd	r24, Y+25	; 0x19
    51a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    51a4:	20 e0       	ldi	r18, 0x00	; 0
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	40 e0       	ldi	r20, 0x00	; 0
    51aa:	50 e0       	ldi	r21, 0x00	; 0
    51ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51b0:	88 23       	and	r24, r24
    51b2:	5c f4       	brge	.+22     	; 0x51ca <Util_String_vFloatToStr+0x88>
	{
		/* Turn it to positive */
		Copy_f32NUM = -1 * Copy_f32NUM;
    51b4:	8f 89       	ldd	r24, Y+23	; 0x17
    51b6:	98 8d       	ldd	r25, Y+24	; 0x18
    51b8:	a9 8d       	ldd	r26, Y+25	; 0x19
    51ba:	ba 8d       	ldd	r27, Y+26	; 0x1a
    51bc:	b0 58       	subi	r27, 0x80	; 128
    51be:	8f 8b       	std	Y+23, r24	; 0x17
    51c0:	98 8f       	std	Y+24, r25	; 0x18
    51c2:	a9 8f       	std	Y+25, r26	; 0x19
    51c4:	ba 8f       	std	Y+26, r27	; 0x1a
		/* Raise sign flag*/
		Local_xSignFlag = E_OK;
    51c6:	81 e0       	ldi	r24, 0x01	; 1
    51c8:	8a 83       	std	Y+2, r24	; 0x02
	}
	/* Copy the number into buffers to be used */
	Local_s32NumToSub 		= (sint32)Copy_f32NUM;
    51ca:	6f 89       	ldd	r22, Y+23	; 0x17
    51cc:	78 8d       	ldd	r23, Y+24	; 0x18
    51ce:	89 8d       	ldd	r24, Y+25	; 0x19
    51d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    51d2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    51d6:	dc 01       	movw	r26, r24
    51d8:	cb 01       	movw	r24, r22
    51da:	8f 83       	std	Y+7, r24	; 0x07
    51dc:	98 87       	std	Y+8, r25	; 0x08
    51de:	a9 87       	std	Y+9, r26	; 0x09
    51e0:	ba 87       	std	Y+10, r27	; 0x0a
	Local_s32IntBuff		= (sint32)Copy_f32NUM;
    51e2:	6f 89       	ldd	r22, Y+23	; 0x17
    51e4:	78 8d       	ldd	r23, Y+24	; 0x18
    51e6:	89 8d       	ldd	r24, Y+25	; 0x19
    51e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    51ea:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    51ee:	dc 01       	movw	r26, r24
    51f0:	cb 01       	movw	r24, r22
    51f2:	8b 83       	std	Y+3, r24	; 0x03
    51f4:	9c 83       	std	Y+4, r25	; 0x04
    51f6:	ad 83       	std	Y+5, r26	; 0x05
    51f8:	be 83       	std	Y+6, r27	; 0x06

	/* If the number is 0 skip the function by make index 1 */
	/* Then print zero */
	if(Local_s32IntBuff == 0)
    51fa:	8b 81       	ldd	r24, Y+3	; 0x03
    51fc:	9c 81       	ldd	r25, Y+4	; 0x04
    51fe:	ad 81       	ldd	r26, Y+5	; 0x05
    5200:	be 81       	ldd	r27, Y+6	; 0x06
    5202:	00 97       	sbiw	r24, 0x00	; 0
    5204:	a1 05       	cpc	r26, r1
    5206:	b1 05       	cpc	r27, r1
    5208:	31 f5       	brne	.+76     	; 0x5256 <Util_String_vFloatToStr+0x114>
	{
		Local_s32Index =1;
    520a:	81 e0       	ldi	r24, 0x01	; 1
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	a0 e0       	ldi	r26, 0x00	; 0
    5210:	b0 e0       	ldi	r27, 0x00	; 0
    5212:	8b 8b       	std	Y+19, r24	; 0x13
    5214:	9c 8b       	std	Y+20, r25	; 0x14
    5216:	ad 8b       	std	Y+21, r26	; 0x15
    5218:	be 8b       	std	Y+22, r27	; 0x16
    521a:	26 c0       	rjmp	.+76     	; 0x5268 <Util_String_vFloatToStr+0x126>
	}
	else{
		/* Count the number of digits */
		while (Local_s32IntBuff > 0)
		{
			Local_s32IntBuff /= 10;
    521c:	8b 81       	ldd	r24, Y+3	; 0x03
    521e:	9c 81       	ldd	r25, Y+4	; 0x04
    5220:	ad 81       	ldd	r26, Y+5	; 0x05
    5222:	be 81       	ldd	r27, Y+6	; 0x06
    5224:	2a e0       	ldi	r18, 0x0A	; 10
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	40 e0       	ldi	r20, 0x00	; 0
    522a:	50 e0       	ldi	r21, 0x00	; 0
    522c:	bc 01       	movw	r22, r24
    522e:	cd 01       	movw	r24, r26
    5230:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__divmodsi4>
    5234:	da 01       	movw	r26, r20
    5236:	c9 01       	movw	r24, r18
    5238:	8b 83       	std	Y+3, r24	; 0x03
    523a:	9c 83       	std	Y+4, r25	; 0x04
    523c:	ad 83       	std	Y+5, r26	; 0x05
    523e:	be 83       	std	Y+6, r27	; 0x06
			Local_s32Index++;
    5240:	8b 89       	ldd	r24, Y+19	; 0x13
    5242:	9c 89       	ldd	r25, Y+20	; 0x14
    5244:	ad 89       	ldd	r26, Y+21	; 0x15
    5246:	be 89       	ldd	r27, Y+22	; 0x16
    5248:	01 96       	adiw	r24, 0x01	; 1
    524a:	a1 1d       	adc	r26, r1
    524c:	b1 1d       	adc	r27, r1
    524e:	8b 8b       	std	Y+19, r24	; 0x13
    5250:	9c 8b       	std	Y+20, r25	; 0x14
    5252:	ad 8b       	std	Y+21, r26	; 0x15
    5254:	be 8b       	std	Y+22, r27	; 0x16
	{
		Local_s32Index =1;
	}
	else{
		/* Count the number of digits */
		while (Local_s32IntBuff > 0)
    5256:	8b 81       	ldd	r24, Y+3	; 0x03
    5258:	9c 81       	ldd	r25, Y+4	; 0x04
    525a:	ad 81       	ldd	r26, Y+5	; 0x05
    525c:	be 81       	ldd	r27, Y+6	; 0x06
    525e:	18 16       	cp	r1, r24
    5260:	19 06       	cpc	r1, r25
    5262:	1a 06       	cpc	r1, r26
    5264:	1b 06       	cpc	r1, r27
    5266:	d4 f2       	brlt	.-76     	; 0x521c <Util_String_vFloatToStr+0xda>
			Local_s32IntBuff /= 10;
			Local_s32Index++;
		}
	}
	/* If the number is negative */
	if(Local_xSignFlag == E_OK)
    5268:	8a 81       	ldd	r24, Y+2	; 0x02
    526a:	81 30       	cpi	r24, 0x01	; 1
    526c:	89 f4       	brne	.+34     	; 0x5290 <Util_String_vFloatToStr+0x14e>
	{
		/* Increase the index to be able to store sign in the buffer */
		Local_s32Index++;
    526e:	8b 89       	ldd	r24, Y+19	; 0x13
    5270:	9c 89       	ldd	r25, Y+20	; 0x14
    5272:	ad 89       	ldd	r26, Y+21	; 0x15
    5274:	be 89       	ldd	r27, Y+22	; 0x16
    5276:	01 96       	adiw	r24, 0x01	; 1
    5278:	a1 1d       	adc	r26, r1
    527a:	b1 1d       	adc	r27, r1
    527c:	8b 8b       	std	Y+19, r24	; 0x13
    527e:	9c 8b       	std	Y+20, r25	; 0x14
    5280:	ad 8b       	std	Y+21, r26	; 0x15
    5282:	be 8b       	std	Y+22, r27	; 0x16
		/* Assign the sign in the first index */
		pu8Buffer[0] = '-';
    5284:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5286:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5288:	8d e2       	ldi	r24, 0x2D	; 45
    528a:	80 83       	st	Z, r24
		/* Leave the first index empty for the sign */
		Local_xSignBorder = 1;
    528c:	81 e0       	ldi	r24, 0x01	; 1
    528e:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Assign the number again in integer buffer to store it before floating point */
	Local_s32IntBuff = (sint32)Copy_f32NUM;
    5290:	6f 89       	ldd	r22, Y+23	; 0x17
    5292:	78 8d       	ldd	r23, Y+24	; 0x18
    5294:	89 8d       	ldd	r24, Y+25	; 0x19
    5296:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5298:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    529c:	dc 01       	movw	r26, r24
    529e:	cb 01       	movw	r24, r22
    52a0:	8b 83       	std	Y+3, r24	; 0x03
    52a2:	9c 83       	std	Y+4, r25	; 0x04
    52a4:	ad 83       	std	Y+5, r26	; 0x05
    52a6:	be 83       	std	Y+6, r27	; 0x06
	Local_s32DecSize = Local_s32Index+1;
    52a8:	8b 89       	ldd	r24, Y+19	; 0x13
    52aa:	9c 89       	ldd	r25, Y+20	; 0x14
    52ac:	ad 89       	ldd	r26, Y+21	; 0x15
    52ae:	be 89       	ldd	r27, Y+22	; 0x16
    52b0:	01 96       	adiw	r24, 0x01	; 1
    52b2:	a1 1d       	adc	r26, r1
    52b4:	b1 1d       	adc	r27, r1
    52b6:	8f 87       	std	Y+15, r24	; 0x0f
    52b8:	98 8b       	std	Y+16, r25	; 0x10
    52ba:	a9 8b       	std	Y+17, r26	; 0x11
    52bc:	ba 8b       	std	Y+18, r27	; 0x12
	/* Store the floating point after the number */
	pu8Buffer[Local_s32Index--] = '.';
    52be:	2b 89       	ldd	r18, Y+19	; 0x13
    52c0:	3c 89       	ldd	r19, Y+20	; 0x14
    52c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52c6:	fc 01       	movw	r30, r24
    52c8:	e2 0f       	add	r30, r18
    52ca:	f3 1f       	adc	r31, r19
    52cc:	8e e2       	ldi	r24, 0x2E	; 46
    52ce:	80 83       	st	Z, r24
    52d0:	8b 89       	ldd	r24, Y+19	; 0x13
    52d2:	9c 89       	ldd	r25, Y+20	; 0x14
    52d4:	ad 89       	ldd	r26, Y+21	; 0x15
    52d6:	be 89       	ldd	r27, Y+22	; 0x16
    52d8:	01 97       	sbiw	r24, 0x01	; 1
    52da:	a1 09       	sbc	r26, r1
    52dc:	b1 09       	sbc	r27, r1
    52de:	8b 8b       	std	Y+19, r24	; 0x13
    52e0:	9c 8b       	std	Y+20, r25	; 0x14
    52e2:	ad 8b       	std	Y+21, r26	; 0x15
    52e4:	be 8b       	std	Y+22, r27	; 0x16
    52e6:	35 c0       	rjmp	.+106    	; 0x5352 <Util_String_vFloatToStr+0x210>
	/* Store the integer part if it is found */
	while(Local_s32Index >= Local_xSignBorder)
	{
		pu8Buffer[Local_s32Index--] = ((Local_s32IntBuff % 10) + '0');
    52e8:	2b 89       	ldd	r18, Y+19	; 0x13
    52ea:	3c 89       	ldd	r19, Y+20	; 0x14
    52ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52f0:	8c 01       	movw	r16, r24
    52f2:	02 0f       	add	r16, r18
    52f4:	13 1f       	adc	r17, r19
    52f6:	8b 81       	ldd	r24, Y+3	; 0x03
    52f8:	9c 81       	ldd	r25, Y+4	; 0x04
    52fa:	ad 81       	ldd	r26, Y+5	; 0x05
    52fc:	be 81       	ldd	r27, Y+6	; 0x06
    52fe:	2a e0       	ldi	r18, 0x0A	; 10
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	40 e0       	ldi	r20, 0x00	; 0
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	bc 01       	movw	r22, r24
    5308:	cd 01       	movw	r24, r26
    530a:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__divmodsi4>
    530e:	dc 01       	movw	r26, r24
    5310:	cb 01       	movw	r24, r22
    5312:	80 5d       	subi	r24, 0xD0	; 208
    5314:	f8 01       	movw	r30, r16
    5316:	80 83       	st	Z, r24
    5318:	8b 89       	ldd	r24, Y+19	; 0x13
    531a:	9c 89       	ldd	r25, Y+20	; 0x14
    531c:	ad 89       	ldd	r26, Y+21	; 0x15
    531e:	be 89       	ldd	r27, Y+22	; 0x16
    5320:	01 97       	sbiw	r24, 0x01	; 1
    5322:	a1 09       	sbc	r26, r1
    5324:	b1 09       	sbc	r27, r1
    5326:	8b 8b       	std	Y+19, r24	; 0x13
    5328:	9c 8b       	std	Y+20, r25	; 0x14
    532a:	ad 8b       	std	Y+21, r26	; 0x15
    532c:	be 8b       	std	Y+22, r27	; 0x16
		Local_s32IntBuff /= 10;
    532e:	8b 81       	ldd	r24, Y+3	; 0x03
    5330:	9c 81       	ldd	r25, Y+4	; 0x04
    5332:	ad 81       	ldd	r26, Y+5	; 0x05
    5334:	be 81       	ldd	r27, Y+6	; 0x06
    5336:	2a e0       	ldi	r18, 0x0A	; 10
    5338:	30 e0       	ldi	r19, 0x00	; 0
    533a:	40 e0       	ldi	r20, 0x00	; 0
    533c:	50 e0       	ldi	r21, 0x00	; 0
    533e:	bc 01       	movw	r22, r24
    5340:	cd 01       	movw	r24, r26
    5342:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__divmodsi4>
    5346:	da 01       	movw	r26, r20
    5348:	c9 01       	movw	r24, r18
    534a:	8b 83       	std	Y+3, r24	; 0x03
    534c:	9c 83       	std	Y+4, r25	; 0x04
    534e:	ad 83       	std	Y+5, r26	; 0x05
    5350:	be 83       	std	Y+6, r27	; 0x06
	Local_s32IntBuff = (sint32)Copy_f32NUM;
	Local_s32DecSize = Local_s32Index+1;
	/* Store the floating point after the number */
	pu8Buffer[Local_s32Index--] = '.';
	/* Store the integer part if it is found */
	while(Local_s32Index >= Local_xSignBorder)
    5352:	89 81       	ldd	r24, Y+1	; 0x01
    5354:	28 2f       	mov	r18, r24
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	40 e0       	ldi	r20, 0x00	; 0
    535a:	50 e0       	ldi	r21, 0x00	; 0
    535c:	8b 89       	ldd	r24, Y+19	; 0x13
    535e:	9c 89       	ldd	r25, Y+20	; 0x14
    5360:	ad 89       	ldd	r26, Y+21	; 0x15
    5362:	be 89       	ldd	r27, Y+22	; 0x16
    5364:	82 17       	cp	r24, r18
    5366:	93 07       	cpc	r25, r19
    5368:	a4 07       	cpc	r26, r20
    536a:	b5 07       	cpc	r27, r21
    536c:	0c f0       	brlt	.+2      	; 0x5370 <Util_String_vFloatToStr+0x22e>
    536e:	bc cf       	rjmp	.-136    	; 0x52e8 <Util_String_vFloatToStr+0x1a6>
	{
		pu8Buffer[Local_s32Index--] = ((Local_s32IntBuff % 10) + '0');
		Local_s32IntBuff /= 10;
	}

	Local_f32SubBuffer = Copy_f32NUM - (float32) Local_s32NumToSub;
    5370:	6f 81       	ldd	r22, Y+7	; 0x07
    5372:	78 85       	ldd	r23, Y+8	; 0x08
    5374:	89 85       	ldd	r24, Y+9	; 0x09
    5376:	9a 85       	ldd	r25, Y+10	; 0x0a
    5378:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    537c:	9b 01       	movw	r18, r22
    537e:	ac 01       	movw	r20, r24
    5380:	6f 89       	ldd	r22, Y+23	; 0x17
    5382:	78 8d       	ldd	r23, Y+24	; 0x18
    5384:	89 8d       	ldd	r24, Y+25	; 0x19
    5386:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5388:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    538c:	dc 01       	movw	r26, r24
    538e:	cb 01       	movw	r24, r22
    5390:	8b 87       	std	Y+11, r24	; 0x0b
    5392:	9c 87       	std	Y+12, r25	; 0x0c
    5394:	ad 87       	std	Y+13, r26	; 0x0d
    5396:	be 87       	std	Y+14, r27	; 0x0e
	/* Make index = 0 to be used as flag if the function exceeds the number
		of numbers after floating point */
	Local_s32Index = 0;
    5398:	1b 8a       	std	Y+19, r1	; 0x13
    539a:	1c 8a       	std	Y+20, r1	; 0x14
    539c:	1d 8a       	std	Y+21, r1	; 0x15
    539e:	1e 8a       	std	Y+22, r1	; 0x16
	/* Store the float part into the buffer */
	if(Local_f32SubBuffer > 0.0)
    53a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    53a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    53a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    53a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	30 e0       	ldi	r19, 0x00	; 0
    53ac:	40 e0       	ldi	r20, 0x00	; 0
    53ae:	50 e0       	ldi	r21, 0x00	; 0
    53b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53b4:	18 16       	cp	r1, r24
    53b6:	0c f4       	brge	.+2      	; 0x53ba <Util_String_vFloatToStr+0x278>
    53b8:	66 c0       	rjmp	.+204    	; 0x5486 <Util_String_vFloatToStr+0x344>
    53ba:	7b c0       	rjmp	.+246    	; 0x54b2 <Util_String_vFloatToStr+0x370>
	{
		while(Local_f32SubBuffer > 0.0)
		{
			Local_f32SubBuffer *= 10;
    53bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    53be:	7c 85       	ldd	r23, Y+12	; 0x0c
    53c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    53c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    53c4:	20 e0       	ldi	r18, 0x00	; 0
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	40 e2       	ldi	r20, 0x20	; 32
    53ca:	51 e4       	ldi	r21, 0x41	; 65
    53cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53d0:	dc 01       	movw	r26, r24
    53d2:	cb 01       	movw	r24, r22
    53d4:	8b 87       	std	Y+11, r24	; 0x0b
    53d6:	9c 87       	std	Y+12, r25	; 0x0c
    53d8:	ad 87       	std	Y+13, r26	; 0x0d
    53da:	be 87       	std	Y+14, r27	; 0x0e
			pu8Buffer[Local_s32DecSize] = Local_f32SubBuffer+'0';
    53dc:	2f 85       	ldd	r18, Y+15	; 0x0f
    53de:	38 89       	ldd	r19, Y+16	; 0x10
    53e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53e4:	8c 01       	movw	r16, r24
    53e6:	02 0f       	add	r16, r18
    53e8:	13 1f       	adc	r17, r19
    53ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    53ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    53ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    53f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    53f2:	20 e0       	ldi	r18, 0x00	; 0
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	40 e4       	ldi	r20, 0x40	; 64
    53f8:	52 e4       	ldi	r21, 0x42	; 66
    53fa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    53fe:	dc 01       	movw	r26, r24
    5400:	cb 01       	movw	r24, r22
    5402:	bc 01       	movw	r22, r24
    5404:	cd 01       	movw	r24, r26
    5406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    540a:	dc 01       	movw	r26, r24
    540c:	cb 01       	movw	r24, r22
    540e:	f8 01       	movw	r30, r16
    5410:	80 83       	st	Z, r24
			Local_s32NumToSub = Local_f32SubBuffer;
    5412:	6b 85       	ldd	r22, Y+11	; 0x0b
    5414:	7c 85       	ldd	r23, Y+12	; 0x0c
    5416:	8d 85       	ldd	r24, Y+13	; 0x0d
    5418:	9e 85       	ldd	r25, Y+14	; 0x0e
    541a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    541e:	dc 01       	movw	r26, r24
    5420:	cb 01       	movw	r24, r22
    5422:	8f 83       	std	Y+7, r24	; 0x07
    5424:	98 87       	std	Y+8, r25	; 0x08
    5426:	a9 87       	std	Y+9, r26	; 0x09
    5428:	ba 87       	std	Y+10, r27	; 0x0a
			Local_f32SubBuffer = Local_f32SubBuffer - Local_s32NumToSub;
    542a:	6f 81       	ldd	r22, Y+7	; 0x07
    542c:	78 85       	ldd	r23, Y+8	; 0x08
    542e:	89 85       	ldd	r24, Y+9	; 0x09
    5430:	9a 85       	ldd	r25, Y+10	; 0x0a
    5432:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5436:	9b 01       	movw	r18, r22
    5438:	ac 01       	movw	r20, r24
    543a:	6b 85       	ldd	r22, Y+11	; 0x0b
    543c:	7c 85       	ldd	r23, Y+12	; 0x0c
    543e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5440:	9e 85       	ldd	r25, Y+14	; 0x0e
    5442:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5446:	dc 01       	movw	r26, r24
    5448:	cb 01       	movw	r24, r22
    544a:	8b 87       	std	Y+11, r24	; 0x0b
    544c:	9c 87       	std	Y+12, r25	; 0x0c
    544e:	ad 87       	std	Y+13, r26	; 0x0d
    5450:	be 87       	std	Y+14, r27	; 0x0e
			Local_s32DecSize++;
    5452:	8f 85       	ldd	r24, Y+15	; 0x0f
    5454:	98 89       	ldd	r25, Y+16	; 0x10
    5456:	a9 89       	ldd	r26, Y+17	; 0x11
    5458:	ba 89       	ldd	r27, Y+18	; 0x12
    545a:	01 96       	adiw	r24, 0x01	; 1
    545c:	a1 1d       	adc	r26, r1
    545e:	b1 1d       	adc	r27, r1
    5460:	8f 87       	std	Y+15, r24	; 0x0f
    5462:	98 8b       	std	Y+16, r25	; 0x10
    5464:	a9 8b       	std	Y+17, r26	; 0x11
    5466:	ba 8b       	std	Y+18, r27	; 0x12
			Local_s32Index++;
    5468:	8b 89       	ldd	r24, Y+19	; 0x13
    546a:	9c 89       	ldd	r25, Y+20	; 0x14
    546c:	ad 89       	ldd	r26, Y+21	; 0x15
    546e:	be 89       	ldd	r27, Y+22	; 0x16
    5470:	01 96       	adiw	r24, 0x01	; 1
    5472:	a1 1d       	adc	r26, r1
    5474:	b1 1d       	adc	r27, r1
    5476:	8b 8b       	std	Y+19, r24	; 0x13
    5478:	9c 8b       	std	Y+20, r25	; 0x14
    547a:	ad 8b       	std	Y+21, r26	; 0x15
    547c:	be 8b       	std	Y+22, r27	; 0x16
			/* Check if number of numbers after floating point is stasfied */
			if(Copy_u8N_NumbersAfterFPonit <= (uint8) Local_s32Index)
    547e:	9b 89       	ldd	r25, Y+19	; 0x13
    5480:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5482:	98 17       	cp	r25, r24
    5484:	68 f4       	brcc	.+26     	; 0x54a0 <Util_String_vFloatToStr+0x35e>
		of numbers after floating point */
	Local_s32Index = 0;
	/* Store the float part into the buffer */
	if(Local_f32SubBuffer > 0.0)
	{
		while(Local_f32SubBuffer > 0.0)
    5486:	6b 85       	ldd	r22, Y+11	; 0x0b
    5488:	7c 85       	ldd	r23, Y+12	; 0x0c
    548a:	8d 85       	ldd	r24, Y+13	; 0x0d
    548c:	9e 85       	ldd	r25, Y+14	; 0x0e
    548e:	20 e0       	ldi	r18, 0x00	; 0
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	40 e0       	ldi	r20, 0x00	; 0
    5494:	50 e0       	ldi	r21, 0x00	; 0
    5496:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    549a:	18 16       	cp	r1, r24
    549c:	0c f4       	brge	.+2      	; 0x54a0 <Util_String_vFloatToStr+0x35e>
    549e:	8e cf       	rjmp	.-228    	; 0x53bc <Util_String_vFloatToStr+0x27a>
			{
				break;
			}
		}
		/* Puts null in the end of the string */
		pu8Buffer[Local_s32DecSize] = '\0';
    54a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    54a2:	98 89       	ldd	r25, Y+16	; 0x10
    54a4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    54a6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    54a8:	f9 01       	movw	r30, r18
    54aa:	e8 0f       	add	r30, r24
    54ac:	f9 1f       	adc	r31, r25
    54ae:	10 82       	st	Z, r1
    54b0:	0b c0       	rjmp	.+22     	; 0x54c8 <Util_String_vFloatToStr+0x386>
	}
	else
	{
		/* Replaces the floating point by null if the number doesn't have
			float numbers */
		pu8Buffer[Local_s32DecSize - 1] = '\0';
    54b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    54b4:	98 89       	ldd	r25, Y+16	; 0x10
    54b6:	9c 01       	movw	r18, r24
    54b8:	21 50       	subi	r18, 0x01	; 1
    54ba:	30 40       	sbci	r19, 0x00	; 0
    54bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54c0:	fc 01       	movw	r30, r24
    54c2:	e2 0f       	add	r30, r18
    54c4:	f3 1f       	adc	r31, r19
    54c6:	10 82       	st	Z, r1
	}
}
    54c8:	6d 96       	adiw	r28, 0x1d	; 29
    54ca:	0f b6       	in	r0, 0x3f	; 63
    54cc:	f8 94       	cli
    54ce:	de bf       	out	0x3e, r29	; 62
    54d0:	0f be       	out	0x3f, r0	; 63
    54d2:	cd bf       	out	0x3d, r28	; 61
    54d4:	cf 91       	pop	r28
    54d6:	df 91       	pop	r29
    54d8:	1f 91       	pop	r17
    54da:	0f 91       	pop	r16
    54dc:	08 95       	ret

000054de <Util_String_vRemoveSpaces>:

void Util_String_vRemoveSpaces(uint8* u8String)
{
    54de:	df 93       	push	r29
    54e0:	cf 93       	push	r28
    54e2:	00 d0       	rcall	.+0      	; 0x54e4 <Util_String_vRemoveSpaces+0x6>
    54e4:	00 d0       	rcall	.+0      	; 0x54e6 <Util_String_vRemoveSpaces+0x8>
    54e6:	cd b7       	in	r28, 0x3d	; 61
    54e8:	de b7       	in	r29, 0x3e	; 62
    54ea:	9c 83       	std	Y+4, r25	; 0x04
    54ec:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8Index		= 0;
    54ee:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Index2	= 0;
    54f0:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Index = 0; u8String[Local_u8Index] != '\0' ; Local_u8Index++)
    54f2:	1a 82       	std	Y+2, r1	; 0x02
    54f4:	40 c0       	rjmp	.+128    	; 0x5576 <Util_String_vRemoveSpaces+0x98>
	{
		if(u8String[Local_u8Index] == ' ')
    54f6:	8a 81       	ldd	r24, Y+2	; 0x02
    54f8:	28 2f       	mov	r18, r24
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	8b 81       	ldd	r24, Y+3	; 0x03
    54fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5500:	fc 01       	movw	r30, r24
    5502:	e2 0f       	add	r30, r18
    5504:	f3 1f       	adc	r31, r19
    5506:	80 81       	ld	r24, Z
    5508:	80 32       	cpi	r24, 0x20	; 32
    550a:	91 f5       	brne	.+100    	; 0x5570 <Util_String_vRemoveSpaces+0x92>
    550c:	26 c0       	rjmp	.+76     	; 0x555a <Util_String_vRemoveSpaces+0x7c>
		{
			while(u8String[Local_u8Index] == ' ')
			{
				for(Local_u8Index2 = Local_u8Index; u8String[Local_u8Index2] != '\0' ; Local_u8Index2++)
    550e:	8a 81       	ldd	r24, Y+2	; 0x02
    5510:	89 83       	std	Y+1, r24	; 0x01
    5512:	18 c0       	rjmp	.+48     	; 0x5544 <Util_String_vRemoveSpaces+0x66>
				{
					u8String[Local_u8Index2] = u8String[Local_u8Index2 + 1];
    5514:	89 81       	ldd	r24, Y+1	; 0x01
    5516:	28 2f       	mov	r18, r24
    5518:	30 e0       	ldi	r19, 0x00	; 0
    551a:	8b 81       	ldd	r24, Y+3	; 0x03
    551c:	9c 81       	ldd	r25, Y+4	; 0x04
    551e:	dc 01       	movw	r26, r24
    5520:	a2 0f       	add	r26, r18
    5522:	b3 1f       	adc	r27, r19
    5524:	89 81       	ldd	r24, Y+1	; 0x01
    5526:	88 2f       	mov	r24, r24
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	9c 01       	movw	r18, r24
    552c:	2f 5f       	subi	r18, 0xFF	; 255
    552e:	3f 4f       	sbci	r19, 0xFF	; 255
    5530:	8b 81       	ldd	r24, Y+3	; 0x03
    5532:	9c 81       	ldd	r25, Y+4	; 0x04
    5534:	fc 01       	movw	r30, r24
    5536:	e2 0f       	add	r30, r18
    5538:	f3 1f       	adc	r31, r19
    553a:	80 81       	ld	r24, Z
    553c:	8c 93       	st	X, r24
	{
		if(u8String[Local_u8Index] == ' ')
		{
			while(u8String[Local_u8Index] == ' ')
			{
				for(Local_u8Index2 = Local_u8Index; u8String[Local_u8Index2] != '\0' ; Local_u8Index2++)
    553e:	89 81       	ldd	r24, Y+1	; 0x01
    5540:	8f 5f       	subi	r24, 0xFF	; 255
    5542:	89 83       	std	Y+1, r24	; 0x01
    5544:	89 81       	ldd	r24, Y+1	; 0x01
    5546:	28 2f       	mov	r18, r24
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	8b 81       	ldd	r24, Y+3	; 0x03
    554c:	9c 81       	ldd	r25, Y+4	; 0x04
    554e:	fc 01       	movw	r30, r24
    5550:	e2 0f       	add	r30, r18
    5552:	f3 1f       	adc	r31, r19
    5554:	80 81       	ld	r24, Z
    5556:	88 23       	and	r24, r24
    5558:	e9 f6       	brne	.-70     	; 0x5514 <Util_String_vRemoveSpaces+0x36>
	uint8 Local_u8Index2	= 0;
	for(Local_u8Index = 0; u8String[Local_u8Index] != '\0' ; Local_u8Index++)
	{
		if(u8String[Local_u8Index] == ' ')
		{
			while(u8String[Local_u8Index] == ' ')
    555a:	8a 81       	ldd	r24, Y+2	; 0x02
    555c:	28 2f       	mov	r18, r24
    555e:	30 e0       	ldi	r19, 0x00	; 0
    5560:	8b 81       	ldd	r24, Y+3	; 0x03
    5562:	9c 81       	ldd	r25, Y+4	; 0x04
    5564:	fc 01       	movw	r30, r24
    5566:	e2 0f       	add	r30, r18
    5568:	f3 1f       	adc	r31, r19
    556a:	80 81       	ld	r24, Z
    556c:	80 32       	cpi	r24, 0x20	; 32
    556e:	79 f2       	breq	.-98     	; 0x550e <Util_String_vRemoveSpaces+0x30>

void Util_String_vRemoveSpaces(uint8* u8String)
{
	uint8 Local_u8Index		= 0;
	uint8 Local_u8Index2	= 0;
	for(Local_u8Index = 0; u8String[Local_u8Index] != '\0' ; Local_u8Index++)
    5570:	8a 81       	ldd	r24, Y+2	; 0x02
    5572:	8f 5f       	subi	r24, 0xFF	; 255
    5574:	8a 83       	std	Y+2, r24	; 0x02
    5576:	8a 81       	ldd	r24, Y+2	; 0x02
    5578:	28 2f       	mov	r18, r24
    557a:	30 e0       	ldi	r19, 0x00	; 0
    557c:	8b 81       	ldd	r24, Y+3	; 0x03
    557e:	9c 81       	ldd	r25, Y+4	; 0x04
    5580:	fc 01       	movw	r30, r24
    5582:	e2 0f       	add	r30, r18
    5584:	f3 1f       	adc	r31, r19
    5586:	80 81       	ld	r24, Z
    5588:	88 23       	and	r24, r24
    558a:	09 f0       	breq	.+2      	; 0x558e <Util_String_vRemoveSpaces+0xb0>
    558c:	b4 cf       	rjmp	.-152    	; 0x54f6 <Util_String_vRemoveSpaces+0x18>
					u8String[Local_u8Index2] = u8String[Local_u8Index2 + 1];
				}
			}
		}
	}
}
    558e:	0f 90       	pop	r0
    5590:	0f 90       	pop	r0
    5592:	0f 90       	pop	r0
    5594:	0f 90       	pop	r0
    5596:	cf 91       	pop	r28
    5598:	df 91       	pop	r29
    559a:	08 95       	ret

0000559c <Util_String_xComp>:


uint8 Util_String_xComp(const uint8 *Copy_String1 ,const uint8 *Copy_String2 )
{
    559c:	df 93       	push	r29
    559e:	cf 93       	push	r28
    55a0:	00 d0       	rcall	.+0      	; 0x55a2 <Util_String_xComp+0x6>
    55a2:	00 d0       	rcall	.+0      	; 0x55a4 <Util_String_xComp+0x8>
    55a4:	cd b7       	in	r28, 0x3d	; 61
    55a6:	de b7       	in	r29, 0x3e	; 62
    55a8:	9a 83       	std	Y+2, r25	; 0x02
    55aa:	89 83       	std	Y+1, r24	; 0x01
    55ac:	7c 83       	std	Y+4, r23	; 0x04
    55ae:	6b 83       	std	Y+3, r22	; 0x03
    55b0:	12 c0       	rjmp	.+36     	; 0x55d6 <Util_String_xComp+0x3a>
	while(*Copy_String1)
	{
		if(*Copy_String1 != *Copy_String2)
    55b2:	e9 81       	ldd	r30, Y+1	; 0x01
    55b4:	fa 81       	ldd	r31, Y+2	; 0x02
    55b6:	90 81       	ld	r25, Z
    55b8:	eb 81       	ldd	r30, Y+3	; 0x03
    55ba:	fc 81       	ldd	r31, Y+4	; 0x04
    55bc:	80 81       	ld	r24, Z
    55be:	98 17       	cp	r25, r24
    55c0:	79 f4       	brne	.+30     	; 0x55e0 <Util_String_xComp+0x44>
		{
			break;
		}
		Copy_String1++;
    55c2:	89 81       	ldd	r24, Y+1	; 0x01
    55c4:	9a 81       	ldd	r25, Y+2	; 0x02
    55c6:	01 96       	adiw	r24, 0x01	; 1
    55c8:	9a 83       	std	Y+2, r25	; 0x02
    55ca:	89 83       	std	Y+1, r24	; 0x01
		Copy_String2++;
    55cc:	8b 81       	ldd	r24, Y+3	; 0x03
    55ce:	9c 81       	ldd	r25, Y+4	; 0x04
    55d0:	01 96       	adiw	r24, 0x01	; 1
    55d2:	9c 83       	std	Y+4, r25	; 0x04
    55d4:	8b 83       	std	Y+3, r24	; 0x03
}


uint8 Util_String_xComp(const uint8 *Copy_String1 ,const uint8 *Copy_String2 )
{
	while(*Copy_String1)
    55d6:	e9 81       	ldd	r30, Y+1	; 0x01
    55d8:	fa 81       	ldd	r31, Y+2	; 0x02
    55da:	80 81       	ld	r24, Z
    55dc:	88 23       	and	r24, r24
    55de:	49 f7       	brne	.-46     	; 0x55b2 <Util_String_xComp+0x16>
			break;
		}
		Copy_String1++;
		Copy_String2++;
	}
	return *(const uint8*)Copy_String1 - *(const uint8*)Copy_String2;
    55e0:	e9 81       	ldd	r30, Y+1	; 0x01
    55e2:	fa 81       	ldd	r31, Y+2	; 0x02
    55e4:	90 81       	ld	r25, Z
    55e6:	eb 81       	ldd	r30, Y+3	; 0x03
    55e8:	fc 81       	ldd	r31, Y+4	; 0x04
    55ea:	80 81       	ld	r24, Z
    55ec:	29 2f       	mov	r18, r25
    55ee:	28 1b       	sub	r18, r24
    55f0:	82 2f       	mov	r24, r18
}
    55f2:	0f 90       	pop	r0
    55f4:	0f 90       	pop	r0
    55f6:	0f 90       	pop	r0
    55f8:	0f 90       	pop	r0
    55fa:	cf 91       	pop	r28
    55fc:	df 91       	pop	r29
    55fe:	08 95       	ret

00005600 <main>:
#include "Util_String_interface.h"
#include "LCD_interface.h"
#include "Keypad_interface.h"
#include "LCDAnimation_interface.h"
int main(void)
{
    5600:	df 93       	push	r29
    5602:	cf 93       	push	r28
    5604:	cd b7       	in	r28, 0x3d	; 61
    5606:	de b7       	in	r29, 0x3e	; 62
    5608:	64 97       	sbiw	r28, 0x14	; 20
    560a:	0f b6       	in	r0, 0x3f	; 63
    560c:	f8 94       	cli
    560e:	de bf       	out	0x3e, r29	; 62
    5610:	0f be       	out	0x3f, r0	; 63
    5612:	cd bf       	out	0x3d, r28	; 61
	LCD_configType LCD_DATA;

	LCD_DATA.WordLength = LCD_4_pins;
    5614:	19 82       	std	Y+1, r1	; 0x01
	LCD_DATA.FontSize = LCD_Format_5x8;
    5616:	1b 82       	std	Y+3, r1	; 0x03
	LCD_DATA.linesNumber = LCD_Two_lines;
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	8a 83       	std	Y+2, r24	; 0x02
	LCD_DATA.CursorBlinkState =LCD_CursorBlinkOFF;
    561c:	1d 82       	std	Y+5, r1	; 0x05
	LCD_DATA.CursorState = LCD_CursorOFF;
    561e:	1e 82       	std	Y+6, r1	; 0x06
	LCD_DATA.DisplayState = LCD_DisplayON;
    5620:	81 e0       	ldi	r24, 0x01	; 1
    5622:	8c 83       	std	Y+4, r24	; 0x04

	LCD_xInit(&LCD_DATA);
    5624:	ce 01       	movw	r24, r28
    5626:	01 96       	adiw	r24, 0x01	; 1
    5628:	0e 94 3e 1a 	call	0x347c	; 0x347c <LCD_xInit>
	LCD_vClear();
    562c:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <LCD_vClear>

	Keypad_vInit();
    5630:	0e 94 ac 14 	call	0x2958	; 0x2958 <Keypad_vInit>

	ADC_Typedef ADC_DATA;

	/* Initialize ADC */
	GPIO_vInitPortPin(GPIOA,GPIO_PIN_0,GPIO_IN);
    5634:	81 e4       	ldi	r24, 0x41	; 65
    5636:	60 e0       	ldi	r22, 0x00	; 0
    5638:	40 e0       	ldi	r20, 0x00	; 0
    563a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GPIO_vInitPortPin>

	ADC_DATA.ADC_xAdjustState 	= ADC_LEFT_ADJUST;
    563e:	1c 86       	std	Y+12, r1	; 0x0c
	ADC_DATA.ADC_xState 		= ADC_ENABLE;
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	88 8b       	std	Y+16, r24	; 0x10
	ADC_DATA.ADC_xPrescaler 	= ADC_PRESCALER_128;
    5644:	87 e0       	ldi	r24, 0x07	; 7
    5646:	8a 87       	std	Y+10, r24	; 0x0a
	ADC_DATA.ADC_xVoltRef 		= ADC_AVCC_EX_CAP;
    5648:	81 e0       	ldi	r24, 0x01	; 1
    564a:	8b 87       	std	Y+11, r24	; 0x0b
	ADC_DATA.ADC_xInterruptState= ADC_DISABLE_INTERRUPT;
    564c:	1d 86       	std	Y+13, r1	; 0x0d
	ADC_DATA.ADC_xTriggerState	= ADC_ENABLE_AUTO_TRIGGER;
    564e:	81 e0       	ldi	r24, 0x01	; 1
    5650:	8e 87       	std	Y+14, r24	; 0x0e
	ADC_DATA.ADC_xTriggerSource = ADC_TRSRC_FREE_RUNNING_MODE;
    5652:	1f 86       	std	Y+15, r1	; 0x0f

	ADC_xInit(&ADC_DATA);
    5654:	ce 01       	movw	r24, r28
    5656:	09 96       	adiw	r24, 0x09	; 9
    5658:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_xInit>

	/*Initialize PWM*/
	PWM_Typedef PWM_DATA;
	PWM_DATA.Mode		=	TIMER1_WGM_FPWM_ICR;
    565c:	8a e0       	ldi	r24, 0x0A	; 10
    565e:	8a 8b       	std	Y+18, r24	; 0x12
	PWM_DATA.COM_Mode	=	Clr_OC1A_OC1B_CompMatchNonInvert;
    5660:	82 e0       	ldi	r24, 0x02	; 2
    5662:	89 8b       	std	Y+17, r24	; 0x11
	PWM_DATA.Channel	=	PWM_CH_1;
    5664:	1b 8a       	std	Y+19, r1	; 0x13
	PWM_DATA.Prescaler	=	PWM_Prescaler_256;
    5666:	84 e0       	ldi	r24, 0x04	; 4
    5668:	8c 8b       	std	Y+20, r24	; 0x14
	PWM_vInit(&PWM_DATA);
    566a:	ce 01       	movw	r24, r28
    566c:	41 96       	adiw	r24, 0x11	; 17
    566e:	0e 94 0f 21 	call	0x421e	; 0x421e <PWM_vInit>
	PWM_vSetFPWM_Freq(50);
    5672:	82 e3       	ldi	r24, 0x32	; 50
    5674:	90 e0       	ldi	r25, 0x00	; 0
    5676:	0e 94 94 25 	call	0x4b28	; 0x4b28 <PWM_vSetFPWM_Freq>

	/* Initialize temperature sensor */
	TempS_vInit();
    567a:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <TempS_vInit>
	/* Initialize LDR */
	LDR_vInit();
    567e:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <LDR_vInit>

	/* Initialize Alarm */
	Alarm_xInit(ALARM_1,ALARM_OFF);
    5682:	80 e0       	ldi	r24, 0x00	; 0
    5684:	60 e0       	ldi	r22, 0x00	; 0
    5686:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Alarm_xInit>

	/* Initialize Home settings */
	Home_vInit();
    568a:	0e 94 4c 10 	call	0x2098	; 0x2098 <Home_vInit>

	while(1)
	{
		if(Home_xEnter() == E_OK)
    568e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <Home_xEnter>
    5692:	81 30       	cpi	r24, 0x01	; 1
    5694:	e1 f7       	brne	.-8      	; 0x568e <main+0x8e>
		{
			while(Home_xOptionHandle() == E_OK);
    5696:	0e 94 1a 14 	call	0x2834	; 0x2834 <Home_xOptionHandle>
    569a:	81 30       	cpi	r24, 0x01	; 1
    569c:	e1 f3       	breq	.-8      	; 0x5696 <main+0x96>
    569e:	f7 cf       	rjmp	.-18     	; 0x568e <main+0x8e>

000056a0 <__mulsi3>:
    56a0:	62 9f       	mul	r22, r18
    56a2:	d0 01       	movw	r26, r0
    56a4:	73 9f       	mul	r23, r19
    56a6:	f0 01       	movw	r30, r0
    56a8:	82 9f       	mul	r24, r18
    56aa:	e0 0d       	add	r30, r0
    56ac:	f1 1d       	adc	r31, r1
    56ae:	64 9f       	mul	r22, r20
    56b0:	e0 0d       	add	r30, r0
    56b2:	f1 1d       	adc	r31, r1
    56b4:	92 9f       	mul	r25, r18
    56b6:	f0 0d       	add	r31, r0
    56b8:	83 9f       	mul	r24, r19
    56ba:	f0 0d       	add	r31, r0
    56bc:	74 9f       	mul	r23, r20
    56be:	f0 0d       	add	r31, r0
    56c0:	65 9f       	mul	r22, r21
    56c2:	f0 0d       	add	r31, r0
    56c4:	99 27       	eor	r25, r25
    56c6:	72 9f       	mul	r23, r18
    56c8:	b0 0d       	add	r27, r0
    56ca:	e1 1d       	adc	r30, r1
    56cc:	f9 1f       	adc	r31, r25
    56ce:	63 9f       	mul	r22, r19
    56d0:	b0 0d       	add	r27, r0
    56d2:	e1 1d       	adc	r30, r1
    56d4:	f9 1f       	adc	r31, r25
    56d6:	bd 01       	movw	r22, r26
    56d8:	cf 01       	movw	r24, r30
    56da:	11 24       	eor	r1, r1
    56dc:	08 95       	ret

000056de <__divmodhi4>:
    56de:	97 fb       	bst	r25, 7
    56e0:	09 2e       	mov	r0, r25
    56e2:	07 26       	eor	r0, r23
    56e4:	0a d0       	rcall	.+20     	; 0x56fa <__divmodhi4_neg1>
    56e6:	77 fd       	sbrc	r23, 7
    56e8:	04 d0       	rcall	.+8      	; 0x56f2 <__divmodhi4_neg2>
    56ea:	49 d0       	rcall	.+146    	; 0x577e <__udivmodhi4>
    56ec:	06 d0       	rcall	.+12     	; 0x56fa <__divmodhi4_neg1>
    56ee:	00 20       	and	r0, r0
    56f0:	1a f4       	brpl	.+6      	; 0x56f8 <__divmodhi4_exit>

000056f2 <__divmodhi4_neg2>:
    56f2:	70 95       	com	r23
    56f4:	61 95       	neg	r22
    56f6:	7f 4f       	sbci	r23, 0xFF	; 255

000056f8 <__divmodhi4_exit>:
    56f8:	08 95       	ret

000056fa <__divmodhi4_neg1>:
    56fa:	f6 f7       	brtc	.-4      	; 0x56f8 <__divmodhi4_exit>
    56fc:	90 95       	com	r25
    56fe:	81 95       	neg	r24
    5700:	9f 4f       	sbci	r25, 0xFF	; 255
    5702:	08 95       	ret

00005704 <__udivmodsi4>:
    5704:	a1 e2       	ldi	r26, 0x21	; 33
    5706:	1a 2e       	mov	r1, r26
    5708:	aa 1b       	sub	r26, r26
    570a:	bb 1b       	sub	r27, r27
    570c:	fd 01       	movw	r30, r26
    570e:	0d c0       	rjmp	.+26     	; 0x572a <__udivmodsi4_ep>

00005710 <__udivmodsi4_loop>:
    5710:	aa 1f       	adc	r26, r26
    5712:	bb 1f       	adc	r27, r27
    5714:	ee 1f       	adc	r30, r30
    5716:	ff 1f       	adc	r31, r31
    5718:	a2 17       	cp	r26, r18
    571a:	b3 07       	cpc	r27, r19
    571c:	e4 07       	cpc	r30, r20
    571e:	f5 07       	cpc	r31, r21
    5720:	20 f0       	brcs	.+8      	; 0x572a <__udivmodsi4_ep>
    5722:	a2 1b       	sub	r26, r18
    5724:	b3 0b       	sbc	r27, r19
    5726:	e4 0b       	sbc	r30, r20
    5728:	f5 0b       	sbc	r31, r21

0000572a <__udivmodsi4_ep>:
    572a:	66 1f       	adc	r22, r22
    572c:	77 1f       	adc	r23, r23
    572e:	88 1f       	adc	r24, r24
    5730:	99 1f       	adc	r25, r25
    5732:	1a 94       	dec	r1
    5734:	69 f7       	brne	.-38     	; 0x5710 <__udivmodsi4_loop>
    5736:	60 95       	com	r22
    5738:	70 95       	com	r23
    573a:	80 95       	com	r24
    573c:	90 95       	com	r25
    573e:	9b 01       	movw	r18, r22
    5740:	ac 01       	movw	r20, r24
    5742:	bd 01       	movw	r22, r26
    5744:	cf 01       	movw	r24, r30
    5746:	08 95       	ret

00005748 <__divmodsi4>:
    5748:	97 fb       	bst	r25, 7
    574a:	09 2e       	mov	r0, r25
    574c:	05 26       	eor	r0, r21
    574e:	0e d0       	rcall	.+28     	; 0x576c <__divmodsi4_neg1>
    5750:	57 fd       	sbrc	r21, 7
    5752:	04 d0       	rcall	.+8      	; 0x575c <__divmodsi4_neg2>
    5754:	d7 df       	rcall	.-82     	; 0x5704 <__udivmodsi4>
    5756:	0a d0       	rcall	.+20     	; 0x576c <__divmodsi4_neg1>
    5758:	00 1c       	adc	r0, r0
    575a:	38 f4       	brcc	.+14     	; 0x576a <__divmodsi4_exit>

0000575c <__divmodsi4_neg2>:
    575c:	50 95       	com	r21
    575e:	40 95       	com	r20
    5760:	30 95       	com	r19
    5762:	21 95       	neg	r18
    5764:	3f 4f       	sbci	r19, 0xFF	; 255
    5766:	4f 4f       	sbci	r20, 0xFF	; 255
    5768:	5f 4f       	sbci	r21, 0xFF	; 255

0000576a <__divmodsi4_exit>:
    576a:	08 95       	ret

0000576c <__divmodsi4_neg1>:
    576c:	f6 f7       	brtc	.-4      	; 0x576a <__divmodsi4_exit>
    576e:	90 95       	com	r25
    5770:	80 95       	com	r24
    5772:	70 95       	com	r23
    5774:	61 95       	neg	r22
    5776:	7f 4f       	sbci	r23, 0xFF	; 255
    5778:	8f 4f       	sbci	r24, 0xFF	; 255
    577a:	9f 4f       	sbci	r25, 0xFF	; 255
    577c:	08 95       	ret

0000577e <__udivmodhi4>:
    577e:	aa 1b       	sub	r26, r26
    5780:	bb 1b       	sub	r27, r27
    5782:	51 e1       	ldi	r21, 0x11	; 17
    5784:	07 c0       	rjmp	.+14     	; 0x5794 <__udivmodhi4_ep>

00005786 <__udivmodhi4_loop>:
    5786:	aa 1f       	adc	r26, r26
    5788:	bb 1f       	adc	r27, r27
    578a:	a6 17       	cp	r26, r22
    578c:	b7 07       	cpc	r27, r23
    578e:	10 f0       	brcs	.+4      	; 0x5794 <__udivmodhi4_ep>
    5790:	a6 1b       	sub	r26, r22
    5792:	b7 0b       	sbc	r27, r23

00005794 <__udivmodhi4_ep>:
    5794:	88 1f       	adc	r24, r24
    5796:	99 1f       	adc	r25, r25
    5798:	5a 95       	dec	r21
    579a:	a9 f7       	brne	.-22     	; 0x5786 <__udivmodhi4_loop>
    579c:	80 95       	com	r24
    579e:	90 95       	com	r25
    57a0:	bc 01       	movw	r22, r24
    57a2:	cd 01       	movw	r24, r26
    57a4:	08 95       	ret

000057a6 <__prologue_saves__>:
    57a6:	2f 92       	push	r2
    57a8:	3f 92       	push	r3
    57aa:	4f 92       	push	r4
    57ac:	5f 92       	push	r5
    57ae:	6f 92       	push	r6
    57b0:	7f 92       	push	r7
    57b2:	8f 92       	push	r8
    57b4:	9f 92       	push	r9
    57b6:	af 92       	push	r10
    57b8:	bf 92       	push	r11
    57ba:	cf 92       	push	r12
    57bc:	df 92       	push	r13
    57be:	ef 92       	push	r14
    57c0:	ff 92       	push	r15
    57c2:	0f 93       	push	r16
    57c4:	1f 93       	push	r17
    57c6:	cf 93       	push	r28
    57c8:	df 93       	push	r29
    57ca:	cd b7       	in	r28, 0x3d	; 61
    57cc:	de b7       	in	r29, 0x3e	; 62
    57ce:	ca 1b       	sub	r28, r26
    57d0:	db 0b       	sbc	r29, r27
    57d2:	0f b6       	in	r0, 0x3f	; 63
    57d4:	f8 94       	cli
    57d6:	de bf       	out	0x3e, r29	; 62
    57d8:	0f be       	out	0x3f, r0	; 63
    57da:	cd bf       	out	0x3d, r28	; 61
    57dc:	09 94       	ijmp

000057de <__epilogue_restores__>:
    57de:	2a 88       	ldd	r2, Y+18	; 0x12
    57e0:	39 88       	ldd	r3, Y+17	; 0x11
    57e2:	48 88       	ldd	r4, Y+16	; 0x10
    57e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    57e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    57e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    57ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    57ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    57ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    57f0:	b9 84       	ldd	r11, Y+9	; 0x09
    57f2:	c8 84       	ldd	r12, Y+8	; 0x08
    57f4:	df 80       	ldd	r13, Y+7	; 0x07
    57f6:	ee 80       	ldd	r14, Y+6	; 0x06
    57f8:	fd 80       	ldd	r15, Y+5	; 0x05
    57fa:	0c 81       	ldd	r16, Y+4	; 0x04
    57fc:	1b 81       	ldd	r17, Y+3	; 0x03
    57fe:	aa 81       	ldd	r26, Y+2	; 0x02
    5800:	b9 81       	ldd	r27, Y+1	; 0x01
    5802:	ce 0f       	add	r28, r30
    5804:	d1 1d       	adc	r29, r1
    5806:	0f b6       	in	r0, 0x3f	; 63
    5808:	f8 94       	cli
    580a:	de bf       	out	0x3e, r29	; 62
    580c:	0f be       	out	0x3f, r0	; 63
    580e:	cd bf       	out	0x3d, r28	; 61
    5810:	ed 01       	movw	r28, r26
    5812:	08 95       	ret

00005814 <memset>:
    5814:	dc 01       	movw	r26, r24
    5816:	01 c0       	rjmp	.+2      	; 0x581a <memset+0x6>
    5818:	6d 93       	st	X+, r22
    581a:	41 50       	subi	r20, 0x01	; 1
    581c:	50 40       	sbci	r21, 0x00	; 0
    581e:	e0 f7       	brcc	.-8      	; 0x5818 <memset+0x4>
    5820:	08 95       	ret

00005822 <strcpy>:
    5822:	fb 01       	movw	r30, r22
    5824:	dc 01       	movw	r26, r24
    5826:	01 90       	ld	r0, Z+
    5828:	0d 92       	st	X+, r0
    582a:	00 20       	and	r0, r0
    582c:	e1 f7       	brne	.-8      	; 0x5826 <strcpy+0x4>
    582e:	08 95       	ret

00005830 <strlen>:
    5830:	fc 01       	movw	r30, r24
    5832:	01 90       	ld	r0, Z+
    5834:	00 20       	and	r0, r0
    5836:	e9 f7       	brne	.-6      	; 0x5832 <strlen+0x2>
    5838:	80 95       	com	r24
    583a:	90 95       	com	r25
    583c:	8e 0f       	add	r24, r30
    583e:	9f 1f       	adc	r25, r31
    5840:	08 95       	ret

00005842 <_exit>:
    5842:	f8 94       	cli

00005844 <__stop_program>:
    5844:	ff cf       	rjmp	.-2      	; 0x5844 <__stop_program>
